void default_function_kernel(float* A, float* resize);
void default_function_kernel(float* A, float* resize) {
  #pragma omp parallel for
  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 480; ++i0_i1_fused_i2_fused) {
    for (int32_t i3 = 0; i3 < 10; ++i3) {
      for (int32_t i4_inner = 0; i4_inner < 10; ++i4_inner) {
        float cse_var_3 = (((((float)i4_inner) + 5.000000e-01f) * 3.200000e+00f) - 5.000000e-01f);
        float cse_var_2 = (((((float)i3) + 5.000000e-01f) * 3.200000e+00f) - 5.000000e-01f);
        float cse_var_1 = (((((float)(i0_i1_fused_i2_fused % 10)) + 5.000000e-01f) * 3.200000e+00f) - 5.000000e-01f);
        resize[(((i0_i1_fused_i2_fused * 100) + (i3 * 10)) + i4_inner)] = ((((((A[(((((i0_i1_fused_i2_fused / 10) * 32768) + (max(min(((int32_t)floorf(cse_var_1)), 31), 0) * 1024)) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_3)), 31), 0))] * (1.000000e+00f - (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) + (A[(((((i0_i1_fused_i2_fused / 10) * 32768) + (max(min(((int32_t)floorf(cse_var_1)), 31), 0) * 1024)) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_3)) + 1), 31), 0))] * (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((A[(((((i0_i1_fused_i2_fused / 10) * 32768) + (max(min(((int32_t)floorf(cse_var_1)), 31), 0) * 1024)) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_3)), 31), 0))] * (1.000000e+00f - (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) + (A[(((((i0_i1_fused_i2_fused / 10) * 32768) + (max(min(((int32_t)floorf(cse_var_1)), 31), 0) * 1024)) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_3)) + 1), 31), 0))] * (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (((((A[(((((i0_i1_fused_i2_fused / 10) * 32768) + (max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0) * 1024)) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_3)), 31), 0))] * (1.000000e+00f - (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) + (A[(((((i0_i1_fused_i2_fused / 10) * 32768) + (max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0) * 1024)) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_3)) + 1), 31), 0))] * (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((A[(((((i0_i1_fused_i2_fused / 10) * 32768) + (max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0) * 1024)) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_3)), 31), 0))] * (1.000000e+00f - (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) + (A[(((((i0_i1_fused_i2_fused / 10) * 32768) + (max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0) * 1024)) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_3)) + 1), 31), 0))] * (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1))))));
      }
    }
  }
}

