; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: num_args == 4, default_function: num_args should be 4\00", align 1
@.str.1 = private constant [130 x i8] c"Assert fail: data_code == 3 or data_code == 13 or data_code == 7 or data_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [142 x i8] c"Assert fail: indices_code == 3 or indices_code == 13 or indices_code == 7 or indices_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [142 x i8] c"Assert fail: updates_code == 3 or updates_code == 13 or updates_code == 7 or updates_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [186 x i8] c"Assert fail: scatter_nd_generic_code == 3 or scatter_nd_generic_code == 13 or scatter_nd_generic_code == 7 or scatter_nd_generic_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [107 x i8] c"Assert fail: 2 == T.tvm_struct_get(data, 0, 4, \22int32\22), default_function.data.ndim is expected to equal 2\00", align 1
@.str.6 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(data, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(data, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(data, 0, 7, \22uint16\22) == T.uint16(1), default_function.data.dtype is expected to be float32\00", align 1
@.str.7 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_data_shape[0]) == 2, Argument default_function.data.shape[0] has an unsatisfied constraint: 2 == T.Cast(\22int32\22, default_function_data_shape[0])\00", align 1
@.str.8 = private constant [197 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_data_shape[1]) == 1560, Argument default_function.data.shape[1] has an unsatisfied constraint: 1560 == T.Cast(\22int32\22, default_function_data_shape[1])\00", align 1
@.str.9 = private constant [191 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_data_strides[1]) and 1560 == T.Cast(\22int32\22, default_function_data_strides[0]), default_function.data.strides: expected to be compact array\00", align 1
@.str.10 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(data, 0, 8, \22uint64\22), Argument default_function.data.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(data, 0, 8, \22uint64\22)\00", align 1
@.str.11 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(data, 0, 10, \22int32\22) == 1, Argument default_function.data.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(data, 0, 10, \22int32\22)\00", align 1
@.str.12 = private constant [113 x i8] c"Assert fail: 2 == T.tvm_struct_get(indices, 0, 4, \22int32\22), default_function.indices.ndim is expected to equal 2\00", align 1
@.str.13 = private constant [245 x i8] c"Assert fail: T.tvm_struct_get(indices, 0, 5, \22uint8\22) == T.uint8(0) and T.tvm_struct_get(indices, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(indices, 0, 7, \22uint16\22) == T.uint16(1), default_function.indices.dtype is expected to be int32\00", align 1
@.str.14 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_indices_shape[0]) == 1, Argument default_function.indices.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_indices_shape[0])\00", align 1
@.str.15 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_indices_shape[1]) == 3, Argument default_function.indices.shape[1] has an unsatisfied constraint: 3 == T.Cast(\22int32\22, default_function_indices_shape[1])\00", align 1
@.str.16 = private constant [135 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_indices_strides[1]), default_function.indices.strides: expected to be compact array\00", align 1
@.str.17 = private constant [205 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(indices, 0, 8, \22uint64\22), Argument default_function.indices.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(indices, 0, 8, \22uint64\22)\00", align 1
@.str.18 = private constant [185 x i8] c"Assert fail: T.tvm_struct_get(indices, 0, 10, \22int32\22) == 1, Argument default_function.indices.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(indices, 0, 10, \22int32\22)\00", align 1
@.str.19 = private constant [191 x i8] c"Assert fail: dev_id == T.tvm_struct_get(indices, 0, 9, \22int32\22), Argument default_function.indices.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(indices, 0, 9, \22int32\22)\00", align 1
@.str.20 = private constant [113 x i8] c"Assert fail: 2 == T.tvm_struct_get(updates, 0, 4, \22int32\22), default_function.updates.ndim is expected to equal 2\00", align 1
@.str.21 = private constant [247 x i8] c"Assert fail: T.tvm_struct_get(updates, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(updates, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(updates, 0, 7, \22uint16\22) == T.uint16(1), default_function.updates.dtype is expected to be float32\00", align 1
@.str.22 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_updates_shape[0]) == 3, Argument default_function.updates.shape[0] has an unsatisfied constraint: 3 == T.Cast(\22int32\22, default_function_updates_shape[0])\00", align 1
@.str.23 = private constant [206 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_updates_shape[1]) == 1560, Argument default_function.updates.shape[1] has an unsatisfied constraint: 1560 == T.Cast(\22int32\22, default_function_updates_shape[1])\00", align 1
@.str.24 = private constant [200 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_updates_strides[1]) and 1560 == T.Cast(\22int32\22, default_function_updates_strides[0]), default_function.updates.strides: expected to be compact array\00", align 1
@.str.25 = private constant [205 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(updates, 0, 8, \22uint64\22), Argument default_function.updates.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(updates, 0, 8, \22uint64\22)\00", align 1
@.str.26 = private constant [185 x i8] c"Assert fail: T.tvm_struct_get(updates, 0, 10, \22int32\22) == 1, Argument default_function.updates.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(updates, 0, 10, \22int32\22)\00", align 1
@.str.27 = private constant [191 x i8] c"Assert fail: dev_id == T.tvm_struct_get(updates, 0, 9, \22int32\22), Argument default_function.updates.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(updates, 0, 9, \22int32\22)\00", align 1
@.str.28 = private constant [135 x i8] c"Assert fail: 2 == T.tvm_struct_get(scatter_nd_generic, 0, 4, \22int32\22), default_function.scatter_nd.generic.ndim is expected to equal 2\00", align 1
@.str.29 = private constant [291 x i8] c"Assert fail: T.tvm_struct_get(scatter_nd_generic, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(scatter_nd_generic, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(scatter_nd_generic, 0, 7, \22uint16\22) == T.uint16(1), default_function.scatter_nd.generic.dtype is expected to be float32\00", align 1
@.str.30 = private constant [233 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_scatter_nd_generic_shape[0]) == 2, Argument default_function.scatter_nd.generic.shape[0] has an unsatisfied constraint: 2 == T.Cast(\22int32\22, default_function_scatter_nd_generic_shape[0])\00", align 1
@.str.31 = private constant [239 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_scatter_nd_generic_shape[1]) == 1560, Argument default_function.scatter_nd.generic.shape[1] has an unsatisfied constraint: 1560 == T.Cast(\22int32\22, default_function_scatter_nd_generic_shape[1])\00", align 1
@.str.32 = private constant [233 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_scatter_nd_generic_strides[1]) and 1560 == T.Cast(\22int32\22, default_function_scatter_nd_generic_strides[0]), default_function.scatter_nd.generic.strides: expected to be compact array\00", align 1
@.str.33 = private constant [238 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(scatter_nd_generic, 0, 8, \22uint64\22), Argument default_function.scatter_nd.generic.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(scatter_nd_generic, 0, 8, \22uint64\22)\00", align 1
@.str.34 = private constant [218 x i8] c"Assert fail: T.tvm_struct_get(scatter_nd_generic, 0, 10, \22int32\22) == 1, Argument default_function.scatter_nd.generic.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(scatter_nd_generic, 0, 10, \22int32\22)\00", align 1
@.str.35 = private constant [224 x i8] c"Assert fail: dev_id == T.tvm_struct_get(scatter_nd_generic, 0, 9, \22int32\22), Argument default_function.scatter_nd.generic.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(scatter_nd_generic, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.36 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.37 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr102 = alloca [5 x %0], align 8, !dbg !18
  %stack_tcode103 = alloca [5 x i32], align 4, !dbg !18
  %stack_tcode103.sub = getelementptr inbounds [5 x i32], [5 x i32]* %stack_tcode103, i64 0, i64 0
  %stack_value = bitcast [5 x %0]* %stack_value_void_ptr102 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 4, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %data.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %indices.code = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %updates.code = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %scatter_nd.generic.code = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = bitcast i8* %args to %1**, !dbg !18
  %data104 = load %1*, %1** %5, align 8, !dbg !18
  %6 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %7 = bitcast i8* %6 to %1**, !dbg !18
  %indices105 = load %1*, %1** %7, align 8, !dbg !18
  %8 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %9 = bitcast i8* %8 to %1**, !dbg !18
  %updates106 = load %1*, %1** %9, align 8, !dbg !18
  %10 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %11 = bitcast i8* %10 to %1**, !dbg !18
  %scatter_nd.generic107 = load %1*, %1** %11, align 8, !dbg !18
  %12 = bitcast %1* %data104 to float**, !dbg !18
  %data_void_ptr108 = load float*, float** %12, align 8, !dbg !18
  %ptrint = ptrtoint float* %data_void_ptr108 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %13 = getelementptr inbounds %1, %1* %data104, i64 0, i32 4, !dbg !18
  %default_function.data.shape = load i64*, i64** %13, align 8, !dbg !18
  %14 = getelementptr inbounds %1, %1* %data104, i64 0, i32 5, !dbg !18
  %default_function.data.strides = load i64*, i64** %14, align 8, !dbg !18
  %15 = getelementptr inbounds %1, %1* %data104, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %15, align 4, !dbg !18
  %16 = bitcast %1* %indices105 to i32**, !dbg !18
  %indices_void_ptr109 = load i32*, i32** %16, align 8, !dbg !18
  %ptrint3 = ptrtoint i32* %indices_void_ptr109 to i64, !dbg !18
  %maskedptr4 = and i64 %ptrint3, 63, !dbg !18
  %maskcond5 = icmp eq i64 %maskedptr4, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond5), !dbg !18
  %17 = getelementptr inbounds %1, %1* %indices105, i64 0, i32 4, !dbg !18
  %default_function.indices.shape = load i64*, i64** %17, align 8, !dbg !18
  %18 = getelementptr inbounds %1, %1* %indices105, i64 0, i32 5, !dbg !18
  %default_function.indices.strides = load i64*, i64** %18, align 8, !dbg !18
  %19 = bitcast %1* %updates106 to float**, !dbg !18
  %updates_void_ptr110 = load float*, float** %19, align 8, !dbg !18
  %ptrint7 = ptrtoint float* %updates_void_ptr110 to i64, !dbg !18
  %maskedptr8 = and i64 %ptrint7, 63, !dbg !18
  %maskcond9 = icmp eq i64 %maskedptr8, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond9), !dbg !18
  %20 = getelementptr inbounds %1, %1* %updates106, i64 0, i32 4, !dbg !18
  %default_function.updates.shape = load i64*, i64** %20, align 8, !dbg !18
  %21 = getelementptr inbounds %1, %1* %updates106, i64 0, i32 5, !dbg !18
  %default_function.updates.strides = load i64*, i64** %21, align 8, !dbg !18
  %22 = bitcast %1* %scatter_nd.generic107 to float**, !dbg !18
  %scatter_nd.generic_void_ptr111 = load float*, float** %22, align 8, !dbg !18
  %ptrint11 = ptrtoint float* %scatter_nd.generic_void_ptr111 to i64, !dbg !18
  %maskedptr12 = and i64 %ptrint11, 63, !dbg !18
  %maskcond13 = icmp eq i64 %maskedptr12, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond13), !dbg !18
  %23 = getelementptr inbounds %1, %1* %scatter_nd.generic107, i64 0, i32 4, !dbg !18
  %default_function.scatter_nd.generic.shape = load i64*, i64** %23, align 8, !dbg !18
  %24 = getelementptr inbounds %1, %1* %scatter_nd.generic107, i64 0, i32 5, !dbg !18
  %default_function.scatter_nd.generic.strides = load i64*, i64** %24, align 8, !dbg !18
  switch i32 %data.code, label %assert_fail14 [
    i32 13, label %assert_end15
    i32 7, label %assert_end15
    i32 4, label %assert_end15
    i32 3, label %assert_end15
  ], !dbg !18

assert_fail14:                                    ; preds = %assert_end
  %25 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %25(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end15:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %indices.code, label %assert_fail16 [
    i32 13, label %assert_end17
    i32 7, label %assert_end17
    i32 4, label %assert_end17
    i32 3, label %assert_end17
  ], !dbg !18

assert_fail16:                                    ; preds = %assert_end15
  %26 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %26(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end17:                                     ; preds = %assert_end15, %assert_end15, %assert_end15, %assert_end15
  switch i32 %updates.code, label %assert_fail18 [
    i32 13, label %assert_end19
    i32 7, label %assert_end19
    i32 4, label %assert_end19
    i32 3, label %assert_end19
  ], !dbg !18

assert_fail18:                                    ; preds = %assert_end17
  %27 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %27(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end19:                                     ; preds = %assert_end17, %assert_end17, %assert_end17, %assert_end17
  switch i32 %scatter_nd.generic.code, label %assert_fail20 [
    i32 13, label %assert_end21
    i32 7, label %assert_end21
    i32 4, label %assert_end21
    i32 3, label %assert_end21
  ], !dbg !18

assert_fail20:                                    ; preds = %assert_end19
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %28(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end21:                                     ; preds = %assert_end19, %assert_end19, %assert_end19, %assert_end19
  %29 = getelementptr inbounds %1, %1* %data104, i64 0, i32 2, !dbg !18
  %30 = load i32, i32* %29, align 4, !dbg !18
  %31 = icmp eq i32 %30, 2, !dbg !18
  br i1 %31, label %assert_end25, label %assert_fail22, !dbg !18, !prof !19

assert_fail22:                                    ; preds = %assert_end21
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %32(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end25:                                     ; preds = %assert_end21
  %33 = getelementptr inbounds %1, %1* %data104, i64 0, i32 3, i32 2, !dbg !18
  %34 = load i16, i16* %33, align 2, !dbg !18
  %35 = icmp eq i16 %34, 1, !dbg !18
  %36 = getelementptr inbounds %1, %1* %data104, i64 0, i32 3, i32 1, !dbg !18
  %37 = load i8, i8* %36, align 1, !dbg !18
  %38 = icmp eq i8 %37, 32, !dbg !18
  %39 = getelementptr inbounds %1, %1* %data104, i64 0, i32 3, i32 0, !dbg !18
  %40 = load i8, i8* %39, align 1, !dbg !18
  %41 = icmp eq i8 %40, 2, !dbg !18
  %42 = and i1 %38, %41, !dbg !18
  %43 = and i1 %35, %42, !dbg !18
  br i1 %43, label %assert_end27, label %assert_fail26, !dbg !18, !prof !19

assert_fail26:                                    ; preds = %assert_end25
  %44 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %44(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end27:                                     ; preds = %assert_end25
  %45 = load i64, i64* %default_function.data.shape, align 8, !dbg !18, !tbaa !41
  %46 = trunc i64 %45 to i32, !dbg !18
  %47 = icmp eq i32 %46, 2, !dbg !18
  br i1 %47, label %assert_end29, label %assert_fail28, !dbg !18, !prof !19

assert_fail28:                                    ; preds = %assert_end27
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %48(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end29:                                     ; preds = %assert_end27
  %49 = getelementptr inbounds i64, i64* %default_function.data.shape, i64 1, !dbg !18
  %50 = load i64, i64* %49, align 8, !dbg !18, !tbaa !51
  %51 = trunc i64 %50 to i32, !dbg !18
  %52 = icmp eq i32 %51, 1560, !dbg !18
  br i1 %52, label %assert_end31, label %assert_fail30, !dbg !18, !prof !19

assert_fail30:                                    ; preds = %assert_end29
  %53 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %53(i8* getelementptr inbounds ([197 x i8], [197 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end31:                                     ; preds = %assert_end29
  %54 = icmp eq i64* %default_function.data.strides, null, !dbg !18
  br i1 %54, label %if_end, label %if_then, !dbg !18, !prof !53

if_then:                                          ; preds = %assert_end31
  %55 = load i64, i64* %default_function.data.strides, align 8, !dbg !18, !tbaa !54
  %56 = trunc i64 %55 to i32, !dbg !18
  %57 = icmp eq i32 %56, 1560, !dbg !18
  %58 = getelementptr inbounds i64, i64* %default_function.data.strides, i64 1, !dbg !18
  %59 = load i64, i64* %58, align 8, !dbg !18, !tbaa !64
  %60 = trunc i64 %59 to i32, !dbg !18
  %61 = icmp eq i32 %60, 1, !dbg !18
  %62 = and i1 %57, %61, !dbg !18
  br i1 %62, label %if_end, label %assert_fail32, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end31, %if_then
  %63 = getelementptr inbounds %1, %1* %data104, i64 0, i32 6, !dbg !18
  %64 = load i64, i64* %63, align 8, !dbg !18
  %65 = icmp eq i64 %64, 0, !dbg !18
  br i1 %65, label %assert_end35, label %assert_fail34, !dbg !18, !prof !19

assert_fail32:                                    ; preds = %if_then
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %66(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail34:                                    ; preds = %if_end
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %67(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end35:                                     ; preds = %if_end
  %68 = getelementptr inbounds %1, %1* %data104, i64 0, i32 1, i32 0, !dbg !18
  %69 = load i32, i32* %68, align 4, !dbg !18
  %70 = icmp eq i32 %69, 1, !dbg !18
  br i1 %70, label %assert_end37, label %assert_fail36, !dbg !18, !prof !19

assert_fail36:                                    ; preds = %assert_end35
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %71(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end37:                                     ; preds = %assert_end35
  %72 = getelementptr inbounds %1, %1* %indices105, i64 0, i32 2, !dbg !18
  %73 = load i32, i32* %72, align 4, !dbg !18
  %74 = icmp eq i32 %73, 2, !dbg !18
  br i1 %74, label %assert_end41, label %assert_fail38, !dbg !18, !prof !19

assert_fail38:                                    ; preds = %assert_end37
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %75(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end41:                                     ; preds = %assert_end37
  %76 = getelementptr inbounds %1, %1* %indices105, i64 0, i32 3, i32 2, !dbg !18
  %77 = load i16, i16* %76, align 2, !dbg !18
  %78 = icmp eq i16 %77, 1, !dbg !18
  %79 = getelementptr inbounds %1, %1* %indices105, i64 0, i32 3, i32 1, !dbg !18
  %80 = load i8, i8* %79, align 1, !dbg !18
  %81 = icmp eq i8 %80, 32, !dbg !18
  %82 = getelementptr inbounds %1, %1* %indices105, i64 0, i32 3, i32 0, !dbg !18
  %83 = load i8, i8* %82, align 1, !dbg !18
  %84 = icmp eq i8 %83, 0, !dbg !18
  %85 = and i1 %81, %84, !dbg !18
  %86 = and i1 %78, %85, !dbg !18
  br i1 %86, label %assert_end43, label %assert_fail42, !dbg !18, !prof !19

assert_fail42:                                    ; preds = %assert_end41
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %87(i8* getelementptr inbounds ([245 x i8], [245 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end43:                                     ; preds = %assert_end41
  %88 = load i64, i64* %default_function.indices.shape, align 8, !dbg !18, !tbaa !66
  %89 = trunc i64 %88 to i32, !dbg !18
  %90 = icmp eq i32 %89, 1, !dbg !18
  br i1 %90, label %assert_end45, label %assert_fail44, !dbg !18, !prof !19

assert_fail44:                                    ; preds = %assert_end43
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %91(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end45:                                     ; preds = %assert_end43
  %92 = getelementptr inbounds i64, i64* %default_function.indices.shape, i64 1, !dbg !18
  %93 = load i64, i64* %92, align 8, !dbg !18, !tbaa !76
  %94 = trunc i64 %93 to i32, !dbg !18
  %95 = icmp eq i32 %94, 3, !dbg !18
  br i1 %95, label %assert_end47, label %assert_fail46, !dbg !18, !prof !19

assert_fail46:                                    ; preds = %assert_end45
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %96(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end47:                                     ; preds = %assert_end45
  %97 = icmp eq i64* %default_function.indices.strides, null, !dbg !18
  br i1 %97, label %if_end49, label %if_then48, !dbg !18, !prof !53

if_then48:                                        ; preds = %assert_end47
  %98 = getelementptr inbounds i64, i64* %default_function.indices.strides, i64 1, !dbg !18
  %99 = load i64, i64* %98, align 8, !dbg !18, !tbaa !78
  %100 = trunc i64 %99 to i32, !dbg !18
  %101 = icmp eq i32 %100, 1, !dbg !18
  br i1 %101, label %if_end49, label %assert_fail50, !dbg !18, !prof !19

if_end49:                                         ; preds = %assert_end47, %if_then48
  %102 = getelementptr inbounds %1, %1* %indices105, i64 0, i32 6, !dbg !18
  %103 = load i64, i64* %102, align 8, !dbg !18
  %104 = icmp eq i64 %103, 0, !dbg !18
  br i1 %104, label %assert_end53, label %assert_fail52, !dbg !18, !prof !19

assert_fail50:                                    ; preds = %if_then48
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %105(i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail52:                                    ; preds = %if_end49
  %106 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %106(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end53:                                     ; preds = %if_end49
  %107 = getelementptr inbounds %1, %1* %indices105, i64 0, i32 1, i32 0, !dbg !18
  %108 = load i32, i32* %107, align 4, !dbg !18
  %109 = icmp eq i32 %108, 1, !dbg !18
  br i1 %109, label %assert_end55, label %assert_fail54, !dbg !18, !prof !19

assert_fail54:                                    ; preds = %assert_end53
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %110(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end55:                                     ; preds = %assert_end53
  %111 = getelementptr inbounds %1, %1* %indices105, i64 0, i32 1, i32 1, !dbg !18
  %112 = load i32, i32* %111, align 4, !dbg !18
  %113 = icmp eq i32 %dev_id, %112, !dbg !18
  br i1 %113, label %assert_end57, label %assert_fail56, !dbg !18, !prof !19

assert_fail56:                                    ; preds = %assert_end55
  %114 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %114(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end57:                                     ; preds = %assert_end55
  %115 = getelementptr inbounds %1, %1* %updates106, i64 0, i32 2, !dbg !18
  %116 = load i32, i32* %115, align 4, !dbg !18
  %117 = icmp eq i32 %116, 2, !dbg !18
  br i1 %117, label %assert_end61, label %assert_fail58, !dbg !18, !prof !19

assert_fail58:                                    ; preds = %assert_end57
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %118(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end61:                                     ; preds = %assert_end57
  %119 = getelementptr inbounds %1, %1* %updates106, i64 0, i32 3, i32 2, !dbg !18
  %120 = load i16, i16* %119, align 2, !dbg !18
  %121 = icmp eq i16 %120, 1, !dbg !18
  %122 = getelementptr inbounds %1, %1* %updates106, i64 0, i32 3, i32 1, !dbg !18
  %123 = load i8, i8* %122, align 1, !dbg !18
  %124 = icmp eq i8 %123, 32, !dbg !18
  %125 = getelementptr inbounds %1, %1* %updates106, i64 0, i32 3, i32 0, !dbg !18
  %126 = load i8, i8* %125, align 1, !dbg !18
  %127 = icmp eq i8 %126, 2, !dbg !18
  %128 = and i1 %124, %127, !dbg !18
  %129 = and i1 %121, %128, !dbg !18
  br i1 %129, label %assert_end63, label %assert_fail62, !dbg !18, !prof !19

assert_fail62:                                    ; preds = %assert_end61
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %130(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end63:                                     ; preds = %assert_end61
  %131 = load i64, i64* %default_function.updates.shape, align 8, !dbg !18, !tbaa !88
  %132 = trunc i64 %131 to i32, !dbg !18
  %133 = icmp eq i32 %132, 3, !dbg !18
  br i1 %133, label %assert_end65, label %assert_fail64, !dbg !18, !prof !19

assert_fail64:                                    ; preds = %assert_end63
  %134 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %134(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end65:                                     ; preds = %assert_end63
  %135 = getelementptr inbounds i64, i64* %default_function.updates.shape, i64 1, !dbg !18
  %136 = load i64, i64* %135, align 8, !dbg !18, !tbaa !98
  %137 = trunc i64 %136 to i32, !dbg !18
  %138 = icmp eq i32 %137, 1560, !dbg !18
  br i1 %138, label %assert_end67, label %assert_fail66, !dbg !18, !prof !19

assert_fail66:                                    ; preds = %assert_end65
  %139 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %139(i8* getelementptr inbounds ([206 x i8], [206 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end67:                                     ; preds = %assert_end65
  %140 = icmp eq i64* %default_function.updates.strides, null, !dbg !18
  br i1 %140, label %if_end69, label %if_then68, !dbg !18, !prof !53

if_then68:                                        ; preds = %assert_end67
  %141 = load i64, i64* %default_function.updates.strides, align 8, !dbg !18, !tbaa !100
  %142 = trunc i64 %141 to i32, !dbg !18
  %143 = icmp eq i32 %142, 1560, !dbg !18
  %144 = getelementptr inbounds i64, i64* %default_function.updates.strides, i64 1, !dbg !18
  %145 = load i64, i64* %144, align 8, !dbg !18, !tbaa !110
  %146 = trunc i64 %145 to i32, !dbg !18
  %147 = icmp eq i32 %146, 1, !dbg !18
  %148 = and i1 %143, %147, !dbg !18
  br i1 %148, label %if_end69, label %assert_fail70, !dbg !18, !prof !19

if_end69:                                         ; preds = %assert_end67, %if_then68
  %149 = getelementptr inbounds %1, %1* %updates106, i64 0, i32 6, !dbg !18
  %150 = load i64, i64* %149, align 8, !dbg !18
  %151 = icmp eq i64 %150, 0, !dbg !18
  br i1 %151, label %assert_end73, label %assert_fail72, !dbg !18, !prof !19

assert_fail70:                                    ; preds = %if_then68
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %152(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail72:                                    ; preds = %if_end69
  %153 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %153(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end73:                                     ; preds = %if_end69
  %154 = getelementptr inbounds %1, %1* %updates106, i64 0, i32 1, i32 0, !dbg !18
  %155 = load i32, i32* %154, align 4, !dbg !18
  %156 = icmp eq i32 %155, 1, !dbg !18
  br i1 %156, label %assert_end75, label %assert_fail74, !dbg !18, !prof !19

assert_fail74:                                    ; preds = %assert_end73
  %157 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %157(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end75:                                     ; preds = %assert_end73
  %158 = getelementptr inbounds %1, %1* %updates106, i64 0, i32 1, i32 1, !dbg !18
  %159 = load i32, i32* %158, align 4, !dbg !18
  %160 = icmp eq i32 %dev_id, %159, !dbg !18
  br i1 %160, label %assert_end77, label %assert_fail76, !dbg !18, !prof !19

assert_fail76:                                    ; preds = %assert_end75
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %161(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end77:                                     ; preds = %assert_end75
  %162 = getelementptr inbounds %1, %1* %scatter_nd.generic107, i64 0, i32 2, !dbg !18
  %163 = load i32, i32* %162, align 4, !dbg !18
  %164 = icmp eq i32 %163, 2, !dbg !18
  br i1 %164, label %assert_end81, label %assert_fail78, !dbg !18, !prof !19

assert_fail78:                                    ; preds = %assert_end77
  %165 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %165(i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end81:                                     ; preds = %assert_end77
  %166 = getelementptr inbounds %1, %1* %scatter_nd.generic107, i64 0, i32 3, i32 2, !dbg !18
  %167 = load i16, i16* %166, align 2, !dbg !18
  %168 = icmp eq i16 %167, 1, !dbg !18
  %169 = getelementptr inbounds %1, %1* %scatter_nd.generic107, i64 0, i32 3, i32 1, !dbg !18
  %170 = load i8, i8* %169, align 1, !dbg !18
  %171 = icmp eq i8 %170, 32, !dbg !18
  %172 = getelementptr inbounds %1, %1* %scatter_nd.generic107, i64 0, i32 3, i32 0, !dbg !18
  %173 = load i8, i8* %172, align 1, !dbg !18
  %174 = icmp eq i8 %173, 2, !dbg !18
  %175 = and i1 %171, %174, !dbg !18
  %176 = and i1 %168, %175, !dbg !18
  br i1 %176, label %assert_end83, label %assert_fail82, !dbg !18, !prof !19

assert_fail82:                                    ; preds = %assert_end81
  %177 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %177(i8* getelementptr inbounds ([291 x i8], [291 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end83:                                     ; preds = %assert_end81
  %178 = load i64, i64* %default_function.scatter_nd.generic.shape, align 8, !dbg !18, !tbaa !112
  %179 = trunc i64 %178 to i32, !dbg !18
  %180 = icmp eq i32 %179, 2, !dbg !18
  br i1 %180, label %assert_end85, label %assert_fail84, !dbg !18, !prof !19

assert_fail84:                                    ; preds = %assert_end83
  %181 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %181(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end85:                                     ; preds = %assert_end83
  %182 = getelementptr inbounds i64, i64* %default_function.scatter_nd.generic.shape, i64 1, !dbg !18
  %183 = load i64, i64* %182, align 8, !dbg !18, !tbaa !122
  %184 = trunc i64 %183 to i32, !dbg !18
  %185 = icmp eq i32 %184, 1560, !dbg !18
  br i1 %185, label %assert_end87, label %assert_fail86, !dbg !18, !prof !19

assert_fail86:                                    ; preds = %assert_end85
  %186 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %186(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end87:                                     ; preds = %assert_end85
  %187 = icmp eq i64* %default_function.scatter_nd.generic.strides, null, !dbg !18
  br i1 %187, label %if_end89, label %if_then88, !dbg !18, !prof !53

if_then88:                                        ; preds = %assert_end87
  %188 = load i64, i64* %default_function.scatter_nd.generic.strides, align 8, !dbg !18, !tbaa !124
  %189 = trunc i64 %188 to i32, !dbg !18
  %190 = icmp eq i32 %189, 1560, !dbg !18
  %191 = getelementptr inbounds i64, i64* %default_function.scatter_nd.generic.strides, i64 1, !dbg !18
  %192 = load i64, i64* %191, align 8, !dbg !18, !tbaa !134
  %193 = trunc i64 %192 to i32, !dbg !18
  %194 = icmp eq i32 %193, 1, !dbg !18
  %195 = and i1 %190, %194, !dbg !18
  br i1 %195, label %if_end89, label %assert_fail90, !dbg !18, !prof !19

if_end89:                                         ; preds = %assert_end87, %if_then88
  %196 = getelementptr inbounds %1, %1* %scatter_nd.generic107, i64 0, i32 6, !dbg !18
  %197 = load i64, i64* %196, align 8, !dbg !18
  %198 = icmp eq i64 %197, 0, !dbg !18
  br i1 %198, label %assert_end93, label %assert_fail92, !dbg !18, !prof !19

assert_fail90:                                    ; preds = %if_then88
  %199 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %199(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail92:                                    ; preds = %if_end89
  %200 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %200(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end93:                                     ; preds = %if_end89
  %201 = getelementptr inbounds %1, %1* %scatter_nd.generic107, i64 0, i32 1, i32 0, !dbg !18
  %202 = load i32, i32* %201, align 4, !dbg !18
  %203 = icmp eq i32 %202, 1, !dbg !18
  br i1 %203, label %assert_end95, label %assert_fail94, !dbg !18, !prof !19

assert_fail94:                                    ; preds = %assert_end93
  %204 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %204(i8* getelementptr inbounds ([218 x i8], [218 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end95:                                     ; preds = %assert_end93
  %205 = getelementptr inbounds %1, %1* %scatter_nd.generic107, i64 0, i32 1, i32 1, !dbg !18
  %206 = load i32, i32* %205, align 4, !dbg !18
  %207 = icmp eq i32 %dev_id, %206, !dbg !18
  br i1 %207, label %assert_end97, label %assert_fail96, !dbg !18, !prof !19

assert_fail96:                                    ; preds = %assert_end95
  %208 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %208(i8* getelementptr inbounds ([224 x i8], [224 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end97:                                     ; preds = %assert_end95
  %209 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %data_void_ptr108, i32* nonnull %stack_tcode103.sub, i32* %indices_void_ptr109, float* %scatter_nd.generic_void_ptr111, float* %updates_void_ptr110), !dbg !18
  ret i32 %209, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, i32* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5) unnamed_addr #2 {
entry:
  %6 = alloca i8*, align 8
  %7 = bitcast i8* %0 to %0*
  %8 = bitcast i8* %0 to float**
  store float* %1, float** %8, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 8
  %10 = bitcast i8* %9 to i32**
  store i32* %3, i32** %10, align 8
  %11 = getelementptr inbounds i8, i8* %0, i64 16
  %12 = bitcast i8* %11 to float**
  store float* %4, float** %12, align 8
  %13 = getelementptr inbounds i8, i8* %0, i64 24
  %14 = bitcast i8* %13 to float**
  store float* %5, float** %14, align 8
  %15 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %15, align 4, !tbaa !136
  %16 = getelementptr inbounds i8, i8* %0, i64 32
  %17 = bitcast i8* %16 to %0*
  %18 = getelementptr inbounds i32, i32* %2, i64 4
  %19 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %20 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %handle_init, label %handle_init_end, !prof !53

handle_init:                                      ; preds = %entry
  %22 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %23 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %24 = call i32 %23(i8* %22, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.36, i64 0, i64 0), i8** nonnull %6)
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %26 = phi i8* [ %20, %entry ], [ %29, %call_end ]
  %27 = call i32 %19(i8* %26, %0* %7, i32* nonnull %2, i32 4, %0* nonnull %17, i32* nonnull %18)
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %24, %handle_init ], [ %27, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %29 = load i8*, i8** %6, align 8
  store i8* %29, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %30 = bitcast i8* %16 to i64*
  %31 = load i64, i64* %30, align 8
  %kernel_error_code = trunc i64 %31 to i32
  %32 = icmp eq i32 %kernel_error_code, 0
  br i1 %32, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %33 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %33(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.37, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x56186643fc60.w4.b0", !25, i64 0}
!25 = !{!"0x56186643fc60.w8.b0", !26, i64 0}
!26 = !{!"0x56186643fc60.w16.b0", !27, i64 0}
!27 = !{!"0x56186643fc60.w32.b0", !28, i64 0}
!28 = !{!"0x56186643fc60.w64.b0", !29, i64 0}
!29 = !{!"0x56186643fc60.w128.b0", !30, i64 0}
!30 = !{!"0x56186643fc60.w256.b0", !31, i64 0}
!31 = !{!"0x56186643fc60.w512.b0", !32, i64 0}
!32 = !{!"0x56186643fc60.w1024.b0", !33, i64 0}
!33 = !{!"0x56186643fc60", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x56186643fc60.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x56186643fc60.w4.b8", !38, i64 0}
!38 = !{!"0x56186643fc60.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x56186643fc60.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x5618663f7620.w8.b0", !43, i64 0}
!43 = !{!"0x5618663f7620.w16.b0", !44, i64 0}
!44 = !{!"0x5618663f7620.w32.b0", !45, i64 0}
!45 = !{!"0x5618663f7620.w64.b0", !46, i64 0}
!46 = !{!"0x5618663f7620.w128.b0", !47, i64 0}
!47 = !{!"0x5618663f7620.w256.b0", !48, i64 0}
!48 = !{!"0x5618663f7620.w512.b0", !49, i64 0}
!49 = !{!"0x5618663f7620.w1024.b0", !50, i64 0}
!50 = !{!"0x5618663f7620", !22, i64 0}
!51 = !{!52, !52, i64 0}
!52 = !{!"0x5618663f7620.w8.b8", !43, i64 0}
!53 = !{!"branch_weights", i32 1, i32 1048576}
!54 = !{!55, !55, i64 0}
!55 = !{!"0x5618663ab1f0.w8.b0", !56, i64 0}
!56 = !{!"0x5618663ab1f0.w16.b0", !57, i64 0}
!57 = !{!"0x5618663ab1f0.w32.b0", !58, i64 0}
!58 = !{!"0x5618663ab1f0.w64.b0", !59, i64 0}
!59 = !{!"0x5618663ab1f0.w128.b0", !60, i64 0}
!60 = !{!"0x5618663ab1f0.w256.b0", !61, i64 0}
!61 = !{!"0x5618663ab1f0.w512.b0", !62, i64 0}
!62 = !{!"0x5618663ab1f0.w1024.b0", !63, i64 0}
!63 = !{!"0x5618663ab1f0", !22, i64 0}
!64 = !{!65, !65, i64 0}
!65 = !{!"0x5618663ab1f0.w8.b8", !56, i64 0}
!66 = !{!67, !67, i64 0}
!67 = !{!"0x56186645e060.w8.b0", !68, i64 0}
!68 = !{!"0x56186645e060.w16.b0", !69, i64 0}
!69 = !{!"0x56186645e060.w32.b0", !70, i64 0}
!70 = !{!"0x56186645e060.w64.b0", !71, i64 0}
!71 = !{!"0x56186645e060.w128.b0", !72, i64 0}
!72 = !{!"0x56186645e060.w256.b0", !73, i64 0}
!73 = !{!"0x56186645e060.w512.b0", !74, i64 0}
!74 = !{!"0x56186645e060.w1024.b0", !75, i64 0}
!75 = !{!"0x56186645e060", !22, i64 0}
!76 = !{!77, !77, i64 0}
!77 = !{!"0x56186645e060.w8.b8", !68, i64 0}
!78 = !{!79, !79, i64 0}
!79 = !{!"0x56186656dfb0.w8.b8", !80, i64 0}
!80 = !{!"0x56186656dfb0.w16.b0", !81, i64 0}
!81 = !{!"0x56186656dfb0.w32.b0", !82, i64 0}
!82 = !{!"0x56186656dfb0.w64.b0", !83, i64 0}
!83 = !{!"0x56186656dfb0.w128.b0", !84, i64 0}
!84 = !{!"0x56186656dfb0.w256.b0", !85, i64 0}
!85 = !{!"0x56186656dfb0.w512.b0", !86, i64 0}
!86 = !{!"0x56186656dfb0.w1024.b0", !87, i64 0}
!87 = !{!"0x56186656dfb0", !22, i64 0}
!88 = !{!89, !89, i64 0}
!89 = !{!"0x561864315f20.w8.b0", !90, i64 0}
!90 = !{!"0x561864315f20.w16.b0", !91, i64 0}
!91 = !{!"0x561864315f20.w32.b0", !92, i64 0}
!92 = !{!"0x561864315f20.w64.b0", !93, i64 0}
!93 = !{!"0x561864315f20.w128.b0", !94, i64 0}
!94 = !{!"0x561864315f20.w256.b0", !95, i64 0}
!95 = !{!"0x561864315f20.w512.b0", !96, i64 0}
!96 = !{!"0x561864315f20.w1024.b0", !97, i64 0}
!97 = !{!"0x561864315f20", !22, i64 0}
!98 = !{!99, !99, i64 0}
!99 = !{!"0x561864315f20.w8.b8", !90, i64 0}
!100 = !{!101, !101, i64 0}
!101 = !{!"0x561866570a40.w8.b0", !102, i64 0}
!102 = !{!"0x561866570a40.w16.b0", !103, i64 0}
!103 = !{!"0x561866570a40.w32.b0", !104, i64 0}
!104 = !{!"0x561866570a40.w64.b0", !105, i64 0}
!105 = !{!"0x561866570a40.w128.b0", !106, i64 0}
!106 = !{!"0x561866570a40.w256.b0", !107, i64 0}
!107 = !{!"0x561866570a40.w512.b0", !108, i64 0}
!108 = !{!"0x561866570a40.w1024.b0", !109, i64 0}
!109 = !{!"0x561866570a40", !22, i64 0}
!110 = !{!111, !111, i64 0}
!111 = !{!"0x561866570a40.w8.b8", !102, i64 0}
!112 = !{!113, !113, i64 0}
!113 = !{!"0x561866586c40.w8.b0", !114, i64 0}
!114 = !{!"0x561866586c40.w16.b0", !115, i64 0}
!115 = !{!"0x561866586c40.w32.b0", !116, i64 0}
!116 = !{!"0x561866586c40.w64.b0", !117, i64 0}
!117 = !{!"0x561866586c40.w128.b0", !118, i64 0}
!118 = !{!"0x561866586c40.w256.b0", !119, i64 0}
!119 = !{!"0x561866586c40.w512.b0", !120, i64 0}
!120 = !{!"0x561866586c40.w1024.b0", !121, i64 0}
!121 = !{!"0x561866586c40", !22, i64 0}
!122 = !{!123, !123, i64 0}
!123 = !{!"0x561866586c40.w8.b8", !114, i64 0}
!124 = !{!125, !125, i64 0}
!125 = !{!"0x561866565ae0.w8.b0", !126, i64 0}
!126 = !{!"0x561866565ae0.w16.b0", !127, i64 0}
!127 = !{!"0x561866565ae0.w32.b0", !128, i64 0}
!128 = !{!"0x561866565ae0.w64.b0", !129, i64 0}
!129 = !{!"0x561866565ae0.w128.b0", !130, i64 0}
!130 = !{!"0x561866565ae0.w256.b0", !131, i64 0}
!131 = !{!"0x561866565ae0.w512.b0", !132, i64 0}
!132 = !{!"0x561866565ae0.w1024.b0", !133, i64 0}
!133 = !{!"0x561866565ae0", !22, i64 0}
!134 = !{!135, !135, i64 0}
!135 = !{!"0x561866565ae0.w8.b8", !126, i64 0}
!136 = !{!137, !137, i64 0}
!137 = !{!"0x56186637ec90.w16.b0", !138, i64 0}
!138 = !{!"0x56186637ec90.w32.b0", !139, i64 0}
!139 = !{!"0x56186637ec90.w64.b0", !140, i64 0}
!140 = !{!"0x56186637ec90.w128.b0", !141, i64 0}
!141 = !{!"0x56186637ec90.w256.b0", !142, i64 0}
!142 = !{!"0x56186637ec90.w512.b0", !143, i64 0}
!143 = !{!"0x56186637ec90.w1024.b0", !144, i64 0}
!144 = !{!"0x56186637ec90", !22, i64 0}
