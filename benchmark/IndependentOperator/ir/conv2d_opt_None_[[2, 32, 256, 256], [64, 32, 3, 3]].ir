# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((2, 32, 256, 256), "float32"), kernel: T.Buffer((64, 32, 3, 3), "float32"), output_unpack: T.Buffer((2, 64, 254, 254), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        data_vec = T.allocate([4194304], "float32", "global")
        kernel_vec = T.allocate([18432], "float32", "global")
        data_vec_1 = T.Buffer((4194304,), data=data_vec)
        for bs_c_fused_h_fused in T.parallel(4096):
            for w, vc in T.grid(256, 4):
                data_1 = T.Buffer((4194304,), data=data.data)
                data_vec_1[bs_c_fused_h_fused * 1024 + w * 4 + vc] = data_1[bs_c_fused_h_fused // 256 * 262144 + vc * 65536 + bs_c_fused_h_fused % 256 * 256 + w]
        kernel_vec_1 = T.Buffer((18432,), data=kernel_vec)
        for occ_k_h_fused in T.parallel(48):
            for icc, k_w, icb, ocb in T.grid(8, 3, 4, 4):
                cse_var_2: T.int32 = occ_k_h_fused % 3
                cse_var_1: T.int32 = occ_k_h_fused // 3 * 1152
                kernel_1 = T.Buffer((18432,), data=kernel.data)
                kernel_vec_1[cse_var_1 + icc * 144 + cse_var_2 * 48 + k_w * 16 + icb * 4 + ocb] = kernel_1[cse_var_1 + ocb * 288 + icc * 36 + icb * 9 + cse_var_2 * 3 + k_w]
        for n_c_outer_fused_h_fused in T.parallel(8128):
            conv2d_NCHWc = T.allocate([1016], "float32", "global")
            conv2d_NCHWc_global = T.allocate([8], "float32", "global")
            conv2d_NCHWc_1 = T.Buffer((1016,), data=conv2d_NCHWc)
            for ow_outer in range(127):
                conv2d_NCHWc_global_1 = T.Buffer((8,), data=conv2d_NCHWc_global, align=32)
                for oc_block_c_init in range(4):
                    conv2d_NCHWc_global_1[oc_block_c_init] = T.float32(0)
                for oc_block_c_init in range(4):
                    conv2d_NCHWc_global_1[oc_block_c_init + 4] = T.float32(0)
                for ic_outer, kh, kw, ic_inner in T.grid(8, 3, 3, 4):
                    for oc_block_c in range(4):
                        conv2d_NCHWc_global_1[oc_block_c] = conv2d_NCHWc_global_1[oc_block_c] + data_vec_1[n_c_outer_fused_h_fused // 4064 * 2097152 + ic_outer * 262144 + kh * 1024 + n_c_outer_fused_h_fused % 254 * 1024 + ow_outer * 8 + kw * 4 + ic_inner] * kernel_vec_1[n_c_outer_fused_h_fused % 4064 // 254 * 1152 + ic_outer * 144 + kh * 48 + kw * 16 + ic_inner * 4 + oc_block_c]
                    for oc_block_c in range(4):
                        cse_var_3: T.int32 = oc_block_c + 4
                        conv2d_NCHWc_global_1[cse_var_3] = conv2d_NCHWc_global_1[cse_var_3] + data_vec_1[n_c_outer_fused_h_fused // 4064 * 2097152 + ic_outer * 262144 + kh * 1024 + n_c_outer_fused_h_fused % 254 * 1024 + ow_outer * 8 + kw * 4 + ic_inner + 4] * kernel_vec_1[n_c_outer_fused_h_fused % 4064 // 254 * 1152 + ic_outer * 144 + kh * 48 + kw * 16 + ic_inner * 4 + oc_block_c]
                for ow_inner, oc_block in T.grid(2, 4):
                    cse_var_4: T.int32 = ow_inner * 4
                    conv2d_NCHWc_1[ow_outer * 8 + cse_var_4 + oc_block] = conv2d_NCHWc_global_1[cse_var_4 + oc_block]
            for w_outer, w_inner, c_inner in T.grid(127, 2, 4):
                output_unpack_1 = T.Buffer((8258048,), data=output_unpack.data)
                output_unpack_1[n_c_outer_fused_h_fused // 254 * 258064 + c_inner * 64516 + n_c_outer_fused_h_fused % 254 * 254 + w_outer * 2 + w_inner] = conv2d_NCHWc_1[w_outer * 8 + w_inner * 4 + c_inner]