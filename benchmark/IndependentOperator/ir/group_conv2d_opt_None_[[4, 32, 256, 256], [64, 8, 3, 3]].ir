# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((4, 32, 256, 256), "float32"), W: T.Buffer((64, 8, 3, 3), "float32"), output_unpack: T.Buffer((4, 64, 254, 254), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        data_vec = T.allocate([8388608], "float32", "global")
        kernel_vec = T.allocate([4608], "float32", "global")
        conv_global = T.allocate([16516096], "float32", "global")
        data_vec_1 = T.Buffer((8388608,), data=data_vec)
        for g in range(4):
            for n_C_fused_h_fused in T.parallel(2048):
                for c, w in T.grid(4, 256):
                    A_1 = T.Buffer((8388608,), data=A.data)
                    data_vec_1[g * 2097152 + n_C_fused_h_fused * 1024 + c * 256 + w] = A_1[n_C_fused_h_fused // 512 * 2097152 + g * 524288 + n_C_fused_h_fused % 512 // 256 * 262144 + c * 65536 + n_C_fused_h_fused % 256 * 256 + w]
        kernel_vec_1 = T.Buffer((4608,), data=kernel_vec)
        for g_out_channel_fused_h_fused in T.parallel(48):
            for in_channel, w, ci, co in T.grid(2, 3, 4, 4):
                cse_var_2: T.int32 = g_out_channel_fused_h_fused % 3
                cse_var_1: T.int32 = g_out_channel_fused_h_fused // 3 * 288
                W_1 = T.Buffer((4608,), data=W.data)
                kernel_vec_1[cse_var_1 + in_channel * 144 + cse_var_2 * 48 + w * 16 + ci * 4 + co] = W_1[cse_var_1 + co * 72 + in_channel * 36 + ci * 9 + cse_var_2 * 3 + w]
        for g_c_n_c_fused_oc_chunk_c_fused_oh_c_fused in T.parallel(16256):
            for ow_c_outer in range(127):
                conv_global_1 = T.Buffer((16516096,), data=conv_global)
                for oc_block_c_init in range(4):
                    conv_global_1[g_c_n_c_fused_oc_chunk_c_fused_oh_c_fused * 1016 + ow_c_outer * 8 + oc_block_c_init] = T.float32(0)
                for oc_block_c_init in range(4):
                    conv_global_1[g_c_n_c_fused_oc_chunk_c_fused_oh_c_fused * 1016 + ow_c_outer * 8 + oc_block_c_init + 4] = T.float32(0)
                for ic_outer, kh, kw, ic_inner in T.grid(2, 3, 3, 4):
                    for oc_block_c in range(4):
                        cse_var_3: T.int32 = g_c_n_c_fused_oc_chunk_c_fused_oh_c_fused * 1016 + ow_c_outer * 8 + oc_block_c
                        conv_global_1[cse_var_3] = conv_global_1[cse_var_3] + data_vec_1[g_c_n_c_fused_oc_chunk_c_fused_oh_c_fused // 1016 * 524288 + ic_outer * 262144 + kh * 1024 + g_c_n_c_fused_oc_chunk_c_fused_oh_c_fused % 254 * 1024 + ic_inner * 256 + ow_c_outer * 2 + kw] * kernel_vec_1[g_c_n_c_fused_oc_chunk_c_fused_oh_c_fused // 4064 * 1152 + g_c_n_c_fused_oc_chunk_c_fused_oh_c_fused % 1016 // 254 * 288 + ic_outer * 144 + kh * 48 + kw * 16 + ic_inner * 4 + oc_block_c]
                    for oc_block_c in range(4):
                        cse_var_4: T.int32 = g_c_n_c_fused_oc_chunk_c_fused_oh_c_fused * 1016 + ow_c_outer * 8 + oc_block_c + 4
                        conv_global_1[cse_var_4] = conv_global_1[cse_var_4] + data_vec_1[g_c_n_c_fused_oc_chunk_c_fused_oh_c_fused // 1016 * 524288 + ic_outer * 262144 + kh * 1024 + g_c_n_c_fused_oc_chunk_c_fused_oh_c_fused % 254 * 1024 + ic_inner * 256 + ow_c_outer * 2 + kw + 1] * kernel_vec_1[g_c_n_c_fused_oc_chunk_c_fused_oh_c_fused // 4064 * 1152 + g_c_n_c_fused_oc_chunk_c_fused_oh_c_fused % 1016 // 254 * 288 + ic_outer * 144 + kh * 48 + kw * 16 + ic_inner * 4 + oc_block_c]
        for n in range(4):
            for c_outer_h_fused in T.parallel(4064):
                for w_outer, w_inner, c_inner in T.grid(127, 2, 4):
                    output_unpack_1 = T.Buffer((16516096,), data=output_unpack.data)
                    conv_global_1 = T.Buffer((16516096,), data=conv_global)
                    output_unpack_1[n * 4129024 + c_outer_h_fused // 254 * 258064 + c_inner * 64516 + c_outer_h_fused % 254 * 254 + w_outer * 2 + w_inner] = conv_global_1[c_outer_h_fused // 1016 * 4129024 + n * 1032256 + c_outer_h_fused % 1016 * 1016 + w_outer * 8 + w_inner * 4 + c_inner]