; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [69 x i8] c"Assert fail: num_args == 12, default_function: num_args should be 12\00", align 1
@.str.1 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[4] to be pointer\00", align 1
@.str.6 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[5] to be pointer\00", align 1
@.str.7 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[6] to be pointer\00", align 1
@.str.8 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[7] to be pointer\00", align 1
@.str.9 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[8] to be pointer\00", align 1
@.str.10 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[9] to be pointer\00", align 1
@.str.11 = private constant [123 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[10] to be pointer\00", align 1
@.str.12 = private constant [143 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[11] to be pointer\00", align 1
@.str.13 = private constant [103 x i8] c"Assert fail: 4 == T.tvm_struct_get(ph, 0, 4, \22int32\22), default_function.ph.ndim is expected to equal 4\00", align 1
@.str.14 = private constant [227 x i8] c"Assert fail: T.tvm_struct_get(ph, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph.dtype is expected to be float32\00", align 1
@.str.15 = private constant [185 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[0]) == 1, Argument default_function.ph.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_shape[0])\00", align 1
@.str.16 = private constant [185 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[1]) == 3, Argument default_function.ph.shape[1] has an unsatisfied constraint: 3 == T.Cast(\22int32\22, default_function_ph_shape[1])\00", align 1
@.str.17 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[2]) == 128, Argument default_function.ph.shape[2] has an unsatisfied constraint: 128 == T.Cast(\22int32\22, default_function_ph_shape[2])\00", align 1
@.str.18 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[3]) == 128, Argument default_function.ph.shape[3] has an unsatisfied constraint: 128 == T.Cast(\22int32\22, default_function_ph_shape[3])\00", align 1
@.str.19 = private constant [245 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[3]) and 128 == T.Cast(\22int32\22, default_function_ph_strides[2]) and 16384 == T.Cast(\22int32\22, default_function_ph_strides[1]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.20 = private constant [190 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph, 0, 8, \22uint64\22), Argument default_function.ph.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph, 0, 8, \22uint64\22)\00", align 1
@.str.21 = private constant [170 x i8] c"Assert fail: T.tvm_struct_get(ph, 0, 10, \22int32\22) == 1, Argument default_function.ph.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph, 0, 10, \22int32\22)\00", align 1
@.str.22 = private constant [187 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[0]) == 64, Argument default_function.ph.shape[0] has an unsatisfied constraint: 64 == T.Cast(\22int32\22, default_function_ph_shape[0])\00", align 1
@.str.23 = private constant [185 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[2]) == 3, Argument default_function.ph.shape[2] has an unsatisfied constraint: 3 == T.Cast(\22int32\22, default_function_ph_shape[2])\00", align 1
@.str.24 = private constant [185 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[3]) == 3, Argument default_function.ph.shape[3] has an unsatisfied constraint: 3 == T.Cast(\22int32\22, default_function_ph_shape[3])\00", align 1
@.str.25 = private constant [297 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[3]) and 3 == T.Cast(\22int32\22, default_function_ph_strides[2]) and 9 == T.Cast(\22int32\22, default_function_ph_strides[1]) and 27 == T.Cast(\22int32\22, default_function_ph_strides[0]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.26 = private constant [176 x i8] c"Assert fail: dev_id == T.tvm_struct_get(ph, 0, 9, \22int32\22), Argument default_function.ph.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(ph, 0, 9, \22int32\22)\00", align 1
@.str.27 = private constant [187 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[1]) == 64, Argument default_function.ph.shape[1] has an unsatisfied constraint: 64 == T.Cast(\22int32\22, default_function_ph_shape[1])\00", align 1
@.str.28 = private constant [298 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[3]) and 3 == T.Cast(\22int32\22, default_function_ph_strides[2]) and 9 == T.Cast(\22int32\22, default_function_ph_strides[1]) and 576 == T.Cast(\22int32\22, default_function_ph_strides[0]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.29 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[2]) == 126, Argument default_function.ph.shape[2] has an unsatisfied constraint: 126 == T.Cast(\22int32\22, default_function_ph_shape[2])\00", align 1
@.str.30 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[3]) == 126, Argument default_function.ph.shape[3] has an unsatisfied constraint: 126 == T.Cast(\22int32\22, default_function_ph_shape[3])\00", align 1
@.str.31 = private constant [245 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[3]) and 126 == T.Cast(\22int32\22, default_function_ph_strides[2]) and 15876 == T.Cast(\22int32\22, default_function_ph_strides[1]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.32 = private constant [103 x i8] c"Assert fail: 1 == T.tvm_struct_get(ph, 0, 4, \22int32\22), default_function.ph.ndim is expected to equal 1\00", align 1
@.str.34 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[2]) == 124, Argument default_function.ph.shape[2] has an unsatisfied constraint: 124 == T.Cast(\22int32\22, default_function_ph_shape[2])\00", align 1
@.str.35 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[3]) == 124, Argument default_function.ph.shape[3] has an unsatisfied constraint: 124 == T.Cast(\22int32\22, default_function_ph_shape[3])\00", align 1
@.str.36 = private constant [245 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[3]) and 124 == T.Cast(\22int32\22, default_function_ph_strides[2]) and 15376 == T.Cast(\22int32\22, default_function_ph_strides[1]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.37 = private constant [113 x i8] c"Assert fail: 4 == T.tvm_struct_get(compute, 0, 4, \22int32\22), default_function.compute.ndim is expected to equal 4\00", align 1
@.str.38 = private constant [247 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(compute, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(compute, 0, 7, \22uint16\22) == T.uint16(1), default_function.compute.dtype is expected to be float32\00", align 1
@.str.39 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[0]) == 1, Argument default_function.compute.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_compute_shape[0])\00", align 1
@.str.40 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[1]) == 64, Argument default_function.compute.shape[1] has an unsatisfied constraint: 64 == T.Cast(\22int32\22, default_function_compute_shape[1])\00", align 1
@.str.41 = private constant [204 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[2]) == 124, Argument default_function.compute.shape[2] has an unsatisfied constraint: 124 == T.Cast(\22int32\22, default_function_compute_shape[2])\00", align 1
@.str.42 = private constant [204 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[3]) == 124, Argument default_function.compute.shape[3] has an unsatisfied constraint: 124 == T.Cast(\22int32\22, default_function_compute_shape[3])\00", align 1
@.str.43 = private constant [265 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_compute_strides[3]) and 124 == T.Cast(\22int32\22, default_function_compute_strides[2]) and 15376 == T.Cast(\22int32\22, default_function_compute_strides[1]), default_function.compute.strides: expected to be compact array\00", align 1
@.str.44 = private constant [205 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22), Argument default_function.compute.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22)\00", align 1
@.str.45 = private constant [185 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 10, \22int32\22) == 1, Argument default_function.compute.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(compute, 0, 10, \22int32\22)\00", align 1
@.str.46 = private constant [191 x i8] c"Assert fail: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22), Argument default_function.compute.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.47 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.48 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr392 = alloca [13 x %0], align 8, !dbg !18
  %stack_tcode393 = alloca [13 x i32], align 4, !dbg !18
  %stack_tcode393.sub = getelementptr inbounds [13 x i32], [13 x i32]* %stack_tcode393, i64 0, i64 0
  %stack_value = bitcast [13 x %0]* %stack_value_void_ptr392 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 12, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %ph.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %ph.code1 = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %ph.code2 = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %ph.code3 = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 4, !dbg !18
  %ph.code4 = load i32, i32* %5, align 4, !dbg !18, !tbaa !41
  %6 = getelementptr inbounds i32, i32* %arg_type_ids, i64 5, !dbg !18
  %ph.code5 = load i32, i32* %6, align 4, !dbg !18, !tbaa !45
  %7 = getelementptr inbounds i32, i32* %arg_type_ids, i64 6, !dbg !18
  %ph.code6 = load i32, i32* %7, align 4, !dbg !18, !tbaa !47
  %8 = getelementptr inbounds i32, i32* %arg_type_ids, i64 7, !dbg !18
  %ph.code7 = load i32, i32* %8, align 4, !dbg !18, !tbaa !50
  %9 = getelementptr inbounds i32, i32* %arg_type_ids, i64 8, !dbg !18
  %ph.code8 = load i32, i32* %9, align 4, !dbg !18, !tbaa !52
  %10 = getelementptr inbounds i32, i32* %arg_type_ids, i64 9, !dbg !18
  %ph.code9 = load i32, i32* %10, align 4, !dbg !18, !tbaa !57
  %11 = getelementptr inbounds i32, i32* %arg_type_ids, i64 10, !dbg !18
  %ph.code10 = load i32, i32* %11, align 4, !dbg !18, !tbaa !59
  %12 = getelementptr inbounds i32, i32* %arg_type_ids, i64 11, !dbg !18
  %compute.code = load i32, i32* %12, align 4, !dbg !18, !tbaa !62
  %13 = bitcast i8* %args to %1**, !dbg !18
  %ph394 = load %1*, %1** %13, align 8, !dbg !18
  %14 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %15 = bitcast i8* %14 to %1**, !dbg !18
  %ph11395 = load %1*, %1** %15, align 8, !dbg !18
  %16 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %17 = bitcast i8* %16 to %1**, !dbg !18
  %ph12396 = load %1*, %1** %17, align 8, !dbg !18
  %18 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %19 = bitcast i8* %18 to %1**, !dbg !18
  %ph13397 = load %1*, %1** %19, align 8, !dbg !18
  %20 = getelementptr inbounds i8, i8* %args, i64 32, !dbg !18
  %21 = bitcast i8* %20 to %1**, !dbg !18
  %ph14398 = load %1*, %1** %21, align 8, !dbg !18
  %22 = getelementptr inbounds i8, i8* %args, i64 40, !dbg !18
  %23 = bitcast i8* %22 to %1**, !dbg !18
  %ph15399 = load %1*, %1** %23, align 8, !dbg !18
  %24 = getelementptr inbounds i8, i8* %args, i64 48, !dbg !18
  %25 = bitcast i8* %24 to %1**, !dbg !18
  %ph16400 = load %1*, %1** %25, align 8, !dbg !18
  %26 = getelementptr inbounds i8, i8* %args, i64 56, !dbg !18
  %27 = bitcast i8* %26 to %1**, !dbg !18
  %ph17401 = load %1*, %1** %27, align 8, !dbg !18
  %28 = getelementptr inbounds i8, i8* %args, i64 64, !dbg !18
  %29 = bitcast i8* %28 to %1**, !dbg !18
  %ph18402 = load %1*, %1** %29, align 8, !dbg !18
  %30 = getelementptr inbounds i8, i8* %args, i64 72, !dbg !18
  %31 = bitcast i8* %30 to %1**, !dbg !18
  %ph19403 = load %1*, %1** %31, align 8, !dbg !18
  %32 = getelementptr inbounds i8, i8* %args, i64 80, !dbg !18
  %33 = bitcast i8* %32 to %1**, !dbg !18
  %ph20404 = load %1*, %1** %33, align 8, !dbg !18
  %34 = getelementptr inbounds i8, i8* %args, i64 88, !dbg !18
  %35 = bitcast i8* %34 to %1**, !dbg !18
  %compute405 = load %1*, %1** %35, align 8, !dbg !18
  %36 = bitcast %1* %ph394 to float**, !dbg !18
  %ph_void_ptr406 = load float*, float** %36, align 8, !dbg !18
  %ptrint = ptrtoint float* %ph_void_ptr406 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %37 = getelementptr inbounds %1, %1* %ph394, i64 0, i32 4, !dbg !18
  %default_function.ph.shape = load i64*, i64** %37, align 8, !dbg !18
  %38 = getelementptr inbounds %1, %1* %ph394, i64 0, i32 5, !dbg !18
  %default_function.ph.strides = load i64*, i64** %38, align 8, !dbg !18
  %39 = getelementptr inbounds %1, %1* %ph394, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %39, align 4, !dbg !18
  %40 = bitcast %1* %ph11395 to float**, !dbg !18
  %ph_void_ptr22407 = load float*, float** %40, align 8, !dbg !18
  %ptrint24 = ptrtoint float* %ph_void_ptr22407 to i64, !dbg !18
  %maskedptr25 = and i64 %ptrint24, 63, !dbg !18
  %maskcond26 = icmp eq i64 %maskedptr25, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond26), !dbg !18
  %41 = getelementptr inbounds %1, %1* %ph11395, i64 0, i32 4, !dbg !18
  %default_function.ph.shape27 = load i64*, i64** %41, align 8, !dbg !18
  %42 = getelementptr inbounds %1, %1* %ph11395, i64 0, i32 5, !dbg !18
  %default_function.ph.strides28 = load i64*, i64** %42, align 8, !dbg !18
  %43 = bitcast %1* %ph12396 to float**, !dbg !18
  %ph_void_ptr29408 = load float*, float** %43, align 8, !dbg !18
  %ptrint31 = ptrtoint float* %ph_void_ptr29408 to i64, !dbg !18
  %maskedptr32 = and i64 %ptrint31, 63, !dbg !18
  %maskcond33 = icmp eq i64 %maskedptr32, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond33), !dbg !18
  %44 = getelementptr inbounds %1, %1* %ph12396, i64 0, i32 4, !dbg !18
  %default_function.ph.shape34 = load i64*, i64** %44, align 8, !dbg !18
  %45 = getelementptr inbounds %1, %1* %ph12396, i64 0, i32 5, !dbg !18
  %default_function.ph.strides35 = load i64*, i64** %45, align 8, !dbg !18
  %46 = bitcast %1* %ph13397 to float**, !dbg !18
  %ph_void_ptr36409 = load float*, float** %46, align 8, !dbg !18
  %ptrint38 = ptrtoint float* %ph_void_ptr36409 to i64, !dbg !18
  %maskedptr39 = and i64 %ptrint38, 63, !dbg !18
  %maskcond40 = icmp eq i64 %maskedptr39, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond40), !dbg !18
  %47 = getelementptr inbounds %1, %1* %ph13397, i64 0, i32 4, !dbg !18
  %default_function.ph.shape41 = load i64*, i64** %47, align 8, !dbg !18
  %48 = getelementptr inbounds %1, %1* %ph13397, i64 0, i32 5, !dbg !18
  %default_function.ph.strides42 = load i64*, i64** %48, align 8, !dbg !18
  %49 = bitcast %1* %ph14398 to float**, !dbg !18
  %ph_void_ptr43410 = load float*, float** %49, align 8, !dbg !18
  %ptrint45 = ptrtoint float* %ph_void_ptr43410 to i64, !dbg !18
  %maskedptr46 = and i64 %ptrint45, 63, !dbg !18
  %maskcond47 = icmp eq i64 %maskedptr46, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond47), !dbg !18
  %50 = getelementptr inbounds %1, %1* %ph14398, i64 0, i32 4, !dbg !18
  %default_function.ph.shape48 = load i64*, i64** %50, align 8, !dbg !18
  %51 = getelementptr inbounds %1, %1* %ph14398, i64 0, i32 5, !dbg !18
  %default_function.ph.strides49 = load i64*, i64** %51, align 8, !dbg !18
  %52 = bitcast %1* %ph15399 to float**, !dbg !18
  %ph_void_ptr50411 = load float*, float** %52, align 8, !dbg !18
  %ptrint52 = ptrtoint float* %ph_void_ptr50411 to i64, !dbg !18
  %maskedptr53 = and i64 %ptrint52, 63, !dbg !18
  %maskcond54 = icmp eq i64 %maskedptr53, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond54), !dbg !18
  %53 = getelementptr inbounds %1, %1* %ph15399, i64 0, i32 4, !dbg !18
  %default_function.ph.shape55 = load i64*, i64** %53, align 8, !dbg !18
  %54 = bitcast %1* %ph16400 to float**, !dbg !18
  %ph_void_ptr57412 = load float*, float** %54, align 8, !dbg !18
  %ptrint59 = ptrtoint float* %ph_void_ptr57412 to i64, !dbg !18
  %maskedptr60 = and i64 %ptrint59, 63, !dbg !18
  %maskcond61 = icmp eq i64 %maskedptr60, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond61), !dbg !18
  %55 = getelementptr inbounds %1, %1* %ph16400, i64 0, i32 4, !dbg !18
  %default_function.ph.shape62 = load i64*, i64** %55, align 8, !dbg !18
  %56 = bitcast %1* %ph17401 to float**, !dbg !18
  %ph_void_ptr64413 = load float*, float** %56, align 8, !dbg !18
  %ptrint66 = ptrtoint float* %ph_void_ptr64413 to i64, !dbg !18
  %maskedptr67 = and i64 %ptrint66, 63, !dbg !18
  %maskcond68 = icmp eq i64 %maskedptr67, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond68), !dbg !18
  %57 = getelementptr inbounds %1, %1* %ph17401, i64 0, i32 4, !dbg !18
  %default_function.ph.shape69 = load i64*, i64** %57, align 8, !dbg !18
  %58 = getelementptr inbounds %1, %1* %ph17401, i64 0, i32 5, !dbg !18
  %default_function.ph.strides70 = load i64*, i64** %58, align 8, !dbg !18
  %59 = bitcast %1* %ph18402 to float**, !dbg !18
  %ph_void_ptr71414 = load float*, float** %59, align 8, !dbg !18
  %ptrint73 = ptrtoint float* %ph_void_ptr71414 to i64, !dbg !18
  %maskedptr74 = and i64 %ptrint73, 63, !dbg !18
  %maskcond75 = icmp eq i64 %maskedptr74, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond75), !dbg !18
  %60 = getelementptr inbounds %1, %1* %ph18402, i64 0, i32 4, !dbg !18
  %default_function.ph.shape76 = load i64*, i64** %60, align 8, !dbg !18
  %61 = getelementptr inbounds %1, %1* %ph18402, i64 0, i32 5, !dbg !18
  %default_function.ph.strides77 = load i64*, i64** %61, align 8, !dbg !18
  %62 = bitcast %1* %ph19403 to float**, !dbg !18
  %ph_void_ptr78415 = load float*, float** %62, align 8, !dbg !18
  %ptrint80 = ptrtoint float* %ph_void_ptr78415 to i64, !dbg !18
  %maskedptr81 = and i64 %ptrint80, 63, !dbg !18
  %maskcond82 = icmp eq i64 %maskedptr81, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond82), !dbg !18
  %63 = getelementptr inbounds %1, %1* %ph19403, i64 0, i32 4, !dbg !18
  %default_function.ph.shape83 = load i64*, i64** %63, align 8, !dbg !18
  %64 = bitcast %1* %ph20404 to float**, !dbg !18
  %ph_void_ptr85416 = load float*, float** %64, align 8, !dbg !18
  %ptrint87 = ptrtoint float* %ph_void_ptr85416 to i64, !dbg !18
  %maskedptr88 = and i64 %ptrint87, 63, !dbg !18
  %maskcond89 = icmp eq i64 %maskedptr88, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond89), !dbg !18
  %65 = getelementptr inbounds %1, %1* %ph20404, i64 0, i32 4, !dbg !18
  %default_function.ph.shape90 = load i64*, i64** %65, align 8, !dbg !18
  %66 = bitcast %1* %compute405 to float**, !dbg !18
  %compute_void_ptr417 = load float*, float** %66, align 8, !dbg !18
  %ptrint93 = ptrtoint float* %compute_void_ptr417 to i64, !dbg !18
  %maskedptr94 = and i64 %ptrint93, 63, !dbg !18
  %maskcond95 = icmp eq i64 %maskedptr94, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond95), !dbg !18
  %67 = getelementptr inbounds %1, %1* %compute405, i64 0, i32 4, !dbg !18
  %default_function.compute.shape = load i64*, i64** %67, align 8, !dbg !18
  %68 = getelementptr inbounds %1, %1* %compute405, i64 0, i32 5, !dbg !18
  %default_function.compute.strides = load i64*, i64** %68, align 8, !dbg !18
  switch i32 %ph.code, label %assert_fail96 [
    i32 13, label %assert_end97
    i32 7, label %assert_end97
    i32 4, label %assert_end97
    i32 3, label %assert_end97
  ], !dbg !18

assert_fail96:                                    ; preds = %assert_end
  %69 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %69(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end97:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %ph.code1, label %assert_fail98 [
    i32 13, label %assert_end99
    i32 7, label %assert_end99
    i32 4, label %assert_end99
    i32 3, label %assert_end99
  ], !dbg !18

assert_fail98:                                    ; preds = %assert_end97
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %70(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end99:                                     ; preds = %assert_end97, %assert_end97, %assert_end97, %assert_end97
  switch i32 %ph.code2, label %assert_fail100 [
    i32 13, label %assert_end101
    i32 7, label %assert_end101
    i32 4, label %assert_end101
    i32 3, label %assert_end101
  ], !dbg !18

assert_fail100:                                   ; preds = %assert_end99
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %71(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end101:                                    ; preds = %assert_end99, %assert_end99, %assert_end99, %assert_end99
  switch i32 %ph.code3, label %assert_fail102 [
    i32 13, label %assert_end103
    i32 7, label %assert_end103
    i32 4, label %assert_end103
    i32 3, label %assert_end103
  ], !dbg !18

assert_fail102:                                   ; preds = %assert_end101
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %72(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end103:                                    ; preds = %assert_end101, %assert_end101, %assert_end101, %assert_end101
  switch i32 %ph.code4, label %assert_fail104 [
    i32 13, label %assert_end105
    i32 7, label %assert_end105
    i32 4, label %assert_end105
    i32 3, label %assert_end105
  ], !dbg !18

assert_fail104:                                   ; preds = %assert_end103
  %73 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %73(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end105:                                    ; preds = %assert_end103, %assert_end103, %assert_end103, %assert_end103
  switch i32 %ph.code5, label %assert_fail106 [
    i32 13, label %assert_end107
    i32 7, label %assert_end107
    i32 4, label %assert_end107
    i32 3, label %assert_end107
  ], !dbg !18

assert_fail106:                                   ; preds = %assert_end105
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %74(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end107:                                    ; preds = %assert_end105, %assert_end105, %assert_end105, %assert_end105
  switch i32 %ph.code6, label %assert_fail108 [
    i32 13, label %assert_end109
    i32 7, label %assert_end109
    i32 4, label %assert_end109
    i32 3, label %assert_end109
  ], !dbg !18

assert_fail108:                                   ; preds = %assert_end107
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %75(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end109:                                    ; preds = %assert_end107, %assert_end107, %assert_end107, %assert_end107
  switch i32 %ph.code7, label %assert_fail110 [
    i32 13, label %assert_end111
    i32 7, label %assert_end111
    i32 4, label %assert_end111
    i32 3, label %assert_end111
  ], !dbg !18

assert_fail110:                                   ; preds = %assert_end109
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %76(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end111:                                    ; preds = %assert_end109, %assert_end109, %assert_end109, %assert_end109
  switch i32 %ph.code8, label %assert_fail112 [
    i32 13, label %assert_end113
    i32 7, label %assert_end113
    i32 4, label %assert_end113
    i32 3, label %assert_end113
  ], !dbg !18

assert_fail112:                                   ; preds = %assert_end111
  %77 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %77(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end113:                                    ; preds = %assert_end111, %assert_end111, %assert_end111, %assert_end111
  switch i32 %ph.code9, label %assert_fail114 [
    i32 13, label %assert_end115
    i32 7, label %assert_end115
    i32 4, label %assert_end115
    i32 3, label %assert_end115
  ], !dbg !18

assert_fail114:                                   ; preds = %assert_end113
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %78(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end115:                                    ; preds = %assert_end113, %assert_end113, %assert_end113, %assert_end113
  switch i32 %ph.code10, label %assert_fail116 [
    i32 13, label %assert_end117
    i32 7, label %assert_end117
    i32 4, label %assert_end117
    i32 3, label %assert_end117
  ], !dbg !18

assert_fail116:                                   ; preds = %assert_end115
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %79(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end117:                                    ; preds = %assert_end115, %assert_end115, %assert_end115, %assert_end115
  switch i32 %compute.code, label %assert_fail118 [
    i32 13, label %assert_end119
    i32 7, label %assert_end119
    i32 4, label %assert_end119
    i32 3, label %assert_end119
  ], !dbg !18

assert_fail118:                                   ; preds = %assert_end117
  %80 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %80(i8* getelementptr inbounds ([143 x i8], [143 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end119:                                    ; preds = %assert_end117, %assert_end117, %assert_end117, %assert_end117
  %81 = getelementptr inbounds %1, %1* %ph394, i64 0, i32 2, !dbg !18
  %82 = load i32, i32* %81, align 4, !dbg !18
  %83 = icmp eq i32 %82, 4, !dbg !18
  br i1 %83, label %assert_end123, label %assert_fail120, !dbg !18, !prof !19

assert_fail120:                                   ; preds = %assert_end119
  %84 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %84(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end123:                                    ; preds = %assert_end119
  %85 = getelementptr inbounds %1, %1* %ph394, i64 0, i32 3, i32 2, !dbg !18
  %86 = load i16, i16* %85, align 2, !dbg !18
  %87 = icmp eq i16 %86, 1, !dbg !18
  %88 = getelementptr inbounds %1, %1* %ph394, i64 0, i32 3, i32 1, !dbg !18
  %89 = load i8, i8* %88, align 1, !dbg !18
  %90 = icmp eq i8 %89, 32, !dbg !18
  %91 = getelementptr inbounds %1, %1* %ph394, i64 0, i32 3, i32 0, !dbg !18
  %92 = load i8, i8* %91, align 1, !dbg !18
  %93 = icmp eq i8 %92, 2, !dbg !18
  %94 = and i1 %90, %93, !dbg !18
  %95 = and i1 %87, %94, !dbg !18
  br i1 %95, label %assert_end125, label %assert_fail124, !dbg !18, !prof !19

assert_fail124:                                   ; preds = %assert_end123
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %96(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end125:                                    ; preds = %assert_end123
  %97 = load i64, i64* %default_function.ph.shape, align 8, !dbg !18, !tbaa !64
  %98 = trunc i64 %97 to i32, !dbg !18
  %99 = icmp eq i32 %98, 1, !dbg !18
  br i1 %99, label %assert_end127, label %assert_fail126, !dbg !18, !prof !19

assert_fail126:                                   ; preds = %assert_end125
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %100(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end127:                                    ; preds = %assert_end125
  %101 = getelementptr inbounds i64, i64* %default_function.ph.shape, i64 1, !dbg !18
  %102 = load i64, i64* %101, align 8, !dbg !18, !tbaa !74
  %103 = trunc i64 %102 to i32, !dbg !18
  %104 = icmp eq i32 %103, 3, !dbg !18
  br i1 %104, label %assert_end129, label %assert_fail128, !dbg !18, !prof !19

assert_fail128:                                   ; preds = %assert_end127
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %105(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end129:                                    ; preds = %assert_end127
  %106 = getelementptr inbounds i64, i64* %default_function.ph.shape, i64 2, !dbg !18
  %107 = load i64, i64* %106, align 8, !dbg !18, !tbaa !76
  %108 = trunc i64 %107 to i32, !dbg !18
  %109 = icmp eq i32 %108, 128, !dbg !18
  br i1 %109, label %assert_end131, label %assert_fail130, !dbg !18, !prof !19

assert_fail130:                                   ; preds = %assert_end129
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %110(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end131:                                    ; preds = %assert_end129
  %111 = getelementptr inbounds i64, i64* %default_function.ph.shape, i64 3, !dbg !18
  %112 = load i64, i64* %111, align 8, !dbg !18, !tbaa !79
  %113 = trunc i64 %112 to i32, !dbg !18
  %114 = icmp eq i32 %113, 128, !dbg !18
  br i1 %114, label %assert_end133, label %assert_fail132, !dbg !18, !prof !19

assert_fail132:                                   ; preds = %assert_end131
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %115(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end133:                                    ; preds = %assert_end131
  %116 = icmp eq i64* %default_function.ph.strides, null, !dbg !18
  br i1 %116, label %if_end, label %if_then, !dbg !18, !prof !81

if_then:                                          ; preds = %assert_end133
  %117 = getelementptr inbounds i64, i64* %default_function.ph.strides, i64 1, !dbg !18
  %118 = load i64, i64* %117, align 8, !dbg !18, !tbaa !82
  %119 = trunc i64 %118 to i32, !dbg !18
  %120 = icmp eq i32 %119, 16384, !dbg !18
  %121 = getelementptr inbounds i64, i64* %default_function.ph.strides, i64 2, !dbg !18
  %122 = load i64, i64* %121, align 8, !dbg !18, !tbaa !92
  %123 = trunc i64 %122 to i32, !dbg !18
  %124 = icmp eq i32 %123, 128, !dbg !18
  %125 = getelementptr inbounds i64, i64* %default_function.ph.strides, i64 3, !dbg !18
  %126 = load i64, i64* %125, align 8, !dbg !18, !tbaa !95
  %127 = trunc i64 %126 to i32, !dbg !18
  %128 = icmp eq i32 %127, 1, !dbg !18
  %129 = and i1 %124, %128, !dbg !18
  %130 = and i1 %120, %129, !dbg !18
  br i1 %130, label %if_end, label %assert_fail134, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end133, %if_then
  %131 = getelementptr inbounds %1, %1* %ph394, i64 0, i32 6, !dbg !18
  %132 = load i64, i64* %131, align 8, !dbg !18
  %133 = icmp eq i64 %132, 0, !dbg !18
  br i1 %133, label %assert_end137, label %assert_fail136, !dbg !18, !prof !19

assert_fail134:                                   ; preds = %if_then
  %134 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %134(i8* getelementptr inbounds ([245 x i8], [245 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail136:                                   ; preds = %if_end
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %135(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end137:                                    ; preds = %if_end
  %136 = getelementptr inbounds %1, %1* %ph394, i64 0, i32 1, i32 0, !dbg !18
  %137 = load i32, i32* %136, align 4, !dbg !18
  %138 = icmp eq i32 %137, 1, !dbg !18
  br i1 %138, label %assert_end139, label %assert_fail138, !dbg !18, !prof !19

assert_fail138:                                   ; preds = %assert_end137
  %139 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %139(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end139:                                    ; preds = %assert_end137
  %140 = getelementptr inbounds %1, %1* %ph11395, i64 0, i32 2, !dbg !18
  %141 = load i32, i32* %140, align 4, !dbg !18
  %142 = icmp eq i32 %141, 4, !dbg !18
  br i1 %142, label %assert_end143, label %assert_fail140, !dbg !18, !prof !19

assert_fail140:                                   ; preds = %assert_end139
  %143 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %143(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end143:                                    ; preds = %assert_end139
  %144 = getelementptr inbounds %1, %1* %ph11395, i64 0, i32 3, i32 2, !dbg !18
  %145 = load i16, i16* %144, align 2, !dbg !18
  %146 = icmp eq i16 %145, 1, !dbg !18
  %147 = getelementptr inbounds %1, %1* %ph11395, i64 0, i32 3, i32 1, !dbg !18
  %148 = load i8, i8* %147, align 1, !dbg !18
  %149 = icmp eq i8 %148, 32, !dbg !18
  %150 = getelementptr inbounds %1, %1* %ph11395, i64 0, i32 3, i32 0, !dbg !18
  %151 = load i8, i8* %150, align 1, !dbg !18
  %152 = icmp eq i8 %151, 2, !dbg !18
  %153 = and i1 %149, %152, !dbg !18
  %154 = and i1 %146, %153, !dbg !18
  br i1 %154, label %assert_end145, label %assert_fail144, !dbg !18, !prof !19

assert_fail144:                                   ; preds = %assert_end143
  %155 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %155(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end145:                                    ; preds = %assert_end143
  %156 = load i64, i64* %default_function.ph.shape27, align 8, !dbg !18, !tbaa !97
  %157 = trunc i64 %156 to i32, !dbg !18
  %158 = icmp eq i32 %157, 64, !dbg !18
  br i1 %158, label %assert_end147, label %assert_fail146, !dbg !18, !prof !19

assert_fail146:                                   ; preds = %assert_end145
  %159 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %159(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end147:                                    ; preds = %assert_end145
  %160 = getelementptr inbounds i64, i64* %default_function.ph.shape27, i64 1, !dbg !18
  %161 = load i64, i64* %160, align 8, !dbg !18, !tbaa !107
  %162 = trunc i64 %161 to i32, !dbg !18
  %163 = icmp eq i32 %162, 3, !dbg !18
  br i1 %163, label %assert_end149, label %assert_fail148, !dbg !18, !prof !19

assert_fail148:                                   ; preds = %assert_end147
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %164(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end149:                                    ; preds = %assert_end147
  %165 = getelementptr inbounds i64, i64* %default_function.ph.shape27, i64 2, !dbg !18
  %166 = load i64, i64* %165, align 8, !dbg !18, !tbaa !109
  %167 = trunc i64 %166 to i32, !dbg !18
  %168 = icmp eq i32 %167, 3, !dbg !18
  br i1 %168, label %assert_end151, label %assert_fail150, !dbg !18, !prof !19

assert_fail150:                                   ; preds = %assert_end149
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %169(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end151:                                    ; preds = %assert_end149
  %170 = getelementptr inbounds i64, i64* %default_function.ph.shape27, i64 3, !dbg !18
  %171 = load i64, i64* %170, align 8, !dbg !18, !tbaa !112
  %172 = trunc i64 %171 to i32, !dbg !18
  %173 = icmp eq i32 %172, 3, !dbg !18
  br i1 %173, label %assert_end153, label %assert_fail152, !dbg !18, !prof !19

assert_fail152:                                   ; preds = %assert_end151
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %174(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end153:                                    ; preds = %assert_end151
  %175 = icmp eq i64* %default_function.ph.strides28, null, !dbg !18
  br i1 %175, label %if_end155, label %if_then154, !dbg !18, !prof !81

if_then154:                                       ; preds = %assert_end153
  %176 = bitcast i64* %default_function.ph.strides28 to <4 x i64>*, !dbg !18
  %177 = load <4 x i64>, <4 x i64>* %176, align 8, !dbg !18, !tbaa !114
  %178 = trunc <4 x i64> %177 to <4 x i32>, !dbg !18
  %179 = icmp eq <4 x i32> %178, <i32 27, i32 9, i32 3, i32 1>, !dbg !18
  %rdx.shuf420 = shufflevector <4 x i1> %179, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>, !dbg !18
  %bin.rdx421 = and <4 x i1> %179, %rdx.shuf420, !dbg !18
  %rdx.shuf422 = shufflevector <4 x i1> %bin.rdx421, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>, !dbg !18
  %bin.rdx423 = and <4 x i1> %bin.rdx421, %rdx.shuf422, !dbg !18
  %180 = extractelement <4 x i1> %bin.rdx423, i32 0, !dbg !18
  br i1 %180, label %if_end155, label %assert_fail156, !dbg !18, !prof !19

if_end155:                                        ; preds = %assert_end153, %if_then154
  %181 = getelementptr inbounds %1, %1* %ph11395, i64 0, i32 6, !dbg !18
  %182 = load i64, i64* %181, align 8, !dbg !18
  %183 = icmp eq i64 %182, 0, !dbg !18
  br i1 %183, label %assert_end159, label %assert_fail158, !dbg !18, !prof !19

assert_fail156:                                   ; preds = %if_then154
  %184 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %184(i8* getelementptr inbounds ([297 x i8], [297 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail158:                                   ; preds = %if_end155
  %185 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %185(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end159:                                    ; preds = %if_end155
  %186 = getelementptr inbounds %1, %1* %ph11395, i64 0, i32 1, i32 0, !dbg !18
  %187 = load i32, i32* %186, align 4, !dbg !18
  %188 = icmp eq i32 %187, 1, !dbg !18
  br i1 %188, label %assert_end161, label %assert_fail160, !dbg !18, !prof !19

assert_fail160:                                   ; preds = %assert_end159
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %189(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end161:                                    ; preds = %assert_end159
  %190 = getelementptr inbounds %1, %1* %ph11395, i64 0, i32 1, i32 1, !dbg !18
  %191 = load i32, i32* %190, align 4, !dbg !18
  %192 = icmp eq i32 %dev_id, %191, !dbg !18
  br i1 %192, label %assert_end163, label %assert_fail162, !dbg !18, !prof !19

assert_fail162:                                   ; preds = %assert_end161
  %193 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %193(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end163:                                    ; preds = %assert_end161
  %194 = getelementptr inbounds %1, %1* %ph12396, i64 0, i32 2, !dbg !18
  %195 = load i32, i32* %194, align 4, !dbg !18
  %196 = icmp eq i32 %195, 4, !dbg !18
  br i1 %196, label %assert_end167, label %assert_fail164, !dbg !18, !prof !19

assert_fail164:                                   ; preds = %assert_end163
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %197(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end167:                                    ; preds = %assert_end163
  %198 = getelementptr inbounds %1, %1* %ph12396, i64 0, i32 3, i32 2, !dbg !18
  %199 = load i16, i16* %198, align 2, !dbg !18
  %200 = icmp eq i16 %199, 1, !dbg !18
  %201 = getelementptr inbounds %1, %1* %ph12396, i64 0, i32 3, i32 1, !dbg !18
  %202 = load i8, i8* %201, align 1, !dbg !18
  %203 = icmp eq i8 %202, 32, !dbg !18
  %204 = getelementptr inbounds %1, %1* %ph12396, i64 0, i32 3, i32 0, !dbg !18
  %205 = load i8, i8* %204, align 1, !dbg !18
  %206 = icmp eq i8 %205, 2, !dbg !18
  %207 = and i1 %203, %206, !dbg !18
  %208 = and i1 %200, %207, !dbg !18
  br i1 %208, label %assert_end169, label %assert_fail168, !dbg !18, !prof !19

assert_fail168:                                   ; preds = %assert_end167
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %209(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end169:                                    ; preds = %assert_end167
  %210 = load i64, i64* %default_function.ph.shape34, align 8, !dbg !18, !tbaa !122
  %211 = trunc i64 %210 to i32, !dbg !18
  %212 = icmp eq i32 %211, 64, !dbg !18
  br i1 %212, label %assert_end171, label %assert_fail170, !dbg !18, !prof !19

assert_fail170:                                   ; preds = %assert_end169
  %213 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %213(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end171:                                    ; preds = %assert_end169
  %214 = getelementptr inbounds i64, i64* %default_function.ph.shape34, i64 1, !dbg !18
  %215 = load i64, i64* %214, align 8, !dbg !18, !tbaa !132
  %216 = trunc i64 %215 to i32, !dbg !18
  %217 = icmp eq i32 %216, 64, !dbg !18
  br i1 %217, label %assert_end173, label %assert_fail172, !dbg !18, !prof !19

assert_fail172:                                   ; preds = %assert_end171
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %218(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end173:                                    ; preds = %assert_end171
  %219 = getelementptr inbounds i64, i64* %default_function.ph.shape34, i64 2, !dbg !18
  %220 = load i64, i64* %219, align 8, !dbg !18, !tbaa !134
  %221 = trunc i64 %220 to i32, !dbg !18
  %222 = icmp eq i32 %221, 3, !dbg !18
  br i1 %222, label %assert_end175, label %assert_fail174, !dbg !18, !prof !19

assert_fail174:                                   ; preds = %assert_end173
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %223(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end175:                                    ; preds = %assert_end173
  %224 = getelementptr inbounds i64, i64* %default_function.ph.shape34, i64 3, !dbg !18
  %225 = load i64, i64* %224, align 8, !dbg !18, !tbaa !137
  %226 = trunc i64 %225 to i32, !dbg !18
  %227 = icmp eq i32 %226, 3, !dbg !18
  br i1 %227, label %assert_end177, label %assert_fail176, !dbg !18, !prof !19

assert_fail176:                                   ; preds = %assert_end175
  %228 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %228(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end177:                                    ; preds = %assert_end175
  %229 = icmp eq i64* %default_function.ph.strides35, null, !dbg !18
  br i1 %229, label %if_end179, label %if_then178, !dbg !18, !prof !81

if_then178:                                       ; preds = %assert_end177
  %230 = bitcast i64* %default_function.ph.strides35 to <4 x i64>*, !dbg !18
  %231 = load <4 x i64>, <4 x i64>* %230, align 8, !dbg !18, !tbaa !139
  %232 = trunc <4 x i64> %231 to <4 x i32>, !dbg !18
  %233 = icmp eq <4 x i32> %232, <i32 576, i32 9, i32 3, i32 1>, !dbg !18
  %rdx.shuf = shufflevector <4 x i1> %233, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>, !dbg !18
  %bin.rdx = and <4 x i1> %233, %rdx.shuf, !dbg !18
  %rdx.shuf418 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>, !dbg !18
  %bin.rdx419 = and <4 x i1> %bin.rdx, %rdx.shuf418, !dbg !18
  %234 = extractelement <4 x i1> %bin.rdx419, i32 0, !dbg !18
  br i1 %234, label %if_end179, label %assert_fail180, !dbg !18, !prof !19

if_end179:                                        ; preds = %assert_end177, %if_then178
  %235 = getelementptr inbounds %1, %1* %ph12396, i64 0, i32 6, !dbg !18
  %236 = load i64, i64* %235, align 8, !dbg !18
  %237 = icmp eq i64 %236, 0, !dbg !18
  br i1 %237, label %assert_end183, label %assert_fail182, !dbg !18, !prof !19

assert_fail180:                                   ; preds = %if_then178
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %238(i8* getelementptr inbounds ([298 x i8], [298 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail182:                                   ; preds = %if_end179
  %239 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %239(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end183:                                    ; preds = %if_end179
  %240 = getelementptr inbounds %1, %1* %ph12396, i64 0, i32 1, i32 0, !dbg !18
  %241 = load i32, i32* %240, align 4, !dbg !18
  %242 = icmp eq i32 %241, 1, !dbg !18
  br i1 %242, label %assert_end185, label %assert_fail184, !dbg !18, !prof !19

assert_fail184:                                   ; preds = %assert_end183
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %243(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end185:                                    ; preds = %assert_end183
  %244 = getelementptr inbounds %1, %1* %ph12396, i64 0, i32 1, i32 1, !dbg !18
  %245 = load i32, i32* %244, align 4, !dbg !18
  %246 = icmp eq i32 %dev_id, %245, !dbg !18
  br i1 %246, label %assert_end187, label %assert_fail186, !dbg !18, !prof !19

assert_fail186:                                   ; preds = %assert_end185
  %247 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %247(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end187:                                    ; preds = %assert_end185
  %248 = getelementptr inbounds %1, %1* %ph13397, i64 0, i32 2, !dbg !18
  %249 = load i32, i32* %248, align 4, !dbg !18
  %250 = icmp eq i32 %249, 4, !dbg !18
  br i1 %250, label %assert_end191, label %assert_fail188, !dbg !18, !prof !19

assert_fail188:                                   ; preds = %assert_end187
  %251 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %251(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end191:                                    ; preds = %assert_end187
  %252 = getelementptr inbounds %1, %1* %ph13397, i64 0, i32 3, i32 2, !dbg !18
  %253 = load i16, i16* %252, align 2, !dbg !18
  %254 = icmp eq i16 %253, 1, !dbg !18
  %255 = getelementptr inbounds %1, %1* %ph13397, i64 0, i32 3, i32 1, !dbg !18
  %256 = load i8, i8* %255, align 1, !dbg !18
  %257 = icmp eq i8 %256, 32, !dbg !18
  %258 = getelementptr inbounds %1, %1* %ph13397, i64 0, i32 3, i32 0, !dbg !18
  %259 = load i8, i8* %258, align 1, !dbg !18
  %260 = icmp eq i8 %259, 2, !dbg !18
  %261 = and i1 %257, %260, !dbg !18
  %262 = and i1 %254, %261, !dbg !18
  br i1 %262, label %assert_end193, label %assert_fail192, !dbg !18, !prof !19

assert_fail192:                                   ; preds = %assert_end191
  %263 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %263(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end193:                                    ; preds = %assert_end191
  %264 = load i64, i64* %default_function.ph.shape41, align 8, !dbg !18, !tbaa !147
  %265 = trunc i64 %264 to i32, !dbg !18
  %266 = icmp eq i32 %265, 1, !dbg !18
  br i1 %266, label %assert_end195, label %assert_fail194, !dbg !18, !prof !19

assert_fail194:                                   ; preds = %assert_end193
  %267 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %267(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end195:                                    ; preds = %assert_end193
  %268 = getelementptr inbounds i64, i64* %default_function.ph.shape41, i64 1, !dbg !18
  %269 = load i64, i64* %268, align 8, !dbg !18, !tbaa !157
  %270 = trunc i64 %269 to i32, !dbg !18
  %271 = icmp eq i32 %270, 64, !dbg !18
  br i1 %271, label %assert_end197, label %assert_fail196, !dbg !18, !prof !19

assert_fail196:                                   ; preds = %assert_end195
  %272 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %272(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end197:                                    ; preds = %assert_end195
  %273 = getelementptr inbounds i64, i64* %default_function.ph.shape41, i64 2, !dbg !18
  %274 = load i64, i64* %273, align 8, !dbg !18, !tbaa !159
  %275 = trunc i64 %274 to i32, !dbg !18
  %276 = icmp eq i32 %275, 126, !dbg !18
  br i1 %276, label %assert_end199, label %assert_fail198, !dbg !18, !prof !19

assert_fail198:                                   ; preds = %assert_end197
  %277 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %277(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end199:                                    ; preds = %assert_end197
  %278 = getelementptr inbounds i64, i64* %default_function.ph.shape41, i64 3, !dbg !18
  %279 = load i64, i64* %278, align 8, !dbg !18, !tbaa !162
  %280 = trunc i64 %279 to i32, !dbg !18
  %281 = icmp eq i32 %280, 126, !dbg !18
  br i1 %281, label %assert_end201, label %assert_fail200, !dbg !18, !prof !19

assert_fail200:                                   ; preds = %assert_end199
  %282 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %282(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end201:                                    ; preds = %assert_end199
  %283 = icmp eq i64* %default_function.ph.strides42, null, !dbg !18
  br i1 %283, label %if_end203, label %if_then202, !dbg !18, !prof !81

if_then202:                                       ; preds = %assert_end201
  %284 = getelementptr inbounds i64, i64* %default_function.ph.strides42, i64 1, !dbg !18
  %285 = load i64, i64* %284, align 8, !dbg !18, !tbaa !164
  %286 = trunc i64 %285 to i32, !dbg !18
  %287 = icmp eq i32 %286, 15876, !dbg !18
  %288 = getelementptr inbounds i64, i64* %default_function.ph.strides42, i64 2, !dbg !18
  %289 = load i64, i64* %288, align 8, !dbg !18, !tbaa !174
  %290 = trunc i64 %289 to i32, !dbg !18
  %291 = icmp eq i32 %290, 126, !dbg !18
  %292 = getelementptr inbounds i64, i64* %default_function.ph.strides42, i64 3, !dbg !18
  %293 = load i64, i64* %292, align 8, !dbg !18, !tbaa !177
  %294 = trunc i64 %293 to i32, !dbg !18
  %295 = icmp eq i32 %294, 1, !dbg !18
  %296 = and i1 %291, %295, !dbg !18
  %297 = and i1 %287, %296, !dbg !18
  br i1 %297, label %if_end203, label %assert_fail204, !dbg !18, !prof !19

if_end203:                                        ; preds = %assert_end201, %if_then202
  %298 = getelementptr inbounds %1, %1* %ph13397, i64 0, i32 6, !dbg !18
  %299 = load i64, i64* %298, align 8, !dbg !18
  %300 = icmp eq i64 %299, 0, !dbg !18
  br i1 %300, label %assert_end207, label %assert_fail206, !dbg !18, !prof !19

assert_fail204:                                   ; preds = %if_then202
  %301 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %301(i8* getelementptr inbounds ([245 x i8], [245 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail206:                                   ; preds = %if_end203
  %302 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %302(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end207:                                    ; preds = %if_end203
  %303 = getelementptr inbounds %1, %1* %ph13397, i64 0, i32 1, i32 0, !dbg !18
  %304 = load i32, i32* %303, align 4, !dbg !18
  %305 = icmp eq i32 %304, 1, !dbg !18
  br i1 %305, label %assert_end209, label %assert_fail208, !dbg !18, !prof !19

assert_fail208:                                   ; preds = %assert_end207
  %306 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %306(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end209:                                    ; preds = %assert_end207
  %307 = getelementptr inbounds %1, %1* %ph13397, i64 0, i32 1, i32 1, !dbg !18
  %308 = load i32, i32* %307, align 4, !dbg !18
  %309 = icmp eq i32 %dev_id, %308, !dbg !18
  br i1 %309, label %assert_end211, label %assert_fail210, !dbg !18, !prof !19

assert_fail210:                                   ; preds = %assert_end209
  %310 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %310(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end211:                                    ; preds = %assert_end209
  %311 = getelementptr inbounds %1, %1* %ph14398, i64 0, i32 2, !dbg !18
  %312 = load i32, i32* %311, align 4, !dbg !18
  %313 = icmp eq i32 %312, 4, !dbg !18
  br i1 %313, label %assert_end215, label %assert_fail212, !dbg !18, !prof !19

assert_fail212:                                   ; preds = %assert_end211
  %314 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %314(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end215:                                    ; preds = %assert_end211
  %315 = getelementptr inbounds %1, %1* %ph14398, i64 0, i32 3, i32 2, !dbg !18
  %316 = load i16, i16* %315, align 2, !dbg !18
  %317 = icmp eq i16 %316, 1, !dbg !18
  %318 = getelementptr inbounds %1, %1* %ph14398, i64 0, i32 3, i32 1, !dbg !18
  %319 = load i8, i8* %318, align 1, !dbg !18
  %320 = icmp eq i8 %319, 32, !dbg !18
  %321 = getelementptr inbounds %1, %1* %ph14398, i64 0, i32 3, i32 0, !dbg !18
  %322 = load i8, i8* %321, align 1, !dbg !18
  %323 = icmp eq i8 %322, 2, !dbg !18
  %324 = and i1 %320, %323, !dbg !18
  %325 = and i1 %317, %324, !dbg !18
  br i1 %325, label %assert_end217, label %assert_fail216, !dbg !18, !prof !19

assert_fail216:                                   ; preds = %assert_end215
  %326 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %326(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end217:                                    ; preds = %assert_end215
  %327 = load i64, i64* %default_function.ph.shape48, align 8, !dbg !18, !tbaa !179
  %328 = trunc i64 %327 to i32, !dbg !18
  %329 = icmp eq i32 %328, 1, !dbg !18
  br i1 %329, label %assert_end219, label %assert_fail218, !dbg !18, !prof !19

assert_fail218:                                   ; preds = %assert_end217
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %330(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end219:                                    ; preds = %assert_end217
  %331 = getelementptr inbounds i64, i64* %default_function.ph.shape48, i64 1, !dbg !18
  %332 = load i64, i64* %331, align 8, !dbg !18, !tbaa !189
  %333 = trunc i64 %332 to i32, !dbg !18
  %334 = icmp eq i32 %333, 64, !dbg !18
  br i1 %334, label %assert_end221, label %assert_fail220, !dbg !18, !prof !19

assert_fail220:                                   ; preds = %assert_end219
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %335(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end221:                                    ; preds = %assert_end219
  %336 = getelementptr inbounds i64, i64* %default_function.ph.shape48, i64 2, !dbg !18
  %337 = load i64, i64* %336, align 8, !dbg !18, !tbaa !191
  %338 = trunc i64 %337 to i32, !dbg !18
  %339 = icmp eq i32 %338, 126, !dbg !18
  br i1 %339, label %assert_end223, label %assert_fail222, !dbg !18, !prof !19

assert_fail222:                                   ; preds = %assert_end221
  %340 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %340(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end223:                                    ; preds = %assert_end221
  %341 = getelementptr inbounds i64, i64* %default_function.ph.shape48, i64 3, !dbg !18
  %342 = load i64, i64* %341, align 8, !dbg !18, !tbaa !194
  %343 = trunc i64 %342 to i32, !dbg !18
  %344 = icmp eq i32 %343, 126, !dbg !18
  br i1 %344, label %assert_end225, label %assert_fail224, !dbg !18, !prof !19

assert_fail224:                                   ; preds = %assert_end223
  %345 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %345(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end225:                                    ; preds = %assert_end223
  %346 = icmp eq i64* %default_function.ph.strides49, null, !dbg !18
  br i1 %346, label %if_end227, label %if_then226, !dbg !18, !prof !81

if_then226:                                       ; preds = %assert_end225
  %347 = getelementptr inbounds i64, i64* %default_function.ph.strides49, i64 1, !dbg !18
  %348 = load i64, i64* %347, align 8, !dbg !18, !tbaa !196
  %349 = trunc i64 %348 to i32, !dbg !18
  %350 = icmp eq i32 %349, 15876, !dbg !18
  %351 = getelementptr inbounds i64, i64* %default_function.ph.strides49, i64 2, !dbg !18
  %352 = load i64, i64* %351, align 8, !dbg !18, !tbaa !206
  %353 = trunc i64 %352 to i32, !dbg !18
  %354 = icmp eq i32 %353, 126, !dbg !18
  %355 = getelementptr inbounds i64, i64* %default_function.ph.strides49, i64 3, !dbg !18
  %356 = load i64, i64* %355, align 8, !dbg !18, !tbaa !209
  %357 = trunc i64 %356 to i32, !dbg !18
  %358 = icmp eq i32 %357, 1, !dbg !18
  %359 = and i1 %354, %358, !dbg !18
  %360 = and i1 %350, %359, !dbg !18
  br i1 %360, label %if_end227, label %assert_fail228, !dbg !18, !prof !19

if_end227:                                        ; preds = %assert_end225, %if_then226
  %361 = getelementptr inbounds %1, %1* %ph14398, i64 0, i32 6, !dbg !18
  %362 = load i64, i64* %361, align 8, !dbg !18
  %363 = icmp eq i64 %362, 0, !dbg !18
  br i1 %363, label %assert_end231, label %assert_fail230, !dbg !18, !prof !19

assert_fail228:                                   ; preds = %if_then226
  %364 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %364(i8* getelementptr inbounds ([245 x i8], [245 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail230:                                   ; preds = %if_end227
  %365 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %365(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end231:                                    ; preds = %if_end227
  %366 = getelementptr inbounds %1, %1* %ph14398, i64 0, i32 1, i32 0, !dbg !18
  %367 = load i32, i32* %366, align 4, !dbg !18
  %368 = icmp eq i32 %367, 1, !dbg !18
  br i1 %368, label %assert_end233, label %assert_fail232, !dbg !18, !prof !19

assert_fail232:                                   ; preds = %assert_end231
  %369 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %369(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end233:                                    ; preds = %assert_end231
  %370 = getelementptr inbounds %1, %1* %ph14398, i64 0, i32 1, i32 1, !dbg !18
  %371 = load i32, i32* %370, align 4, !dbg !18
  %372 = icmp eq i32 %dev_id, %371, !dbg !18
  br i1 %372, label %assert_end235, label %assert_fail234, !dbg !18, !prof !19

assert_fail234:                                   ; preds = %assert_end233
  %373 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %373(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end235:                                    ; preds = %assert_end233
  %374 = getelementptr inbounds %1, %1* %ph15399, i64 0, i32 2, !dbg !18
  %375 = load i32, i32* %374, align 4, !dbg !18
  %376 = icmp eq i32 %375, 1, !dbg !18
  br i1 %376, label %assert_end239, label %assert_fail236, !dbg !18, !prof !19

assert_fail236:                                   ; preds = %assert_end235
  %377 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %377(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end239:                                    ; preds = %assert_end235
  %378 = getelementptr inbounds %1, %1* %ph15399, i64 0, i32 3, i32 2, !dbg !18
  %379 = load i16, i16* %378, align 2, !dbg !18
  %380 = icmp eq i16 %379, 1, !dbg !18
  %381 = getelementptr inbounds %1, %1* %ph15399, i64 0, i32 3, i32 1, !dbg !18
  %382 = load i8, i8* %381, align 1, !dbg !18
  %383 = icmp eq i8 %382, 32, !dbg !18
  %384 = getelementptr inbounds %1, %1* %ph15399, i64 0, i32 3, i32 0, !dbg !18
  %385 = load i8, i8* %384, align 1, !dbg !18
  %386 = icmp eq i8 %385, 2, !dbg !18
  %387 = and i1 %383, %386, !dbg !18
  %388 = and i1 %380, %387, !dbg !18
  br i1 %388, label %assert_end241, label %assert_fail240, !dbg !18, !prof !19

assert_fail240:                                   ; preds = %assert_end239
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %389(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end241:                                    ; preds = %assert_end239
  %390 = load i64, i64* %default_function.ph.shape55, align 8, !dbg !18, !tbaa !211
  %391 = trunc i64 %390 to i32, !dbg !18
  %392 = icmp eq i32 %391, 1, !dbg !18
  br i1 %392, label %if_end245, label %assert_fail242, !dbg !18, !prof !19

assert_fail242:                                   ; preds = %assert_end241
  %393 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %393(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

if_end245:                                        ; preds = %assert_end241
  %394 = getelementptr inbounds %1, %1* %ph15399, i64 0, i32 6, !dbg !18
  %395 = load i64, i64* %394, align 8, !dbg !18
  %396 = icmp eq i64 %395, 0, !dbg !18
  br i1 %396, label %assert_end249, label %assert_fail248, !dbg !18, !prof !19

assert_fail248:                                   ; preds = %if_end245
  %397 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %397(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end249:                                    ; preds = %if_end245
  %398 = getelementptr inbounds %1, %1* %ph15399, i64 0, i32 1, i32 0, !dbg !18
  %399 = load i32, i32* %398, align 4, !dbg !18
  %400 = icmp eq i32 %399, 1, !dbg !18
  br i1 %400, label %assert_end251, label %assert_fail250, !dbg !18, !prof !19

assert_fail250:                                   ; preds = %assert_end249
  %401 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %401(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end251:                                    ; preds = %assert_end249
  %402 = getelementptr inbounds %1, %1* %ph15399, i64 0, i32 1, i32 1, !dbg !18
  %403 = load i32, i32* %402, align 4, !dbg !18
  %404 = icmp eq i32 %dev_id, %403, !dbg !18
  br i1 %404, label %assert_end253, label %assert_fail252, !dbg !18, !prof !19

assert_fail252:                                   ; preds = %assert_end251
  %405 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %405(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end253:                                    ; preds = %assert_end251
  %406 = getelementptr inbounds %1, %1* %ph16400, i64 0, i32 2, !dbg !18
  %407 = load i32, i32* %406, align 4, !dbg !18
  %408 = icmp eq i32 %407, 1, !dbg !18
  br i1 %408, label %assert_end257, label %assert_fail254, !dbg !18, !prof !19

assert_fail254:                                   ; preds = %assert_end253
  %409 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %409(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end257:                                    ; preds = %assert_end253
  %410 = getelementptr inbounds %1, %1* %ph16400, i64 0, i32 3, i32 2, !dbg !18
  %411 = load i16, i16* %410, align 2, !dbg !18
  %412 = icmp eq i16 %411, 1, !dbg !18
  %413 = getelementptr inbounds %1, %1* %ph16400, i64 0, i32 3, i32 1, !dbg !18
  %414 = load i8, i8* %413, align 1, !dbg !18
  %415 = icmp eq i8 %414, 32, !dbg !18
  %416 = getelementptr inbounds %1, %1* %ph16400, i64 0, i32 3, i32 0, !dbg !18
  %417 = load i8, i8* %416, align 1, !dbg !18
  %418 = icmp eq i8 %417, 2, !dbg !18
  %419 = and i1 %415, %418, !dbg !18
  %420 = and i1 %412, %419, !dbg !18
  br i1 %420, label %assert_end259, label %assert_fail258, !dbg !18, !prof !19

assert_fail258:                                   ; preds = %assert_end257
  %421 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %421(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end259:                                    ; preds = %assert_end257
  %422 = load i64, i64* %default_function.ph.shape62, align 8, !dbg !18, !tbaa !221
  %423 = trunc i64 %422 to i32, !dbg !18
  %424 = icmp eq i32 %423, 1, !dbg !18
  br i1 %424, label %if_end263, label %assert_fail260, !dbg !18, !prof !19

assert_fail260:                                   ; preds = %assert_end259
  %425 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %425(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

if_end263:                                        ; preds = %assert_end259
  %426 = getelementptr inbounds %1, %1* %ph16400, i64 0, i32 6, !dbg !18
  %427 = load i64, i64* %426, align 8, !dbg !18
  %428 = icmp eq i64 %427, 0, !dbg !18
  br i1 %428, label %assert_end267, label %assert_fail266, !dbg !18, !prof !19

assert_fail266:                                   ; preds = %if_end263
  %429 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %429(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end267:                                    ; preds = %if_end263
  %430 = getelementptr inbounds %1, %1* %ph16400, i64 0, i32 1, i32 0, !dbg !18
  %431 = load i32, i32* %430, align 4, !dbg !18
  %432 = icmp eq i32 %431, 1, !dbg !18
  br i1 %432, label %assert_end269, label %assert_fail268, !dbg !18, !prof !19

assert_fail268:                                   ; preds = %assert_end267
  %433 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %433(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end269:                                    ; preds = %assert_end267
  %434 = getelementptr inbounds %1, %1* %ph16400, i64 0, i32 1, i32 1, !dbg !18
  %435 = load i32, i32* %434, align 4, !dbg !18
  %436 = icmp eq i32 %dev_id, %435, !dbg !18
  br i1 %436, label %assert_end271, label %assert_fail270, !dbg !18, !prof !19

assert_fail270:                                   ; preds = %assert_end269
  %437 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %437(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end271:                                    ; preds = %assert_end269
  %438 = getelementptr inbounds %1, %1* %ph17401, i64 0, i32 2, !dbg !18
  %439 = load i32, i32* %438, align 4, !dbg !18
  %440 = icmp eq i32 %439, 4, !dbg !18
  br i1 %440, label %assert_end275, label %assert_fail272, !dbg !18, !prof !19

assert_fail272:                                   ; preds = %assert_end271
  %441 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %441(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end275:                                    ; preds = %assert_end271
  %442 = getelementptr inbounds %1, %1* %ph17401, i64 0, i32 3, i32 2, !dbg !18
  %443 = load i16, i16* %442, align 2, !dbg !18
  %444 = icmp eq i16 %443, 1, !dbg !18
  %445 = getelementptr inbounds %1, %1* %ph17401, i64 0, i32 3, i32 1, !dbg !18
  %446 = load i8, i8* %445, align 1, !dbg !18
  %447 = icmp eq i8 %446, 32, !dbg !18
  %448 = getelementptr inbounds %1, %1* %ph17401, i64 0, i32 3, i32 0, !dbg !18
  %449 = load i8, i8* %448, align 1, !dbg !18
  %450 = icmp eq i8 %449, 2, !dbg !18
  %451 = and i1 %447, %450, !dbg !18
  %452 = and i1 %444, %451, !dbg !18
  br i1 %452, label %assert_end277, label %assert_fail276, !dbg !18, !prof !19

assert_fail276:                                   ; preds = %assert_end275
  %453 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %453(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end277:                                    ; preds = %assert_end275
  %454 = load i64, i64* %default_function.ph.shape69, align 8, !dbg !18, !tbaa !231
  %455 = trunc i64 %454 to i32, !dbg !18
  %456 = icmp eq i32 %455, 1, !dbg !18
  br i1 %456, label %assert_end279, label %assert_fail278, !dbg !18, !prof !19

assert_fail278:                                   ; preds = %assert_end277
  %457 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %457(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end279:                                    ; preds = %assert_end277
  %458 = getelementptr inbounds i64, i64* %default_function.ph.shape69, i64 1, !dbg !18
  %459 = load i64, i64* %458, align 8, !dbg !18, !tbaa !241
  %460 = trunc i64 %459 to i32, !dbg !18
  %461 = icmp eq i32 %460, 64, !dbg !18
  br i1 %461, label %assert_end281, label %assert_fail280, !dbg !18, !prof !19

assert_fail280:                                   ; preds = %assert_end279
  %462 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %462(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end281:                                    ; preds = %assert_end279
  %463 = getelementptr inbounds i64, i64* %default_function.ph.shape69, i64 2, !dbg !18
  %464 = load i64, i64* %463, align 8, !dbg !18, !tbaa !243
  %465 = trunc i64 %464 to i32, !dbg !18
  %466 = icmp eq i32 %465, 124, !dbg !18
  br i1 %466, label %assert_end283, label %assert_fail282, !dbg !18, !prof !19

assert_fail282:                                   ; preds = %assert_end281
  %467 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %467(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end283:                                    ; preds = %assert_end281
  %468 = getelementptr inbounds i64, i64* %default_function.ph.shape69, i64 3, !dbg !18
  %469 = load i64, i64* %468, align 8, !dbg !18, !tbaa !246
  %470 = trunc i64 %469 to i32, !dbg !18
  %471 = icmp eq i32 %470, 124, !dbg !18
  br i1 %471, label %assert_end285, label %assert_fail284, !dbg !18, !prof !19

assert_fail284:                                   ; preds = %assert_end283
  %472 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %472(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end285:                                    ; preds = %assert_end283
  %473 = icmp eq i64* %default_function.ph.strides70, null, !dbg !18
  br i1 %473, label %if_end287, label %if_then286, !dbg !18, !prof !81

if_then286:                                       ; preds = %assert_end285
  %474 = getelementptr inbounds i64, i64* %default_function.ph.strides70, i64 1, !dbg !18
  %475 = load i64, i64* %474, align 8, !dbg !18, !tbaa !248
  %476 = trunc i64 %475 to i32, !dbg !18
  %477 = icmp eq i32 %476, 15376, !dbg !18
  %478 = getelementptr inbounds i64, i64* %default_function.ph.strides70, i64 2, !dbg !18
  %479 = load i64, i64* %478, align 8, !dbg !18, !tbaa !258
  %480 = trunc i64 %479 to i32, !dbg !18
  %481 = icmp eq i32 %480, 124, !dbg !18
  %482 = getelementptr inbounds i64, i64* %default_function.ph.strides70, i64 3, !dbg !18
  %483 = load i64, i64* %482, align 8, !dbg !18, !tbaa !261
  %484 = trunc i64 %483 to i32, !dbg !18
  %485 = icmp eq i32 %484, 1, !dbg !18
  %486 = and i1 %481, %485, !dbg !18
  %487 = and i1 %477, %486, !dbg !18
  br i1 %487, label %if_end287, label %assert_fail288, !dbg !18, !prof !19

if_end287:                                        ; preds = %assert_end285, %if_then286
  %488 = getelementptr inbounds %1, %1* %ph17401, i64 0, i32 6, !dbg !18
  %489 = load i64, i64* %488, align 8, !dbg !18
  %490 = icmp eq i64 %489, 0, !dbg !18
  br i1 %490, label %assert_end291, label %assert_fail290, !dbg !18, !prof !19

assert_fail288:                                   ; preds = %if_then286
  %491 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %491(i8* getelementptr inbounds ([245 x i8], [245 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail290:                                   ; preds = %if_end287
  %492 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %492(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end291:                                    ; preds = %if_end287
  %493 = getelementptr inbounds %1, %1* %ph17401, i64 0, i32 1, i32 0, !dbg !18
  %494 = load i32, i32* %493, align 4, !dbg !18
  %495 = icmp eq i32 %494, 1, !dbg !18
  br i1 %495, label %assert_end293, label %assert_fail292, !dbg !18, !prof !19

assert_fail292:                                   ; preds = %assert_end291
  %496 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %496(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end293:                                    ; preds = %assert_end291
  %497 = getelementptr inbounds %1, %1* %ph17401, i64 0, i32 1, i32 1, !dbg !18
  %498 = load i32, i32* %497, align 4, !dbg !18
  %499 = icmp eq i32 %dev_id, %498, !dbg !18
  br i1 %499, label %assert_end295, label %assert_fail294, !dbg !18, !prof !19

assert_fail294:                                   ; preds = %assert_end293
  %500 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %500(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end295:                                    ; preds = %assert_end293
  %501 = getelementptr inbounds %1, %1* %ph18402, i64 0, i32 2, !dbg !18
  %502 = load i32, i32* %501, align 4, !dbg !18
  %503 = icmp eq i32 %502, 4, !dbg !18
  br i1 %503, label %assert_end299, label %assert_fail296, !dbg !18, !prof !19

assert_fail296:                                   ; preds = %assert_end295
  %504 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %504(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end299:                                    ; preds = %assert_end295
  %505 = getelementptr inbounds %1, %1* %ph18402, i64 0, i32 3, i32 2, !dbg !18
  %506 = load i16, i16* %505, align 2, !dbg !18
  %507 = icmp eq i16 %506, 1, !dbg !18
  %508 = getelementptr inbounds %1, %1* %ph18402, i64 0, i32 3, i32 1, !dbg !18
  %509 = load i8, i8* %508, align 1, !dbg !18
  %510 = icmp eq i8 %509, 32, !dbg !18
  %511 = getelementptr inbounds %1, %1* %ph18402, i64 0, i32 3, i32 0, !dbg !18
  %512 = load i8, i8* %511, align 1, !dbg !18
  %513 = icmp eq i8 %512, 2, !dbg !18
  %514 = and i1 %510, %513, !dbg !18
  %515 = and i1 %507, %514, !dbg !18
  br i1 %515, label %assert_end301, label %assert_fail300, !dbg !18, !prof !19

assert_fail300:                                   ; preds = %assert_end299
  %516 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %516(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end301:                                    ; preds = %assert_end299
  %517 = load i64, i64* %default_function.ph.shape76, align 8, !dbg !18, !tbaa !263
  %518 = trunc i64 %517 to i32, !dbg !18
  %519 = icmp eq i32 %518, 1, !dbg !18
  br i1 %519, label %assert_end303, label %assert_fail302, !dbg !18, !prof !19

assert_fail302:                                   ; preds = %assert_end301
  %520 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %520(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end303:                                    ; preds = %assert_end301
  %521 = getelementptr inbounds i64, i64* %default_function.ph.shape76, i64 1, !dbg !18
  %522 = load i64, i64* %521, align 8, !dbg !18, !tbaa !273
  %523 = trunc i64 %522 to i32, !dbg !18
  %524 = icmp eq i32 %523, 64, !dbg !18
  br i1 %524, label %assert_end305, label %assert_fail304, !dbg !18, !prof !19

assert_fail304:                                   ; preds = %assert_end303
  %525 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %525(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end305:                                    ; preds = %assert_end303
  %526 = getelementptr inbounds i64, i64* %default_function.ph.shape76, i64 2, !dbg !18
  %527 = load i64, i64* %526, align 8, !dbg !18, !tbaa !275
  %528 = trunc i64 %527 to i32, !dbg !18
  %529 = icmp eq i32 %528, 124, !dbg !18
  br i1 %529, label %assert_end307, label %assert_fail306, !dbg !18, !prof !19

assert_fail306:                                   ; preds = %assert_end305
  %530 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %530(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end307:                                    ; preds = %assert_end305
  %531 = getelementptr inbounds i64, i64* %default_function.ph.shape76, i64 3, !dbg !18
  %532 = load i64, i64* %531, align 8, !dbg !18, !tbaa !278
  %533 = trunc i64 %532 to i32, !dbg !18
  %534 = icmp eq i32 %533, 124, !dbg !18
  br i1 %534, label %assert_end309, label %assert_fail308, !dbg !18, !prof !19

assert_fail308:                                   ; preds = %assert_end307
  %535 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %535(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end309:                                    ; preds = %assert_end307
  %536 = icmp eq i64* %default_function.ph.strides77, null, !dbg !18
  br i1 %536, label %if_end311, label %if_then310, !dbg !18, !prof !81

if_then310:                                       ; preds = %assert_end309
  %537 = getelementptr inbounds i64, i64* %default_function.ph.strides77, i64 1, !dbg !18
  %538 = load i64, i64* %537, align 8, !dbg !18, !tbaa !280
  %539 = trunc i64 %538 to i32, !dbg !18
  %540 = icmp eq i32 %539, 15376, !dbg !18
  %541 = getelementptr inbounds i64, i64* %default_function.ph.strides77, i64 2, !dbg !18
  %542 = load i64, i64* %541, align 8, !dbg !18, !tbaa !290
  %543 = trunc i64 %542 to i32, !dbg !18
  %544 = icmp eq i32 %543, 124, !dbg !18
  %545 = getelementptr inbounds i64, i64* %default_function.ph.strides77, i64 3, !dbg !18
  %546 = load i64, i64* %545, align 8, !dbg !18, !tbaa !293
  %547 = trunc i64 %546 to i32, !dbg !18
  %548 = icmp eq i32 %547, 1, !dbg !18
  %549 = and i1 %544, %548, !dbg !18
  %550 = and i1 %540, %549, !dbg !18
  br i1 %550, label %if_end311, label %assert_fail312, !dbg !18, !prof !19

if_end311:                                        ; preds = %assert_end309, %if_then310
  %551 = getelementptr inbounds %1, %1* %ph18402, i64 0, i32 6, !dbg !18
  %552 = load i64, i64* %551, align 8, !dbg !18
  %553 = icmp eq i64 %552, 0, !dbg !18
  br i1 %553, label %assert_end315, label %assert_fail314, !dbg !18, !prof !19

assert_fail312:                                   ; preds = %if_then310
  %554 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %554(i8* getelementptr inbounds ([245 x i8], [245 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail314:                                   ; preds = %if_end311
  %555 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %555(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end315:                                    ; preds = %if_end311
  %556 = getelementptr inbounds %1, %1* %ph18402, i64 0, i32 1, i32 0, !dbg !18
  %557 = load i32, i32* %556, align 4, !dbg !18
  %558 = icmp eq i32 %557, 1, !dbg !18
  br i1 %558, label %assert_end317, label %assert_fail316, !dbg !18, !prof !19

assert_fail316:                                   ; preds = %assert_end315
  %559 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %559(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end317:                                    ; preds = %assert_end315
  %560 = getelementptr inbounds %1, %1* %ph18402, i64 0, i32 1, i32 1, !dbg !18
  %561 = load i32, i32* %560, align 4, !dbg !18
  %562 = icmp eq i32 %dev_id, %561, !dbg !18
  br i1 %562, label %assert_end319, label %assert_fail318, !dbg !18, !prof !19

assert_fail318:                                   ; preds = %assert_end317
  %563 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %563(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end319:                                    ; preds = %assert_end317
  %564 = getelementptr inbounds %1, %1* %ph19403, i64 0, i32 2, !dbg !18
  %565 = load i32, i32* %564, align 4, !dbg !18
  %566 = icmp eq i32 %565, 1, !dbg !18
  br i1 %566, label %assert_end323, label %assert_fail320, !dbg !18, !prof !19

assert_fail320:                                   ; preds = %assert_end319
  %567 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %567(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end323:                                    ; preds = %assert_end319
  %568 = getelementptr inbounds %1, %1* %ph19403, i64 0, i32 3, i32 2, !dbg !18
  %569 = load i16, i16* %568, align 2, !dbg !18
  %570 = icmp eq i16 %569, 1, !dbg !18
  %571 = getelementptr inbounds %1, %1* %ph19403, i64 0, i32 3, i32 1, !dbg !18
  %572 = load i8, i8* %571, align 1, !dbg !18
  %573 = icmp eq i8 %572, 32, !dbg !18
  %574 = getelementptr inbounds %1, %1* %ph19403, i64 0, i32 3, i32 0, !dbg !18
  %575 = load i8, i8* %574, align 1, !dbg !18
  %576 = icmp eq i8 %575, 2, !dbg !18
  %577 = and i1 %573, %576, !dbg !18
  %578 = and i1 %570, %577, !dbg !18
  br i1 %578, label %assert_end325, label %assert_fail324, !dbg !18, !prof !19

assert_fail324:                                   ; preds = %assert_end323
  %579 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %579(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end325:                                    ; preds = %assert_end323
  %580 = load i64, i64* %default_function.ph.shape83, align 8, !dbg !18, !tbaa !295
  %581 = trunc i64 %580 to i32, !dbg !18
  %582 = icmp eq i32 %581, 1, !dbg !18
  br i1 %582, label %if_end329, label %assert_fail326, !dbg !18, !prof !19

assert_fail326:                                   ; preds = %assert_end325
  %583 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %583(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

if_end329:                                        ; preds = %assert_end325
  %584 = getelementptr inbounds %1, %1* %ph19403, i64 0, i32 6, !dbg !18
  %585 = load i64, i64* %584, align 8, !dbg !18
  %586 = icmp eq i64 %585, 0, !dbg !18
  br i1 %586, label %assert_end333, label %assert_fail332, !dbg !18, !prof !19

assert_fail332:                                   ; preds = %if_end329
  %587 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %587(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end333:                                    ; preds = %if_end329
  %588 = getelementptr inbounds %1, %1* %ph19403, i64 0, i32 1, i32 0, !dbg !18
  %589 = load i32, i32* %588, align 4, !dbg !18
  %590 = icmp eq i32 %589, 1, !dbg !18
  br i1 %590, label %assert_end335, label %assert_fail334, !dbg !18, !prof !19

assert_fail334:                                   ; preds = %assert_end333
  %591 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %591(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end335:                                    ; preds = %assert_end333
  %592 = getelementptr inbounds %1, %1* %ph19403, i64 0, i32 1, i32 1, !dbg !18
  %593 = load i32, i32* %592, align 4, !dbg !18
  %594 = icmp eq i32 %dev_id, %593, !dbg !18
  br i1 %594, label %assert_end337, label %assert_fail336, !dbg !18, !prof !19

assert_fail336:                                   ; preds = %assert_end335
  %595 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %595(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end337:                                    ; preds = %assert_end335
  %596 = getelementptr inbounds %1, %1* %ph20404, i64 0, i32 2, !dbg !18
  %597 = load i32, i32* %596, align 4, !dbg !18
  %598 = icmp eq i32 %597, 1, !dbg !18
  br i1 %598, label %assert_end341, label %assert_fail338, !dbg !18, !prof !19

assert_fail338:                                   ; preds = %assert_end337
  %599 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %599(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end341:                                    ; preds = %assert_end337
  %600 = getelementptr inbounds %1, %1* %ph20404, i64 0, i32 3, i32 2, !dbg !18
  %601 = load i16, i16* %600, align 2, !dbg !18
  %602 = icmp eq i16 %601, 1, !dbg !18
  %603 = getelementptr inbounds %1, %1* %ph20404, i64 0, i32 3, i32 1, !dbg !18
  %604 = load i8, i8* %603, align 1, !dbg !18
  %605 = icmp eq i8 %604, 32, !dbg !18
  %606 = getelementptr inbounds %1, %1* %ph20404, i64 0, i32 3, i32 0, !dbg !18
  %607 = load i8, i8* %606, align 1, !dbg !18
  %608 = icmp eq i8 %607, 2, !dbg !18
  %609 = and i1 %605, %608, !dbg !18
  %610 = and i1 %602, %609, !dbg !18
  br i1 %610, label %assert_end343, label %assert_fail342, !dbg !18, !prof !19

assert_fail342:                                   ; preds = %assert_end341
  %611 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %611(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end343:                                    ; preds = %assert_end341
  %612 = load i64, i64* %default_function.ph.shape90, align 8, !dbg !18, !tbaa !305
  %613 = trunc i64 %612 to i32, !dbg !18
  %614 = icmp eq i32 %613, 1, !dbg !18
  br i1 %614, label %if_end347, label %assert_fail344, !dbg !18, !prof !19

assert_fail344:                                   ; preds = %assert_end343
  %615 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %615(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

if_end347:                                        ; preds = %assert_end343
  %616 = getelementptr inbounds %1, %1* %ph20404, i64 0, i32 6, !dbg !18
  %617 = load i64, i64* %616, align 8, !dbg !18
  %618 = icmp eq i64 %617, 0, !dbg !18
  br i1 %618, label %assert_end351, label %assert_fail350, !dbg !18, !prof !19

assert_fail350:                                   ; preds = %if_end347
  %619 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %619(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end351:                                    ; preds = %if_end347
  %620 = getelementptr inbounds %1, %1* %ph20404, i64 0, i32 1, i32 0, !dbg !18
  %621 = load i32, i32* %620, align 4, !dbg !18
  %622 = icmp eq i32 %621, 1, !dbg !18
  br i1 %622, label %assert_end353, label %assert_fail352, !dbg !18, !prof !19

assert_fail352:                                   ; preds = %assert_end351
  %623 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %623(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end353:                                    ; preds = %assert_end351
  %624 = getelementptr inbounds %1, %1* %ph20404, i64 0, i32 1, i32 1, !dbg !18
  %625 = load i32, i32* %624, align 4, !dbg !18
  %626 = icmp eq i32 %dev_id, %625, !dbg !18
  br i1 %626, label %assert_end355, label %assert_fail354, !dbg !18, !prof !19

assert_fail354:                                   ; preds = %assert_end353
  %627 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %627(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end355:                                    ; preds = %assert_end353
  %628 = getelementptr inbounds %1, %1* %compute405, i64 0, i32 2, !dbg !18
  %629 = load i32, i32* %628, align 4, !dbg !18
  %630 = icmp eq i32 %629, 4, !dbg !18
  br i1 %630, label %assert_end359, label %assert_fail356, !dbg !18, !prof !19

assert_fail356:                                   ; preds = %assert_end355
  %631 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %631(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end359:                                    ; preds = %assert_end355
  %632 = getelementptr inbounds %1, %1* %compute405, i64 0, i32 3, i32 2, !dbg !18
  %633 = load i16, i16* %632, align 2, !dbg !18
  %634 = icmp eq i16 %633, 1, !dbg !18
  %635 = getelementptr inbounds %1, %1* %compute405, i64 0, i32 3, i32 1, !dbg !18
  %636 = load i8, i8* %635, align 1, !dbg !18
  %637 = icmp eq i8 %636, 32, !dbg !18
  %638 = getelementptr inbounds %1, %1* %compute405, i64 0, i32 3, i32 0, !dbg !18
  %639 = load i8, i8* %638, align 1, !dbg !18
  %640 = icmp eq i8 %639, 2, !dbg !18
  %641 = and i1 %637, %640, !dbg !18
  %642 = and i1 %634, %641, !dbg !18
  br i1 %642, label %assert_end361, label %assert_fail360, !dbg !18, !prof !19

assert_fail360:                                   ; preds = %assert_end359
  %643 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %643(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end361:                                    ; preds = %assert_end359
  %644 = load i64, i64* %default_function.compute.shape, align 8, !dbg !18, !tbaa !315
  %645 = trunc i64 %644 to i32, !dbg !18
  %646 = icmp eq i32 %645, 1, !dbg !18
  br i1 %646, label %assert_end363, label %assert_fail362, !dbg !18, !prof !19

assert_fail362:                                   ; preds = %assert_end361
  %647 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %647(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end363:                                    ; preds = %assert_end361
  %648 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 1, !dbg !18
  %649 = load i64, i64* %648, align 8, !dbg !18, !tbaa !325
  %650 = trunc i64 %649 to i32, !dbg !18
  %651 = icmp eq i32 %650, 64, !dbg !18
  br i1 %651, label %assert_end365, label %assert_fail364, !dbg !18, !prof !19

assert_fail364:                                   ; preds = %assert_end363
  %652 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %652(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end365:                                    ; preds = %assert_end363
  %653 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 2, !dbg !18
  %654 = load i64, i64* %653, align 8, !dbg !18, !tbaa !327
  %655 = trunc i64 %654 to i32, !dbg !18
  %656 = icmp eq i32 %655, 124, !dbg !18
  br i1 %656, label %assert_end367, label %assert_fail366, !dbg !18, !prof !19

assert_fail366:                                   ; preds = %assert_end365
  %657 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %657(i8* getelementptr inbounds ([204 x i8], [204 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end367:                                    ; preds = %assert_end365
  %658 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 3, !dbg !18
  %659 = load i64, i64* %658, align 8, !dbg !18, !tbaa !330
  %660 = trunc i64 %659 to i32, !dbg !18
  %661 = icmp eq i32 %660, 124, !dbg !18
  br i1 %661, label %assert_end369, label %assert_fail368, !dbg !18, !prof !19

assert_fail368:                                   ; preds = %assert_end367
  %662 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %662(i8* getelementptr inbounds ([204 x i8], [204 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end369:                                    ; preds = %assert_end367
  %663 = icmp eq i64* %default_function.compute.strides, null, !dbg !18
  br i1 %663, label %if_end371, label %if_then370, !dbg !18, !prof !81

if_then370:                                       ; preds = %assert_end369
  %664 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 1, !dbg !18
  %665 = load i64, i64* %664, align 8, !dbg !18, !tbaa !332
  %666 = trunc i64 %665 to i32, !dbg !18
  %667 = icmp eq i32 %666, 15376, !dbg !18
  %668 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 2, !dbg !18
  %669 = load i64, i64* %668, align 8, !dbg !18, !tbaa !342
  %670 = trunc i64 %669 to i32, !dbg !18
  %671 = icmp eq i32 %670, 124, !dbg !18
  %672 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 3, !dbg !18
  %673 = load i64, i64* %672, align 8, !dbg !18, !tbaa !345
  %674 = trunc i64 %673 to i32, !dbg !18
  %675 = icmp eq i32 %674, 1, !dbg !18
  %676 = and i1 %671, %675, !dbg !18
  %677 = and i1 %667, %676, !dbg !18
  br i1 %677, label %if_end371, label %assert_fail372, !dbg !18, !prof !19

if_end371:                                        ; preds = %assert_end369, %if_then370
  %678 = getelementptr inbounds %1, %1* %compute405, i64 0, i32 6, !dbg !18
  %679 = load i64, i64* %678, align 8, !dbg !18
  %680 = icmp eq i64 %679, 0, !dbg !18
  br i1 %680, label %assert_end375, label %assert_fail374, !dbg !18, !prof !19

assert_fail372:                                   ; preds = %if_then370
  %681 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %681(i8* getelementptr inbounds ([265 x i8], [265 x i8]* @.str.43, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail374:                                   ; preds = %if_end371
  %682 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %682(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.44, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end375:                                    ; preds = %if_end371
  %683 = getelementptr inbounds %1, %1* %compute405, i64 0, i32 1, i32 0, !dbg !18
  %684 = load i32, i32* %683, align 4, !dbg !18
  %685 = icmp eq i32 %684, 1, !dbg !18
  br i1 %685, label %assert_end377, label %assert_fail376, !dbg !18, !prof !19

assert_fail376:                                   ; preds = %assert_end375
  %686 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %686(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.45, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end377:                                    ; preds = %assert_end375
  %687 = getelementptr inbounds %1, %1* %compute405, i64 0, i32 1, i32 1, !dbg !18
  %688 = load i32, i32* %687, align 4, !dbg !18
  %689 = icmp eq i32 %dev_id, %688, !dbg !18
  br i1 %689, label %assert_end379, label %assert_fail378, !dbg !18, !prof !19

assert_fail378:                                   ; preds = %assert_end377
  %690 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %690(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.46, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end379:                                    ; preds = %assert_end377
  %691 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %compute_void_ptr417, i32* nonnull %stack_tcode393.sub, float* %ph_void_ptr406, float* %ph_void_ptr22407, float* %ph_void_ptr36409, float* %ph_void_ptr43410, float* %ph_void_ptr50411, float* %ph_void_ptr57412, float* %ph_void_ptr29408, float* %ph_void_ptr64413, float* %ph_void_ptr71414, float* %ph_void_ptr78415, float* %ph_void_ptr85416), !dbg !18
  ret i32 %691, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5, float* noalias align 64 %6, float* noalias align 64 %7, float* noalias align 64 %8, float* noalias align 64 %9, float* noalias align 64 %10, float* noalias align 64 %11, float* noalias align 64 %12, float* noalias align 64 %13) unnamed_addr #2 {
entry:
  %14 = alloca i8*, align 8
  %15 = bitcast i8* %0 to %0*
  %16 = bitcast i8* %0 to float**
  store float* %1, float** %16, align 8
  %17 = getelementptr inbounds i8, i8* %0, i64 8
  %18 = bitcast i8* %17 to float**
  store float* %3, float** %18, align 8
  %19 = getelementptr inbounds i8, i8* %0, i64 16
  %20 = bitcast i8* %19 to float**
  store float* %4, float** %20, align 8
  %21 = getelementptr inbounds i8, i8* %0, i64 24
  %22 = bitcast i8* %21 to float**
  store float* %5, float** %22, align 8
  %23 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %23, align 4, !tbaa !347
  %24 = getelementptr inbounds i8, i8* %0, i64 32
  %25 = bitcast i8* %24 to float**
  store float* %6, float** %25, align 8
  %26 = getelementptr inbounds i32, i32* %2, i64 4
  %27 = getelementptr inbounds i8, i8* %0, i64 40
  %28 = bitcast i8* %27 to float**
  store float* %7, float** %28, align 8
  %29 = getelementptr inbounds i8, i8* %0, i64 48
  %30 = bitcast i8* %29 to float**
  store float* %8, float** %30, align 8
  %31 = getelementptr inbounds i8, i8* %0, i64 56
  %32 = bitcast i8* %31 to float**
  store float* %9, float** %32, align 8
  %33 = bitcast i32* %26 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %33, align 4, !tbaa !356
  %34 = getelementptr inbounds i8, i8* %0, i64 64
  %35 = bitcast i8* %34 to float**
  store float* %10, float** %35, align 8
  %36 = getelementptr inbounds i32, i32* %2, i64 8
  %37 = getelementptr inbounds i8, i8* %0, i64 72
  %38 = bitcast i8* %37 to float**
  store float* %11, float** %38, align 8
  %39 = getelementptr inbounds i8, i8* %0, i64 80
  %40 = bitcast i8* %39 to float**
  store float* %12, float** %40, align 8
  %41 = getelementptr inbounds i8, i8* %0, i64 88
  %42 = bitcast i8* %41 to float**
  store float* %13, float** %42, align 8
  %43 = bitcast i32* %36 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %43, align 4, !tbaa !358
  %44 = getelementptr inbounds i8, i8* %0, i64 96
  %45 = bitcast i8* %44 to %0*
  %46 = getelementptr inbounds i32, i32* %2, i64 12
  %47 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %48 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %handle_init, label %handle_init_end, !prof !81

handle_init:                                      ; preds = %entry
  %50 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %51 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %52 = call i32 %51(i8* %50, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.47, i64 0, i64 0), i8** nonnull %14)
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %54 = phi i8* [ %48, %entry ], [ %57, %call_end ]
  %55 = call i32 %47(i8* %54, %0* %15, i32* nonnull %2, i32 12, %0* nonnull %45, i32* nonnull %46)
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %52, %handle_init ], [ %55, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %57 = load i8*, i8** %14, align 8
  store i8* %57, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %58 = bitcast i8* %44 to i64*
  %59 = load i64, i64* %58, align 8
  %kernel_error_code = trunc i64 %59 to i32
  %60 = icmp eq i32 %kernel_error_code, 0
  br i1 %60, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %61(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x557241f0de50.w4.b0", !25, i64 0}
!25 = !{!"0x557241f0de50.w8.b0", !26, i64 0}
!26 = !{!"0x557241f0de50.w16.b0", !27, i64 0}
!27 = !{!"0x557241f0de50.w32.b0", !28, i64 0}
!28 = !{!"0x557241f0de50.w64.b0", !29, i64 0}
!29 = !{!"0x557241f0de50.w128.b0", !30, i64 0}
!30 = !{!"0x557241f0de50.w256.b0", !31, i64 0}
!31 = !{!"0x557241f0de50.w512.b0", !32, i64 0}
!32 = !{!"0x557241f0de50.w1024.b0", !33, i64 0}
!33 = !{!"0x557241f0de50", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x557241f0de50.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x557241f0de50.w4.b8", !38, i64 0}
!38 = !{!"0x557241f0de50.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x557241f0de50.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x557241f0de50.w4.b16", !43, i64 0}
!43 = !{!"0x557241f0de50.w8.b16", !44, i64 0}
!44 = !{!"0x557241f0de50.w16.b16", !27, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"0x557241f0de50.w4.b20", !43, i64 0}
!47 = !{!48, !48, i64 0}
!48 = !{!"0x557241f0de50.w4.b24", !49, i64 0}
!49 = !{!"0x557241f0de50.w8.b24", !44, i64 0}
!50 = !{!51, !51, i64 0}
!51 = !{!"0x557241f0de50.w4.b28", !49, i64 0}
!52 = !{!53, !53, i64 0}
!53 = !{!"0x557241f0de50.w4.b32", !54, i64 0}
!54 = !{!"0x557241f0de50.w8.b32", !55, i64 0}
!55 = !{!"0x557241f0de50.w16.b32", !56, i64 0}
!56 = !{!"0x557241f0de50.w32.b32", !28, i64 0}
!57 = !{!58, !58, i64 0}
!58 = !{!"0x557241f0de50.w4.b36", !54, i64 0}
!59 = !{!60, !60, i64 0}
!60 = !{!"0x557241f0de50.w4.b40", !61, i64 0}
!61 = !{!"0x557241f0de50.w8.b40", !55, i64 0}
!62 = !{!63, !63, i64 0}
!63 = !{!"0x557241f0de50.w4.b44", !61, i64 0}
!64 = !{!65, !65, i64 0}
!65 = !{!"0x557241e08330.w8.b0", !66, i64 0}
!66 = !{!"0x557241e08330.w16.b0", !67, i64 0}
!67 = !{!"0x557241e08330.w32.b0", !68, i64 0}
!68 = !{!"0x557241e08330.w64.b0", !69, i64 0}
!69 = !{!"0x557241e08330.w128.b0", !70, i64 0}
!70 = !{!"0x557241e08330.w256.b0", !71, i64 0}
!71 = !{!"0x557241e08330.w512.b0", !72, i64 0}
!72 = !{!"0x557241e08330.w1024.b0", !73, i64 0}
!73 = !{!"0x557241e08330", !22, i64 0}
!74 = !{!75, !75, i64 0}
!75 = !{!"0x557241e08330.w8.b8", !66, i64 0}
!76 = !{!77, !77, i64 0}
!77 = !{!"0x557241e08330.w8.b16", !78, i64 0}
!78 = !{!"0x557241e08330.w16.b16", !67, i64 0}
!79 = !{!80, !80, i64 0}
!80 = !{!"0x557241e08330.w8.b24", !78, i64 0}
!81 = !{!"branch_weights", i32 1, i32 1048576}
!82 = !{!83, !83, i64 0}
!83 = !{!"0x557241dd76c0.w8.b8", !84, i64 0}
!84 = !{!"0x557241dd76c0.w16.b0", !85, i64 0}
!85 = !{!"0x557241dd76c0.w32.b0", !86, i64 0}
!86 = !{!"0x557241dd76c0.w64.b0", !87, i64 0}
!87 = !{!"0x557241dd76c0.w128.b0", !88, i64 0}
!88 = !{!"0x557241dd76c0.w256.b0", !89, i64 0}
!89 = !{!"0x557241dd76c0.w512.b0", !90, i64 0}
!90 = !{!"0x557241dd76c0.w1024.b0", !91, i64 0}
!91 = !{!"0x557241dd76c0", !22, i64 0}
!92 = !{!93, !93, i64 0}
!93 = !{!"0x557241dd76c0.w8.b16", !94, i64 0}
!94 = !{!"0x557241dd76c0.w16.b16", !85, i64 0}
!95 = !{!96, !96, i64 0}
!96 = !{!"0x557241dd76c0.w8.b24", !94, i64 0}
!97 = !{!98, !98, i64 0}
!98 = !{!"0x557241cab600.w8.b0", !99, i64 0}
!99 = !{!"0x557241cab600.w16.b0", !100, i64 0}
!100 = !{!"0x557241cab600.w32.b0", !101, i64 0}
!101 = !{!"0x557241cab600.w64.b0", !102, i64 0}
!102 = !{!"0x557241cab600.w128.b0", !103, i64 0}
!103 = !{!"0x557241cab600.w256.b0", !104, i64 0}
!104 = !{!"0x557241cab600.w512.b0", !105, i64 0}
!105 = !{!"0x557241cab600.w1024.b0", !106, i64 0}
!106 = !{!"0x557241cab600", !22, i64 0}
!107 = !{!108, !108, i64 0}
!108 = !{!"0x557241cab600.w8.b8", !99, i64 0}
!109 = !{!110, !110, i64 0}
!110 = !{!"0x557241cab600.w8.b16", !111, i64 0}
!111 = !{!"0x557241cab600.w16.b16", !100, i64 0}
!112 = !{!113, !113, i64 0}
!113 = !{!"0x557241cab600.w8.b24", !111, i64 0}
!114 = !{!115, !115, i64 0}
!115 = !{!"0x557241c2c550.w32.b0", !116, i64 0}
!116 = !{!"0x557241c2c550.w64.b0", !117, i64 0}
!117 = !{!"0x557241c2c550.w128.b0", !118, i64 0}
!118 = !{!"0x557241c2c550.w256.b0", !119, i64 0}
!119 = !{!"0x557241c2c550.w512.b0", !120, i64 0}
!120 = !{!"0x557241c2c550.w1024.b0", !121, i64 0}
!121 = !{!"0x557241c2c550", !22, i64 0}
!122 = !{!123, !123, i64 0}
!123 = !{!"0x557241f5d4c0.w8.b0", !124, i64 0}
!124 = !{!"0x557241f5d4c0.w16.b0", !125, i64 0}
!125 = !{!"0x557241f5d4c0.w32.b0", !126, i64 0}
!126 = !{!"0x557241f5d4c0.w64.b0", !127, i64 0}
!127 = !{!"0x557241f5d4c0.w128.b0", !128, i64 0}
!128 = !{!"0x557241f5d4c0.w256.b0", !129, i64 0}
!129 = !{!"0x557241f5d4c0.w512.b0", !130, i64 0}
!130 = !{!"0x557241f5d4c0.w1024.b0", !131, i64 0}
!131 = !{!"0x557241f5d4c0", !22, i64 0}
!132 = !{!133, !133, i64 0}
!133 = !{!"0x557241f5d4c0.w8.b8", !124, i64 0}
!134 = !{!135, !135, i64 0}
!135 = !{!"0x557241f5d4c0.w8.b16", !136, i64 0}
!136 = !{!"0x557241f5d4c0.w16.b16", !125, i64 0}
!137 = !{!138, !138, i64 0}
!138 = !{!"0x557241f5d4c0.w8.b24", !136, i64 0}
!139 = !{!140, !140, i64 0}
!140 = !{!"0x557241eea790.w32.b0", !141, i64 0}
!141 = !{!"0x557241eea790.w64.b0", !142, i64 0}
!142 = !{!"0x557241eea790.w128.b0", !143, i64 0}
!143 = !{!"0x557241eea790.w256.b0", !144, i64 0}
!144 = !{!"0x557241eea790.w512.b0", !145, i64 0}
!145 = !{!"0x557241eea790.w1024.b0", !146, i64 0}
!146 = !{!"0x557241eea790", !22, i64 0}
!147 = !{!148, !148, i64 0}
!148 = !{!"0x557241dc64c0.w8.b0", !149, i64 0}
!149 = !{!"0x557241dc64c0.w16.b0", !150, i64 0}
!150 = !{!"0x557241dc64c0.w32.b0", !151, i64 0}
!151 = !{!"0x557241dc64c0.w64.b0", !152, i64 0}
!152 = !{!"0x557241dc64c0.w128.b0", !153, i64 0}
!153 = !{!"0x557241dc64c0.w256.b0", !154, i64 0}
!154 = !{!"0x557241dc64c0.w512.b0", !155, i64 0}
!155 = !{!"0x557241dc64c0.w1024.b0", !156, i64 0}
!156 = !{!"0x557241dc64c0", !22, i64 0}
!157 = !{!158, !158, i64 0}
!158 = !{!"0x557241dc64c0.w8.b8", !149, i64 0}
!159 = !{!160, !160, i64 0}
!160 = !{!"0x557241dc64c0.w8.b16", !161, i64 0}
!161 = !{!"0x557241dc64c0.w16.b16", !150, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"0x557241dc64c0.w8.b24", !161, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"0x557241f45430.w8.b8", !166, i64 0}
!166 = !{!"0x557241f45430.w16.b0", !167, i64 0}
!167 = !{!"0x557241f45430.w32.b0", !168, i64 0}
!168 = !{!"0x557241f45430.w64.b0", !169, i64 0}
!169 = !{!"0x557241f45430.w128.b0", !170, i64 0}
!170 = !{!"0x557241f45430.w256.b0", !171, i64 0}
!171 = !{!"0x557241f45430.w512.b0", !172, i64 0}
!172 = !{!"0x557241f45430.w1024.b0", !173, i64 0}
!173 = !{!"0x557241f45430", !22, i64 0}
!174 = !{!175, !175, i64 0}
!175 = !{!"0x557241f45430.w8.b16", !176, i64 0}
!176 = !{!"0x557241f45430.w16.b16", !167, i64 0}
!177 = !{!178, !178, i64 0}
!178 = !{!"0x557241f45430.w8.b24", !176, i64 0}
!179 = !{!180, !180, i64 0}
!180 = !{!"0x557241d68c60.w8.b0", !181, i64 0}
!181 = !{!"0x557241d68c60.w16.b0", !182, i64 0}
!182 = !{!"0x557241d68c60.w32.b0", !183, i64 0}
!183 = !{!"0x557241d68c60.w64.b0", !184, i64 0}
!184 = !{!"0x557241d68c60.w128.b0", !185, i64 0}
!185 = !{!"0x557241d68c60.w256.b0", !186, i64 0}
!186 = !{!"0x557241d68c60.w512.b0", !187, i64 0}
!187 = !{!"0x557241d68c60.w1024.b0", !188, i64 0}
!188 = !{!"0x557241d68c60", !22, i64 0}
!189 = !{!190, !190, i64 0}
!190 = !{!"0x557241d68c60.w8.b8", !181, i64 0}
!191 = !{!192, !192, i64 0}
!192 = !{!"0x557241d68c60.w8.b16", !193, i64 0}
!193 = !{!"0x557241d68c60.w16.b16", !182, i64 0}
!194 = !{!195, !195, i64 0}
!195 = !{!"0x557241d68c60.w8.b24", !193, i64 0}
!196 = !{!197, !197, i64 0}
!197 = !{!"0x55724213ae00.w8.b8", !198, i64 0}
!198 = !{!"0x55724213ae00.w16.b0", !199, i64 0}
!199 = !{!"0x55724213ae00.w32.b0", !200, i64 0}
!200 = !{!"0x55724213ae00.w64.b0", !201, i64 0}
!201 = !{!"0x55724213ae00.w128.b0", !202, i64 0}
!202 = !{!"0x55724213ae00.w256.b0", !203, i64 0}
!203 = !{!"0x55724213ae00.w512.b0", !204, i64 0}
!204 = !{!"0x55724213ae00.w1024.b0", !205, i64 0}
!205 = !{!"0x55724213ae00", !22, i64 0}
!206 = !{!207, !207, i64 0}
!207 = !{!"0x55724213ae00.w8.b16", !208, i64 0}
!208 = !{!"0x55724213ae00.w16.b16", !199, i64 0}
!209 = !{!210, !210, i64 0}
!210 = !{!"0x55724213ae00.w8.b24", !208, i64 0}
!211 = !{!212, !212, i64 0}
!212 = !{!"0x557241dd5a00.w8.b0", !213, i64 0}
!213 = !{!"0x557241dd5a00.w16.b0", !214, i64 0}
!214 = !{!"0x557241dd5a00.w32.b0", !215, i64 0}
!215 = !{!"0x557241dd5a00.w64.b0", !216, i64 0}
!216 = !{!"0x557241dd5a00.w128.b0", !217, i64 0}
!217 = !{!"0x557241dd5a00.w256.b0", !218, i64 0}
!218 = !{!"0x557241dd5a00.w512.b0", !219, i64 0}
!219 = !{!"0x557241dd5a00.w1024.b0", !220, i64 0}
!220 = !{!"0x557241dd5a00", !22, i64 0}
!221 = !{!222, !222, i64 0}
!222 = !{!"0x557241981450.w8.b0", !223, i64 0}
!223 = !{!"0x557241981450.w16.b0", !224, i64 0}
!224 = !{!"0x557241981450.w32.b0", !225, i64 0}
!225 = !{!"0x557241981450.w64.b0", !226, i64 0}
!226 = !{!"0x557241981450.w128.b0", !227, i64 0}
!227 = !{!"0x557241981450.w256.b0", !228, i64 0}
!228 = !{!"0x557241981450.w512.b0", !229, i64 0}
!229 = !{!"0x557241981450.w1024.b0", !230, i64 0}
!230 = !{!"0x557241981450", !22, i64 0}
!231 = !{!232, !232, i64 0}
!232 = !{!"0x557241f5cf70.w8.b0", !233, i64 0}
!233 = !{!"0x557241f5cf70.w16.b0", !234, i64 0}
!234 = !{!"0x557241f5cf70.w32.b0", !235, i64 0}
!235 = !{!"0x557241f5cf70.w64.b0", !236, i64 0}
!236 = !{!"0x557241f5cf70.w128.b0", !237, i64 0}
!237 = !{!"0x557241f5cf70.w256.b0", !238, i64 0}
!238 = !{!"0x557241f5cf70.w512.b0", !239, i64 0}
!239 = !{!"0x557241f5cf70.w1024.b0", !240, i64 0}
!240 = !{!"0x557241f5cf70", !22, i64 0}
!241 = !{!242, !242, i64 0}
!242 = !{!"0x557241f5cf70.w8.b8", !233, i64 0}
!243 = !{!244, !244, i64 0}
!244 = !{!"0x557241f5cf70.w8.b16", !245, i64 0}
!245 = !{!"0x557241f5cf70.w16.b16", !234, i64 0}
!246 = !{!247, !247, i64 0}
!247 = !{!"0x557241f5cf70.w8.b24", !245, i64 0}
!248 = !{!249, !249, i64 0}
!249 = !{!"0x557241d37b00.w8.b8", !250, i64 0}
!250 = !{!"0x557241d37b00.w16.b0", !251, i64 0}
!251 = !{!"0x557241d37b00.w32.b0", !252, i64 0}
!252 = !{!"0x557241d37b00.w64.b0", !253, i64 0}
!253 = !{!"0x557241d37b00.w128.b0", !254, i64 0}
!254 = !{!"0x557241d37b00.w256.b0", !255, i64 0}
!255 = !{!"0x557241d37b00.w512.b0", !256, i64 0}
!256 = !{!"0x557241d37b00.w1024.b0", !257, i64 0}
!257 = !{!"0x557241d37b00", !22, i64 0}
!258 = !{!259, !259, i64 0}
!259 = !{!"0x557241d37b00.w8.b16", !260, i64 0}
!260 = !{!"0x557241d37b00.w16.b16", !251, i64 0}
!261 = !{!262, !262, i64 0}
!262 = !{!"0x557241d37b00.w8.b24", !260, i64 0}
!263 = !{!264, !264, i64 0}
!264 = !{!"0x557241dfa610.w8.b0", !265, i64 0}
!265 = !{!"0x557241dfa610.w16.b0", !266, i64 0}
!266 = !{!"0x557241dfa610.w32.b0", !267, i64 0}
!267 = !{!"0x557241dfa610.w64.b0", !268, i64 0}
!268 = !{!"0x557241dfa610.w128.b0", !269, i64 0}
!269 = !{!"0x557241dfa610.w256.b0", !270, i64 0}
!270 = !{!"0x557241dfa610.w512.b0", !271, i64 0}
!271 = !{!"0x557241dfa610.w1024.b0", !272, i64 0}
!272 = !{!"0x557241dfa610", !22, i64 0}
!273 = !{!274, !274, i64 0}
!274 = !{!"0x557241dfa610.w8.b8", !265, i64 0}
!275 = !{!276, !276, i64 0}
!276 = !{!"0x557241dfa610.w8.b16", !277, i64 0}
!277 = !{!"0x557241dfa610.w16.b16", !266, i64 0}
!278 = !{!279, !279, i64 0}
!279 = !{!"0x557241dfa610.w8.b24", !277, i64 0}
!280 = !{!281, !281, i64 0}
!281 = !{!"0x55724201fbf0.w8.b8", !282, i64 0}
!282 = !{!"0x55724201fbf0.w16.b0", !283, i64 0}
!283 = !{!"0x55724201fbf0.w32.b0", !284, i64 0}
!284 = !{!"0x55724201fbf0.w64.b0", !285, i64 0}
!285 = !{!"0x55724201fbf0.w128.b0", !286, i64 0}
!286 = !{!"0x55724201fbf0.w256.b0", !287, i64 0}
!287 = !{!"0x55724201fbf0.w512.b0", !288, i64 0}
!288 = !{!"0x55724201fbf0.w1024.b0", !289, i64 0}
!289 = !{!"0x55724201fbf0", !22, i64 0}
!290 = !{!291, !291, i64 0}
!291 = !{!"0x55724201fbf0.w8.b16", !292, i64 0}
!292 = !{!"0x55724201fbf0.w16.b16", !283, i64 0}
!293 = !{!294, !294, i64 0}
!294 = !{!"0x55724201fbf0.w8.b24", !292, i64 0}
!295 = !{!296, !296, i64 0}
!296 = !{!"0x557241efc290.w8.b0", !297, i64 0}
!297 = !{!"0x557241efc290.w16.b0", !298, i64 0}
!298 = !{!"0x557241efc290.w32.b0", !299, i64 0}
!299 = !{!"0x557241efc290.w64.b0", !300, i64 0}
!300 = !{!"0x557241efc290.w128.b0", !301, i64 0}
!301 = !{!"0x557241efc290.w256.b0", !302, i64 0}
!302 = !{!"0x557241efc290.w512.b0", !303, i64 0}
!303 = !{!"0x557241efc290.w1024.b0", !304, i64 0}
!304 = !{!"0x557241efc290", !22, i64 0}
!305 = !{!306, !306, i64 0}
!306 = !{!"0x557241effe30.w8.b0", !307, i64 0}
!307 = !{!"0x557241effe30.w16.b0", !308, i64 0}
!308 = !{!"0x557241effe30.w32.b0", !309, i64 0}
!309 = !{!"0x557241effe30.w64.b0", !310, i64 0}
!310 = !{!"0x557241effe30.w128.b0", !311, i64 0}
!311 = !{!"0x557241effe30.w256.b0", !312, i64 0}
!312 = !{!"0x557241effe30.w512.b0", !313, i64 0}
!313 = !{!"0x557241effe30.w1024.b0", !314, i64 0}
!314 = !{!"0x557241effe30", !22, i64 0}
!315 = !{!316, !316, i64 0}
!316 = !{!"0x5572419812e0.w8.b0", !317, i64 0}
!317 = !{!"0x5572419812e0.w16.b0", !318, i64 0}
!318 = !{!"0x5572419812e0.w32.b0", !319, i64 0}
!319 = !{!"0x5572419812e0.w64.b0", !320, i64 0}
!320 = !{!"0x5572419812e0.w128.b0", !321, i64 0}
!321 = !{!"0x5572419812e0.w256.b0", !322, i64 0}
!322 = !{!"0x5572419812e0.w512.b0", !323, i64 0}
!323 = !{!"0x5572419812e0.w1024.b0", !324, i64 0}
!324 = !{!"0x5572419812e0", !22, i64 0}
!325 = !{!326, !326, i64 0}
!326 = !{!"0x5572419812e0.w8.b8", !317, i64 0}
!327 = !{!328, !328, i64 0}
!328 = !{!"0x5572419812e0.w8.b16", !329, i64 0}
!329 = !{!"0x5572419812e0.w16.b16", !318, i64 0}
!330 = !{!331, !331, i64 0}
!331 = !{!"0x5572419812e0.w8.b24", !329, i64 0}
!332 = !{!333, !333, i64 0}
!333 = !{!"0x557241e4f790.w8.b8", !334, i64 0}
!334 = !{!"0x557241e4f790.w16.b0", !335, i64 0}
!335 = !{!"0x557241e4f790.w32.b0", !336, i64 0}
!336 = !{!"0x557241e4f790.w64.b0", !337, i64 0}
!337 = !{!"0x557241e4f790.w128.b0", !338, i64 0}
!338 = !{!"0x557241e4f790.w256.b0", !339, i64 0}
!339 = !{!"0x557241e4f790.w512.b0", !340, i64 0}
!340 = !{!"0x557241e4f790.w1024.b0", !341, i64 0}
!341 = !{!"0x557241e4f790", !22, i64 0}
!342 = !{!343, !343, i64 0}
!343 = !{!"0x557241e4f790.w8.b16", !344, i64 0}
!344 = !{!"0x557241e4f790.w16.b16", !335, i64 0}
!345 = !{!346, !346, i64 0}
!346 = !{!"0x557241e4f790.w8.b24", !344, i64 0}
!347 = !{!348, !348, i64 0}
!348 = !{!"0x5572420d5440.w16.b0", !349, i64 0}
!349 = !{!"0x5572420d5440.w32.b0", !350, i64 0}
!350 = !{!"0x5572420d5440.w64.b0", !351, i64 0}
!351 = !{!"0x5572420d5440.w128.b0", !352, i64 0}
!352 = !{!"0x5572420d5440.w256.b0", !353, i64 0}
!353 = !{!"0x5572420d5440.w512.b0", !354, i64 0}
!354 = !{!"0x5572420d5440.w1024.b0", !355, i64 0}
!355 = !{!"0x5572420d5440", !22, i64 0}
!356 = !{!357, !357, i64 0}
!357 = !{!"0x5572420d5440.w16.b16", !349, i64 0}
!358 = !{!359, !359, i64 0}
!359 = !{!"0x5572420d5440.w16.b32", !360, i64 0}
!360 = !{!"0x5572420d5440.w32.b32", !350, i64 0}
