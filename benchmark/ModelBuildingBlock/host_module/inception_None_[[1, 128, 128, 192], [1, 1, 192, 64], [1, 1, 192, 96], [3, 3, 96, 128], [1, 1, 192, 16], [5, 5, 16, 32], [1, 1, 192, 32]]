; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: num_args == 8, default_function: num_args should be 8\00", align 1
@.str.1 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[4] to be pointer\00", align 1
@.str.6 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[5] to be pointer\00", align 1
@.str.7 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[6] to be pointer\00", align 1
@.str.8 = private constant [146 x i8] c"Assert fail: T_concat_code == 3 or T_concat_code == 13 or T_concat_code == 7 or T_concat_code == 4, default_function: Expect arg[7] to be pointer\00", align 1
@.str.9 = private constant [103 x i8] c"Assert fail: 4 == T.tvm_struct_get(ph, 0, 4, \22int32\22), default_function.ph.ndim is expected to equal 4\00", align 1
@.str.10 = private constant [227 x i8] c"Assert fail: T.tvm_struct_get(ph, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph.dtype is expected to be float32\00", align 1
@.str.11 = private constant [185 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[0]) == 1, Argument default_function.ph.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_shape[0])\00", align 1
@.str.12 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[1]) == 128, Argument default_function.ph.shape[1] has an unsatisfied constraint: 128 == T.Cast(\22int32\22, default_function_ph_shape[1])\00", align 1
@.str.13 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[2]) == 128, Argument default_function.ph.shape[2] has an unsatisfied constraint: 128 == T.Cast(\22int32\22, default_function_ph_shape[2])\00", align 1
@.str.14 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[3]) == 192, Argument default_function.ph.shape[3] has an unsatisfied constraint: 192 == T.Cast(\22int32\22, default_function_ph_shape[3])\00", align 1
@.str.15 = private constant [245 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[3]) and 192 == T.Cast(\22int32\22, default_function_ph_strides[2]) and 24576 == T.Cast(\22int32\22, default_function_ph_strides[1]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.16 = private constant [190 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph, 0, 8, \22uint64\22), Argument default_function.ph.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph, 0, 8, \22uint64\22)\00", align 1
@.str.17 = private constant [170 x i8] c"Assert fail: T.tvm_struct_get(ph, 0, 10, \22int32\22) == 1, Argument default_function.ph.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph, 0, 10, \22int32\22)\00", align 1
@.str.18 = private constant [185 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[1]) == 1, Argument default_function.ph.shape[1] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_shape[1])\00", align 1
@.str.19 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[2]) == 192, Argument default_function.ph.shape[2] has an unsatisfied constraint: 192 == T.Cast(\22int32\22, default_function_ph_shape[2])\00", align 1
@.str.20 = private constant [187 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[3]) == 64, Argument default_function.ph.shape[3] has an unsatisfied constraint: 64 == T.Cast(\22int32\22, default_function_ph_shape[3])\00", align 1
@.str.21 = private constant [183 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[3]) and 64 == T.Cast(\22int32\22, default_function_ph_strides[2]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.22 = private constant [176 x i8] c"Assert fail: dev_id == T.tvm_struct_get(ph, 0, 9, \22int32\22), Argument default_function.ph.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(ph, 0, 9, \22int32\22)\00", align 1
@.str.23 = private constant [187 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[3]) == 96, Argument default_function.ph.shape[3] has an unsatisfied constraint: 96 == T.Cast(\22int32\22, default_function_ph_shape[3])\00", align 1
@.str.24 = private constant [183 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[3]) and 96 == T.Cast(\22int32\22, default_function_ph_strides[2]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.25 = private constant [185 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[0]) == 3, Argument default_function.ph.shape[0] has an unsatisfied constraint: 3 == T.Cast(\22int32\22, default_function_ph_shape[0])\00", align 1
@.str.26 = private constant [185 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[1]) == 3, Argument default_function.ph.shape[1] has an unsatisfied constraint: 3 == T.Cast(\22int32\22, default_function_ph_shape[1])\00", align 1
@.str.27 = private constant [187 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[2]) == 96, Argument default_function.ph.shape[2] has an unsatisfied constraint: 96 == T.Cast(\22int32\22, default_function_ph_shape[2])\00", align 1
@.str.28 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[3]) == 128, Argument default_function.ph.shape[3] has an unsatisfied constraint: 128 == T.Cast(\22int32\22, default_function_ph_shape[3])\00", align 1
@.str.29 = private constant [306 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[3]) and 128 == T.Cast(\22int32\22, default_function_ph_strides[2]) and 12288 == T.Cast(\22int32\22, default_function_ph_strides[1]) and 36864 == T.Cast(\22int32\22, default_function_ph_strides[0]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.30 = private constant [187 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[3]) == 16, Argument default_function.ph.shape[3] has an unsatisfied constraint: 16 == T.Cast(\22int32\22, default_function_ph_shape[3])\00", align 1
@.str.31 = private constant [183 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[3]) and 16 == T.Cast(\22int32\22, default_function_ph_strides[2]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.32 = private constant [185 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[0]) == 5, Argument default_function.ph.shape[0] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_ph_shape[0])\00", align 1
@.str.33 = private constant [185 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[1]) == 5, Argument default_function.ph.shape[1] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_ph_shape[1])\00", align 1
@.str.34 = private constant [187 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[2]) == 16, Argument default_function.ph.shape[2] has an unsatisfied constraint: 16 == T.Cast(\22int32\22, default_function_ph_shape[2])\00", align 1
@.str.35 = private constant [187 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[3]) == 32, Argument default_function.ph.shape[3] has an unsatisfied constraint: 32 == T.Cast(\22int32\22, default_function_ph_shape[3])\00", align 1
@.str.36 = private constant [302 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[3]) and 32 == T.Cast(\22int32\22, default_function_ph_strides[2]) and 512 == T.Cast(\22int32\22, default_function_ph_strides[1]) and 2560 == T.Cast(\22int32\22, default_function_ph_strides[0]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.37 = private constant [183 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[3]) and 32 == T.Cast(\22int32\22, default_function_ph_strides[2]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.38 = private constant [115 x i8] c"Assert fail: 4 == T.tvm_struct_get(T_concat, 0, 4, \22int32\22), default_function.T_concat.ndim is expected to equal 4\00", align 1
@.str.39 = private constant [251 x i8] c"Assert fail: T.tvm_struct_get(T_concat, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_concat, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_concat, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_concat.dtype is expected to be float32\00", align 1
@.str.40 = private constant [203 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_concat_shape[0]) == 1, Argument default_function.T_concat.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_T_concat_shape[0])\00", align 1
@.str.41 = private constant [207 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_concat_shape[1]) == 128, Argument default_function.T_concat.shape[1] has an unsatisfied constraint: 128 == T.Cast(\22int32\22, default_function_T_concat_shape[1])\00", align 1
@.str.42 = private constant [207 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_concat_shape[2]) == 128, Argument default_function.T_concat.shape[2] has an unsatisfied constraint: 128 == T.Cast(\22int32\22, default_function_T_concat_shape[2])\00", align 1
@.str.43 = private constant [207 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_concat_shape[3]) == 256, Argument default_function.T_concat.shape[3] has an unsatisfied constraint: 256 == T.Cast(\22int32\22, default_function_T_concat_shape[3])\00", align 1
@.str.44 = private constant [269 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_concat_strides[3]) and 256 == T.Cast(\22int32\22, default_function_T_concat_strides[2]) and 32768 == T.Cast(\22int32\22, default_function_T_concat_strides[1]), default_function.T_concat.strides: expected to be compact array\00", align 1
@.str.45 = private constant [208 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_concat, 0, 8, \22uint64\22), Argument default_function.T_concat.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_concat, 0, 8, \22uint64\22)\00", align 1
@.str.46 = private constant [188 x i8] c"Assert fail: T.tvm_struct_get(T_concat, 0, 10, \22int32\22) == 1, Argument default_function.T_concat.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_concat, 0, 10, \22int32\22)\00", align 1
@.str.47 = private constant [194 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_concat, 0, 9, \22int32\22), Argument default_function.T_concat.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_concat, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.48 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.49 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr272 = alloca [9 x %0], align 8, !dbg !18
  %stack_tcode273 = alloca [9 x i32], align 4, !dbg !18
  %stack_tcode273.sub = getelementptr inbounds [9 x i32], [9 x i32]* %stack_tcode273, i64 0, i64 0
  %stack_value = bitcast [9 x %0]* %stack_value_void_ptr272 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 8, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %ph.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %ph.code1 = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %ph.code2 = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %ph.code3 = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 4, !dbg !18
  %ph.code4 = load i32, i32* %5, align 4, !dbg !18, !tbaa !41
  %6 = getelementptr inbounds i32, i32* %arg_type_ids, i64 5, !dbg !18
  %ph.code5 = load i32, i32* %6, align 4, !dbg !18, !tbaa !45
  %7 = getelementptr inbounds i32, i32* %arg_type_ids, i64 6, !dbg !18
  %ph.code6 = load i32, i32* %7, align 4, !dbg !18, !tbaa !47
  %8 = getelementptr inbounds i32, i32* %arg_type_ids, i64 7, !dbg !18
  %T_concat.code = load i32, i32* %8, align 4, !dbg !18, !tbaa !50
  %9 = bitcast i8* %args to %1**, !dbg !18
  %ph274 = load %1*, %1** %9, align 8, !dbg !18
  %10 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %11 = bitcast i8* %10 to %1**, !dbg !18
  %ph7275 = load %1*, %1** %11, align 8, !dbg !18
  %12 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %13 = bitcast i8* %12 to %1**, !dbg !18
  %ph8276 = load %1*, %1** %13, align 8, !dbg !18
  %14 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %15 = bitcast i8* %14 to %1**, !dbg !18
  %ph9277 = load %1*, %1** %15, align 8, !dbg !18
  %16 = getelementptr inbounds i8, i8* %args, i64 32, !dbg !18
  %17 = bitcast i8* %16 to %1**, !dbg !18
  %ph10278 = load %1*, %1** %17, align 8, !dbg !18
  %18 = getelementptr inbounds i8, i8* %args, i64 40, !dbg !18
  %19 = bitcast i8* %18 to %1**, !dbg !18
  %ph11279 = load %1*, %1** %19, align 8, !dbg !18
  %20 = getelementptr inbounds i8, i8* %args, i64 48, !dbg !18
  %21 = bitcast i8* %20 to %1**, !dbg !18
  %ph12280 = load %1*, %1** %21, align 8, !dbg !18
  %22 = getelementptr inbounds i8, i8* %args, i64 56, !dbg !18
  %23 = bitcast i8* %22 to %1**, !dbg !18
  %T_concat281 = load %1*, %1** %23, align 8, !dbg !18
  %24 = bitcast %1* %ph274 to float**, !dbg !18
  %ph_void_ptr282 = load float*, float** %24, align 8, !dbg !18
  %ptrint = ptrtoint float* %ph_void_ptr282 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %25 = getelementptr inbounds %1, %1* %ph274, i64 0, i32 4, !dbg !18
  %default_function.ph.shape = load i64*, i64** %25, align 8, !dbg !18
  %26 = getelementptr inbounds %1, %1* %ph274, i64 0, i32 5, !dbg !18
  %default_function.ph.strides = load i64*, i64** %26, align 8, !dbg !18
  %27 = getelementptr inbounds %1, %1* %ph274, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %27, align 4, !dbg !18
  %28 = bitcast %1* %ph7275 to float**, !dbg !18
  %ph_void_ptr14283 = load float*, float** %28, align 8, !dbg !18
  %ptrint16 = ptrtoint float* %ph_void_ptr14283 to i64, !dbg !18
  %maskedptr17 = and i64 %ptrint16, 63, !dbg !18
  %maskcond18 = icmp eq i64 %maskedptr17, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond18), !dbg !18
  %29 = getelementptr inbounds %1, %1* %ph7275, i64 0, i32 4, !dbg !18
  %default_function.ph.shape19 = load i64*, i64** %29, align 8, !dbg !18
  %30 = getelementptr inbounds %1, %1* %ph7275, i64 0, i32 5, !dbg !18
  %default_function.ph.strides20 = load i64*, i64** %30, align 8, !dbg !18
  %31 = bitcast %1* %ph8276 to float**, !dbg !18
  %ph_void_ptr21284 = load float*, float** %31, align 8, !dbg !18
  %ptrint23 = ptrtoint float* %ph_void_ptr21284 to i64, !dbg !18
  %maskedptr24 = and i64 %ptrint23, 63, !dbg !18
  %maskcond25 = icmp eq i64 %maskedptr24, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond25), !dbg !18
  %32 = getelementptr inbounds %1, %1* %ph8276, i64 0, i32 4, !dbg !18
  %default_function.ph.shape26 = load i64*, i64** %32, align 8, !dbg !18
  %33 = getelementptr inbounds %1, %1* %ph8276, i64 0, i32 5, !dbg !18
  %default_function.ph.strides27 = load i64*, i64** %33, align 8, !dbg !18
  %34 = bitcast %1* %ph9277 to float**, !dbg !18
  %ph_void_ptr28285 = load float*, float** %34, align 8, !dbg !18
  %ptrint30 = ptrtoint float* %ph_void_ptr28285 to i64, !dbg !18
  %maskedptr31 = and i64 %ptrint30, 63, !dbg !18
  %maskcond32 = icmp eq i64 %maskedptr31, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond32), !dbg !18
  %35 = getelementptr inbounds %1, %1* %ph9277, i64 0, i32 4, !dbg !18
  %default_function.ph.shape33 = load i64*, i64** %35, align 8, !dbg !18
  %36 = getelementptr inbounds %1, %1* %ph9277, i64 0, i32 5, !dbg !18
  %default_function.ph.strides34 = load i64*, i64** %36, align 8, !dbg !18
  %37 = bitcast %1* %ph10278 to float**, !dbg !18
  %ph_void_ptr35286 = load float*, float** %37, align 8, !dbg !18
  %ptrint37 = ptrtoint float* %ph_void_ptr35286 to i64, !dbg !18
  %maskedptr38 = and i64 %ptrint37, 63, !dbg !18
  %maskcond39 = icmp eq i64 %maskedptr38, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond39), !dbg !18
  %38 = getelementptr inbounds %1, %1* %ph10278, i64 0, i32 4, !dbg !18
  %default_function.ph.shape40 = load i64*, i64** %38, align 8, !dbg !18
  %39 = getelementptr inbounds %1, %1* %ph10278, i64 0, i32 5, !dbg !18
  %default_function.ph.strides41 = load i64*, i64** %39, align 8, !dbg !18
  %40 = bitcast %1* %ph11279 to float**, !dbg !18
  %ph_void_ptr42287 = load float*, float** %40, align 8, !dbg !18
  %ptrint44 = ptrtoint float* %ph_void_ptr42287 to i64, !dbg !18
  %maskedptr45 = and i64 %ptrint44, 63, !dbg !18
  %maskcond46 = icmp eq i64 %maskedptr45, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond46), !dbg !18
  %41 = getelementptr inbounds %1, %1* %ph11279, i64 0, i32 4, !dbg !18
  %default_function.ph.shape47 = load i64*, i64** %41, align 8, !dbg !18
  %42 = getelementptr inbounds %1, %1* %ph11279, i64 0, i32 5, !dbg !18
  %default_function.ph.strides48 = load i64*, i64** %42, align 8, !dbg !18
  %43 = bitcast %1* %ph12280 to float**, !dbg !18
  %ph_void_ptr49288 = load float*, float** %43, align 8, !dbg !18
  %ptrint51 = ptrtoint float* %ph_void_ptr49288 to i64, !dbg !18
  %maskedptr52 = and i64 %ptrint51, 63, !dbg !18
  %maskcond53 = icmp eq i64 %maskedptr52, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond53), !dbg !18
  %44 = getelementptr inbounds %1, %1* %ph12280, i64 0, i32 4, !dbg !18
  %default_function.ph.shape54 = load i64*, i64** %44, align 8, !dbg !18
  %45 = getelementptr inbounds %1, %1* %ph12280, i64 0, i32 5, !dbg !18
  %default_function.ph.strides55 = load i64*, i64** %45, align 8, !dbg !18
  %46 = bitcast %1* %T_concat281 to float**, !dbg !18
  %T_concat_void_ptr289 = load float*, float** %46, align 8, !dbg !18
  %ptrint57 = ptrtoint float* %T_concat_void_ptr289 to i64, !dbg !18
  %maskedptr58 = and i64 %ptrint57, 63, !dbg !18
  %maskcond59 = icmp eq i64 %maskedptr58, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond59), !dbg !18
  %47 = getelementptr inbounds %1, %1* %T_concat281, i64 0, i32 4, !dbg !18
  %default_function.T_concat.shape = load i64*, i64** %47, align 8, !dbg !18
  %48 = getelementptr inbounds %1, %1* %T_concat281, i64 0, i32 5, !dbg !18
  %default_function.T_concat.strides = load i64*, i64** %48, align 8, !dbg !18
  switch i32 %ph.code, label %assert_fail60 [
    i32 13, label %assert_end61
    i32 7, label %assert_end61
    i32 4, label %assert_end61
    i32 3, label %assert_end61
  ], !dbg !18

assert_fail60:                                    ; preds = %assert_end
  %49 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %49(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end61:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %ph.code1, label %assert_fail62 [
    i32 13, label %assert_end63
    i32 7, label %assert_end63
    i32 4, label %assert_end63
    i32 3, label %assert_end63
  ], !dbg !18

assert_fail62:                                    ; preds = %assert_end61
  %50 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %50(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end63:                                     ; preds = %assert_end61, %assert_end61, %assert_end61, %assert_end61
  switch i32 %ph.code2, label %assert_fail64 [
    i32 13, label %assert_end65
    i32 7, label %assert_end65
    i32 4, label %assert_end65
    i32 3, label %assert_end65
  ], !dbg !18

assert_fail64:                                    ; preds = %assert_end63
  %51 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %51(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end65:                                     ; preds = %assert_end63, %assert_end63, %assert_end63, %assert_end63
  switch i32 %ph.code3, label %assert_fail66 [
    i32 13, label %assert_end67
    i32 7, label %assert_end67
    i32 4, label %assert_end67
    i32 3, label %assert_end67
  ], !dbg !18

assert_fail66:                                    ; preds = %assert_end65
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %52(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end67:                                     ; preds = %assert_end65, %assert_end65, %assert_end65, %assert_end65
  switch i32 %ph.code4, label %assert_fail68 [
    i32 13, label %assert_end69
    i32 7, label %assert_end69
    i32 4, label %assert_end69
    i32 3, label %assert_end69
  ], !dbg !18

assert_fail68:                                    ; preds = %assert_end67
  %53 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %53(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end69:                                     ; preds = %assert_end67, %assert_end67, %assert_end67, %assert_end67
  switch i32 %ph.code5, label %assert_fail70 [
    i32 13, label %assert_end71
    i32 7, label %assert_end71
    i32 4, label %assert_end71
    i32 3, label %assert_end71
  ], !dbg !18

assert_fail70:                                    ; preds = %assert_end69
  %54 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %54(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end71:                                     ; preds = %assert_end69, %assert_end69, %assert_end69, %assert_end69
  switch i32 %ph.code6, label %assert_fail72 [
    i32 13, label %assert_end73
    i32 7, label %assert_end73
    i32 4, label %assert_end73
    i32 3, label %assert_end73
  ], !dbg !18

assert_fail72:                                    ; preds = %assert_end71
  %55 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %55(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end73:                                     ; preds = %assert_end71, %assert_end71, %assert_end71, %assert_end71
  switch i32 %T_concat.code, label %assert_fail74 [
    i32 13, label %assert_end75
    i32 7, label %assert_end75
    i32 4, label %assert_end75
    i32 3, label %assert_end75
  ], !dbg !18

assert_fail74:                                    ; preds = %assert_end73
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %56(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end75:                                     ; preds = %assert_end73, %assert_end73, %assert_end73, %assert_end73
  %57 = getelementptr inbounds %1, %1* %ph274, i64 0, i32 2, !dbg !18
  %58 = load i32, i32* %57, align 4, !dbg !18
  %59 = icmp eq i32 %58, 4, !dbg !18
  br i1 %59, label %assert_end79, label %assert_fail76, !dbg !18, !prof !19

assert_fail76:                                    ; preds = %assert_end75
  %60 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %60(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end79:                                     ; preds = %assert_end75
  %61 = getelementptr inbounds %1, %1* %ph274, i64 0, i32 3, i32 2, !dbg !18
  %62 = load i16, i16* %61, align 2, !dbg !18
  %63 = icmp eq i16 %62, 1, !dbg !18
  %64 = getelementptr inbounds %1, %1* %ph274, i64 0, i32 3, i32 1, !dbg !18
  %65 = load i8, i8* %64, align 1, !dbg !18
  %66 = icmp eq i8 %65, 32, !dbg !18
  %67 = getelementptr inbounds %1, %1* %ph274, i64 0, i32 3, i32 0, !dbg !18
  %68 = load i8, i8* %67, align 1, !dbg !18
  %69 = icmp eq i8 %68, 2, !dbg !18
  %70 = and i1 %66, %69, !dbg !18
  %71 = and i1 %63, %70, !dbg !18
  br i1 %71, label %assert_end81, label %assert_fail80, !dbg !18, !prof !19

assert_fail80:                                    ; preds = %assert_end79
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %72(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end81:                                     ; preds = %assert_end79
  %73 = load i64, i64* %default_function.ph.shape, align 8, !dbg !18, !tbaa !52
  %74 = trunc i64 %73 to i32, !dbg !18
  %75 = icmp eq i32 %74, 1, !dbg !18
  br i1 %75, label %assert_end83, label %assert_fail82, !dbg !18, !prof !19

assert_fail82:                                    ; preds = %assert_end81
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %76(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end83:                                     ; preds = %assert_end81
  %77 = getelementptr inbounds i64, i64* %default_function.ph.shape, i64 1, !dbg !18
  %78 = load i64, i64* %77, align 8, !dbg !18, !tbaa !62
  %79 = trunc i64 %78 to i32, !dbg !18
  %80 = icmp eq i32 %79, 128, !dbg !18
  br i1 %80, label %assert_end85, label %assert_fail84, !dbg !18, !prof !19

assert_fail84:                                    ; preds = %assert_end83
  %81 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %81(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end85:                                     ; preds = %assert_end83
  %82 = getelementptr inbounds i64, i64* %default_function.ph.shape, i64 2, !dbg !18
  %83 = load i64, i64* %82, align 8, !dbg !18, !tbaa !64
  %84 = trunc i64 %83 to i32, !dbg !18
  %85 = icmp eq i32 %84, 128, !dbg !18
  br i1 %85, label %assert_end87, label %assert_fail86, !dbg !18, !prof !19

assert_fail86:                                    ; preds = %assert_end85
  %86 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %86(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end87:                                     ; preds = %assert_end85
  %87 = getelementptr inbounds i64, i64* %default_function.ph.shape, i64 3, !dbg !18
  %88 = load i64, i64* %87, align 8, !dbg !18, !tbaa !67
  %89 = trunc i64 %88 to i32, !dbg !18
  %90 = icmp eq i32 %89, 192, !dbg !18
  br i1 %90, label %assert_end89, label %assert_fail88, !dbg !18, !prof !19

assert_fail88:                                    ; preds = %assert_end87
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %91(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end89:                                     ; preds = %assert_end87
  %92 = icmp eq i64* %default_function.ph.strides, null, !dbg !18
  br i1 %92, label %if_end, label %if_then, !dbg !18, !prof !69

if_then:                                          ; preds = %assert_end89
  %93 = getelementptr inbounds i64, i64* %default_function.ph.strides, i64 1, !dbg !18
  %94 = load i64, i64* %93, align 8, !dbg !18, !tbaa !70
  %95 = trunc i64 %94 to i32, !dbg !18
  %96 = icmp eq i32 %95, 24576, !dbg !18
  %97 = getelementptr inbounds i64, i64* %default_function.ph.strides, i64 2, !dbg !18
  %98 = load i64, i64* %97, align 8, !dbg !18, !tbaa !80
  %99 = trunc i64 %98 to i32, !dbg !18
  %100 = icmp eq i32 %99, 192, !dbg !18
  %101 = getelementptr inbounds i64, i64* %default_function.ph.strides, i64 3, !dbg !18
  %102 = load i64, i64* %101, align 8, !dbg !18, !tbaa !83
  %103 = trunc i64 %102 to i32, !dbg !18
  %104 = icmp eq i32 %103, 1, !dbg !18
  %105 = and i1 %100, %104, !dbg !18
  %106 = and i1 %96, %105, !dbg !18
  br i1 %106, label %if_end, label %assert_fail90, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end89, %if_then
  %107 = getelementptr inbounds %1, %1* %ph274, i64 0, i32 6, !dbg !18
  %108 = load i64, i64* %107, align 8, !dbg !18
  %109 = icmp eq i64 %108, 0, !dbg !18
  br i1 %109, label %assert_end93, label %assert_fail92, !dbg !18, !prof !19

assert_fail90:                                    ; preds = %if_then
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %110(i8* getelementptr inbounds ([245 x i8], [245 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail92:                                    ; preds = %if_end
  %111 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %111(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end93:                                     ; preds = %if_end
  %112 = getelementptr inbounds %1, %1* %ph274, i64 0, i32 1, i32 0, !dbg !18
  %113 = load i32, i32* %112, align 4, !dbg !18
  %114 = icmp eq i32 %113, 1, !dbg !18
  br i1 %114, label %assert_end95, label %assert_fail94, !dbg !18, !prof !19

assert_fail94:                                    ; preds = %assert_end93
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %115(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end95:                                     ; preds = %assert_end93
  %116 = getelementptr inbounds %1, %1* %ph7275, i64 0, i32 2, !dbg !18
  %117 = load i32, i32* %116, align 4, !dbg !18
  %118 = icmp eq i32 %117, 4, !dbg !18
  br i1 %118, label %assert_end99, label %assert_fail96, !dbg !18, !prof !19

assert_fail96:                                    ; preds = %assert_end95
  %119 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %119(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end99:                                     ; preds = %assert_end95
  %120 = getelementptr inbounds %1, %1* %ph7275, i64 0, i32 3, i32 2, !dbg !18
  %121 = load i16, i16* %120, align 2, !dbg !18
  %122 = icmp eq i16 %121, 1, !dbg !18
  %123 = getelementptr inbounds %1, %1* %ph7275, i64 0, i32 3, i32 1, !dbg !18
  %124 = load i8, i8* %123, align 1, !dbg !18
  %125 = icmp eq i8 %124, 32, !dbg !18
  %126 = getelementptr inbounds %1, %1* %ph7275, i64 0, i32 3, i32 0, !dbg !18
  %127 = load i8, i8* %126, align 1, !dbg !18
  %128 = icmp eq i8 %127, 2, !dbg !18
  %129 = and i1 %125, %128, !dbg !18
  %130 = and i1 %122, %129, !dbg !18
  br i1 %130, label %assert_end101, label %assert_fail100, !dbg !18, !prof !19

assert_fail100:                                   ; preds = %assert_end99
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %131(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end101:                                    ; preds = %assert_end99
  %132 = load i64, i64* %default_function.ph.shape19, align 8, !dbg !18, !tbaa !85
  %133 = trunc i64 %132 to i32, !dbg !18
  %134 = icmp eq i32 %133, 1, !dbg !18
  br i1 %134, label %assert_end103, label %assert_fail102, !dbg !18, !prof !19

assert_fail102:                                   ; preds = %assert_end101
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %135(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end103:                                    ; preds = %assert_end101
  %136 = getelementptr inbounds i64, i64* %default_function.ph.shape19, i64 1, !dbg !18
  %137 = load i64, i64* %136, align 8, !dbg !18, !tbaa !95
  %138 = trunc i64 %137 to i32, !dbg !18
  %139 = icmp eq i32 %138, 1, !dbg !18
  br i1 %139, label %assert_end105, label %assert_fail104, !dbg !18, !prof !19

assert_fail104:                                   ; preds = %assert_end103
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %140(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end105:                                    ; preds = %assert_end103
  %141 = getelementptr inbounds i64, i64* %default_function.ph.shape19, i64 2, !dbg !18
  %142 = load i64, i64* %141, align 8, !dbg !18, !tbaa !97
  %143 = trunc i64 %142 to i32, !dbg !18
  %144 = icmp eq i32 %143, 192, !dbg !18
  br i1 %144, label %assert_end107, label %assert_fail106, !dbg !18, !prof !19

assert_fail106:                                   ; preds = %assert_end105
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %145(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end107:                                    ; preds = %assert_end105
  %146 = getelementptr inbounds i64, i64* %default_function.ph.shape19, i64 3, !dbg !18
  %147 = load i64, i64* %146, align 8, !dbg !18, !tbaa !100
  %148 = trunc i64 %147 to i32, !dbg !18
  %149 = icmp eq i32 %148, 64, !dbg !18
  br i1 %149, label %assert_end109, label %assert_fail108, !dbg !18, !prof !19

assert_fail108:                                   ; preds = %assert_end107
  %150 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %150(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end109:                                    ; preds = %assert_end107
  %151 = icmp eq i64* %default_function.ph.strides20, null, !dbg !18
  br i1 %151, label %if_end111, label %if_then110, !dbg !18, !prof !69

if_then110:                                       ; preds = %assert_end109
  %152 = getelementptr inbounds i64, i64* %default_function.ph.strides20, i64 2, !dbg !18
  %153 = load i64, i64* %152, align 8, !dbg !18, !tbaa !102
  %154 = trunc i64 %153 to i32, !dbg !18
  %155 = icmp eq i32 %154, 64, !dbg !18
  %156 = getelementptr inbounds i64, i64* %default_function.ph.strides20, i64 3, !dbg !18
  %157 = load i64, i64* %156, align 8, !dbg !18, !tbaa !112
  %158 = trunc i64 %157 to i32, !dbg !18
  %159 = icmp eq i32 %158, 1, !dbg !18
  %160 = and i1 %155, %159, !dbg !18
  br i1 %160, label %if_end111, label %assert_fail112, !dbg !18, !prof !19

if_end111:                                        ; preds = %assert_end109, %if_then110
  %161 = getelementptr inbounds %1, %1* %ph7275, i64 0, i32 6, !dbg !18
  %162 = load i64, i64* %161, align 8, !dbg !18
  %163 = icmp eq i64 %162, 0, !dbg !18
  br i1 %163, label %assert_end115, label %assert_fail114, !dbg !18, !prof !19

assert_fail112:                                   ; preds = %if_then110
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %164(i8* getelementptr inbounds ([183 x i8], [183 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail114:                                   ; preds = %if_end111
  %165 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %165(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end115:                                    ; preds = %if_end111
  %166 = getelementptr inbounds %1, %1* %ph7275, i64 0, i32 1, i32 0, !dbg !18
  %167 = load i32, i32* %166, align 4, !dbg !18
  %168 = icmp eq i32 %167, 1, !dbg !18
  br i1 %168, label %assert_end117, label %assert_fail116, !dbg !18, !prof !19

assert_fail116:                                   ; preds = %assert_end115
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %169(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end117:                                    ; preds = %assert_end115
  %170 = getelementptr inbounds %1, %1* %ph7275, i64 0, i32 1, i32 1, !dbg !18
  %171 = load i32, i32* %170, align 4, !dbg !18
  %172 = icmp eq i32 %dev_id, %171, !dbg !18
  br i1 %172, label %assert_end119, label %assert_fail118, !dbg !18, !prof !19

assert_fail118:                                   ; preds = %assert_end117
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %173(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end119:                                    ; preds = %assert_end117
  %174 = getelementptr inbounds %1, %1* %ph8276, i64 0, i32 2, !dbg !18
  %175 = load i32, i32* %174, align 4, !dbg !18
  %176 = icmp eq i32 %175, 4, !dbg !18
  br i1 %176, label %assert_end123, label %assert_fail120, !dbg !18, !prof !19

assert_fail120:                                   ; preds = %assert_end119
  %177 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %177(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end123:                                    ; preds = %assert_end119
  %178 = getelementptr inbounds %1, %1* %ph8276, i64 0, i32 3, i32 2, !dbg !18
  %179 = load i16, i16* %178, align 2, !dbg !18
  %180 = icmp eq i16 %179, 1, !dbg !18
  %181 = getelementptr inbounds %1, %1* %ph8276, i64 0, i32 3, i32 1, !dbg !18
  %182 = load i8, i8* %181, align 1, !dbg !18
  %183 = icmp eq i8 %182, 32, !dbg !18
  %184 = getelementptr inbounds %1, %1* %ph8276, i64 0, i32 3, i32 0, !dbg !18
  %185 = load i8, i8* %184, align 1, !dbg !18
  %186 = icmp eq i8 %185, 2, !dbg !18
  %187 = and i1 %183, %186, !dbg !18
  %188 = and i1 %180, %187, !dbg !18
  br i1 %188, label %assert_end125, label %assert_fail124, !dbg !18, !prof !19

assert_fail124:                                   ; preds = %assert_end123
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %189(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end125:                                    ; preds = %assert_end123
  %190 = load i64, i64* %default_function.ph.shape26, align 8, !dbg !18, !tbaa !114
  %191 = trunc i64 %190 to i32, !dbg !18
  %192 = icmp eq i32 %191, 1, !dbg !18
  br i1 %192, label %assert_end127, label %assert_fail126, !dbg !18, !prof !19

assert_fail126:                                   ; preds = %assert_end125
  %193 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %193(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end127:                                    ; preds = %assert_end125
  %194 = getelementptr inbounds i64, i64* %default_function.ph.shape26, i64 1, !dbg !18
  %195 = load i64, i64* %194, align 8, !dbg !18, !tbaa !124
  %196 = trunc i64 %195 to i32, !dbg !18
  %197 = icmp eq i32 %196, 1, !dbg !18
  br i1 %197, label %assert_end129, label %assert_fail128, !dbg !18, !prof !19

assert_fail128:                                   ; preds = %assert_end127
  %198 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %198(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end129:                                    ; preds = %assert_end127
  %199 = getelementptr inbounds i64, i64* %default_function.ph.shape26, i64 2, !dbg !18
  %200 = load i64, i64* %199, align 8, !dbg !18, !tbaa !126
  %201 = trunc i64 %200 to i32, !dbg !18
  %202 = icmp eq i32 %201, 192, !dbg !18
  br i1 %202, label %assert_end131, label %assert_fail130, !dbg !18, !prof !19

assert_fail130:                                   ; preds = %assert_end129
  %203 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %203(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end131:                                    ; preds = %assert_end129
  %204 = getelementptr inbounds i64, i64* %default_function.ph.shape26, i64 3, !dbg !18
  %205 = load i64, i64* %204, align 8, !dbg !18, !tbaa !129
  %206 = trunc i64 %205 to i32, !dbg !18
  %207 = icmp eq i32 %206, 96, !dbg !18
  br i1 %207, label %assert_end133, label %assert_fail132, !dbg !18, !prof !19

assert_fail132:                                   ; preds = %assert_end131
  %208 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %208(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end133:                                    ; preds = %assert_end131
  %209 = icmp eq i64* %default_function.ph.strides27, null, !dbg !18
  br i1 %209, label %if_end135, label %if_then134, !dbg !18, !prof !69

if_then134:                                       ; preds = %assert_end133
  %210 = getelementptr inbounds i64, i64* %default_function.ph.strides27, i64 2, !dbg !18
  %211 = load i64, i64* %210, align 8, !dbg !18, !tbaa !131
  %212 = trunc i64 %211 to i32, !dbg !18
  %213 = icmp eq i32 %212, 96, !dbg !18
  %214 = getelementptr inbounds i64, i64* %default_function.ph.strides27, i64 3, !dbg !18
  %215 = load i64, i64* %214, align 8, !dbg !18, !tbaa !141
  %216 = trunc i64 %215 to i32, !dbg !18
  %217 = icmp eq i32 %216, 1, !dbg !18
  %218 = and i1 %213, %217, !dbg !18
  br i1 %218, label %if_end135, label %assert_fail136, !dbg !18, !prof !19

if_end135:                                        ; preds = %assert_end133, %if_then134
  %219 = getelementptr inbounds %1, %1* %ph8276, i64 0, i32 6, !dbg !18
  %220 = load i64, i64* %219, align 8, !dbg !18
  %221 = icmp eq i64 %220, 0, !dbg !18
  br i1 %221, label %assert_end139, label %assert_fail138, !dbg !18, !prof !19

assert_fail136:                                   ; preds = %if_then134
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %222(i8* getelementptr inbounds ([183 x i8], [183 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail138:                                   ; preds = %if_end135
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %223(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end139:                                    ; preds = %if_end135
  %224 = getelementptr inbounds %1, %1* %ph8276, i64 0, i32 1, i32 0, !dbg !18
  %225 = load i32, i32* %224, align 4, !dbg !18
  %226 = icmp eq i32 %225, 1, !dbg !18
  br i1 %226, label %assert_end141, label %assert_fail140, !dbg !18, !prof !19

assert_fail140:                                   ; preds = %assert_end139
  %227 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %227(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end141:                                    ; preds = %assert_end139
  %228 = getelementptr inbounds %1, %1* %ph8276, i64 0, i32 1, i32 1, !dbg !18
  %229 = load i32, i32* %228, align 4, !dbg !18
  %230 = icmp eq i32 %dev_id, %229, !dbg !18
  br i1 %230, label %assert_end143, label %assert_fail142, !dbg !18, !prof !19

assert_fail142:                                   ; preds = %assert_end141
  %231 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %231(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end143:                                    ; preds = %assert_end141
  %232 = getelementptr inbounds %1, %1* %ph9277, i64 0, i32 2, !dbg !18
  %233 = load i32, i32* %232, align 4, !dbg !18
  %234 = icmp eq i32 %233, 4, !dbg !18
  br i1 %234, label %assert_end147, label %assert_fail144, !dbg !18, !prof !19

assert_fail144:                                   ; preds = %assert_end143
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %235(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end147:                                    ; preds = %assert_end143
  %236 = getelementptr inbounds %1, %1* %ph9277, i64 0, i32 3, i32 2, !dbg !18
  %237 = load i16, i16* %236, align 2, !dbg !18
  %238 = icmp eq i16 %237, 1, !dbg !18
  %239 = getelementptr inbounds %1, %1* %ph9277, i64 0, i32 3, i32 1, !dbg !18
  %240 = load i8, i8* %239, align 1, !dbg !18
  %241 = icmp eq i8 %240, 32, !dbg !18
  %242 = getelementptr inbounds %1, %1* %ph9277, i64 0, i32 3, i32 0, !dbg !18
  %243 = load i8, i8* %242, align 1, !dbg !18
  %244 = icmp eq i8 %243, 2, !dbg !18
  %245 = and i1 %241, %244, !dbg !18
  %246 = and i1 %238, %245, !dbg !18
  br i1 %246, label %assert_end149, label %assert_fail148, !dbg !18, !prof !19

assert_fail148:                                   ; preds = %assert_end147
  %247 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %247(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end149:                                    ; preds = %assert_end147
  %248 = load i64, i64* %default_function.ph.shape33, align 8, !dbg !18, !tbaa !143
  %249 = trunc i64 %248 to i32, !dbg !18
  %250 = icmp eq i32 %249, 3, !dbg !18
  br i1 %250, label %assert_end151, label %assert_fail150, !dbg !18, !prof !19

assert_fail150:                                   ; preds = %assert_end149
  %251 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %251(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end151:                                    ; preds = %assert_end149
  %252 = getelementptr inbounds i64, i64* %default_function.ph.shape33, i64 1, !dbg !18
  %253 = load i64, i64* %252, align 8, !dbg !18, !tbaa !153
  %254 = trunc i64 %253 to i32, !dbg !18
  %255 = icmp eq i32 %254, 3, !dbg !18
  br i1 %255, label %assert_end153, label %assert_fail152, !dbg !18, !prof !19

assert_fail152:                                   ; preds = %assert_end151
  %256 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %256(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end153:                                    ; preds = %assert_end151
  %257 = getelementptr inbounds i64, i64* %default_function.ph.shape33, i64 2, !dbg !18
  %258 = load i64, i64* %257, align 8, !dbg !18, !tbaa !155
  %259 = trunc i64 %258 to i32, !dbg !18
  %260 = icmp eq i32 %259, 96, !dbg !18
  br i1 %260, label %assert_end155, label %assert_fail154, !dbg !18, !prof !19

assert_fail154:                                   ; preds = %assert_end153
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %261(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end155:                                    ; preds = %assert_end153
  %262 = getelementptr inbounds i64, i64* %default_function.ph.shape33, i64 3, !dbg !18
  %263 = load i64, i64* %262, align 8, !dbg !18, !tbaa !158
  %264 = trunc i64 %263 to i32, !dbg !18
  %265 = icmp eq i32 %264, 128, !dbg !18
  br i1 %265, label %assert_end157, label %assert_fail156, !dbg !18, !prof !19

assert_fail156:                                   ; preds = %assert_end155
  %266 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %266(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end157:                                    ; preds = %assert_end155
  %267 = icmp eq i64* %default_function.ph.strides34, null, !dbg !18
  br i1 %267, label %if_end159, label %if_then158, !dbg !18, !prof !69

if_then158:                                       ; preds = %assert_end157
  %268 = bitcast i64* %default_function.ph.strides34 to <4 x i64>*, !dbg !18
  %269 = load <4 x i64>, <4 x i64>* %268, align 8, !dbg !18, !tbaa !160
  %270 = trunc <4 x i64> %269 to <4 x i32>, !dbg !18
  %271 = icmp eq <4 x i32> %270, <i32 36864, i32 12288, i32 128, i32 1>, !dbg !18
  %rdx.shuf292 = shufflevector <4 x i1> %271, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>, !dbg !18
  %bin.rdx293 = and <4 x i1> %271, %rdx.shuf292, !dbg !18
  %rdx.shuf294 = shufflevector <4 x i1> %bin.rdx293, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>, !dbg !18
  %bin.rdx295 = and <4 x i1> %bin.rdx293, %rdx.shuf294, !dbg !18
  %272 = extractelement <4 x i1> %bin.rdx295, i32 0, !dbg !18
  br i1 %272, label %if_end159, label %assert_fail160, !dbg !18, !prof !19

if_end159:                                        ; preds = %assert_end157, %if_then158
  %273 = getelementptr inbounds %1, %1* %ph9277, i64 0, i32 6, !dbg !18
  %274 = load i64, i64* %273, align 8, !dbg !18
  %275 = icmp eq i64 %274, 0, !dbg !18
  br i1 %275, label %assert_end163, label %assert_fail162, !dbg !18, !prof !19

assert_fail160:                                   ; preds = %if_then158
  %276 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %276(i8* getelementptr inbounds ([306 x i8], [306 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail162:                                   ; preds = %if_end159
  %277 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %277(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end163:                                    ; preds = %if_end159
  %278 = getelementptr inbounds %1, %1* %ph9277, i64 0, i32 1, i32 0, !dbg !18
  %279 = load i32, i32* %278, align 4, !dbg !18
  %280 = icmp eq i32 %279, 1, !dbg !18
  br i1 %280, label %assert_end165, label %assert_fail164, !dbg !18, !prof !19

assert_fail164:                                   ; preds = %assert_end163
  %281 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %281(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end165:                                    ; preds = %assert_end163
  %282 = getelementptr inbounds %1, %1* %ph9277, i64 0, i32 1, i32 1, !dbg !18
  %283 = load i32, i32* %282, align 4, !dbg !18
  %284 = icmp eq i32 %dev_id, %283, !dbg !18
  br i1 %284, label %assert_end167, label %assert_fail166, !dbg !18, !prof !19

assert_fail166:                                   ; preds = %assert_end165
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %285(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end167:                                    ; preds = %assert_end165
  %286 = getelementptr inbounds %1, %1* %ph10278, i64 0, i32 2, !dbg !18
  %287 = load i32, i32* %286, align 4, !dbg !18
  %288 = icmp eq i32 %287, 4, !dbg !18
  br i1 %288, label %assert_end171, label %assert_fail168, !dbg !18, !prof !19

assert_fail168:                                   ; preds = %assert_end167
  %289 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %289(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end171:                                    ; preds = %assert_end167
  %290 = getelementptr inbounds %1, %1* %ph10278, i64 0, i32 3, i32 2, !dbg !18
  %291 = load i16, i16* %290, align 2, !dbg !18
  %292 = icmp eq i16 %291, 1, !dbg !18
  %293 = getelementptr inbounds %1, %1* %ph10278, i64 0, i32 3, i32 1, !dbg !18
  %294 = load i8, i8* %293, align 1, !dbg !18
  %295 = icmp eq i8 %294, 32, !dbg !18
  %296 = getelementptr inbounds %1, %1* %ph10278, i64 0, i32 3, i32 0, !dbg !18
  %297 = load i8, i8* %296, align 1, !dbg !18
  %298 = icmp eq i8 %297, 2, !dbg !18
  %299 = and i1 %295, %298, !dbg !18
  %300 = and i1 %292, %299, !dbg !18
  br i1 %300, label %assert_end173, label %assert_fail172, !dbg !18, !prof !19

assert_fail172:                                   ; preds = %assert_end171
  %301 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %301(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end173:                                    ; preds = %assert_end171
  %302 = load i64, i64* %default_function.ph.shape40, align 8, !dbg !18, !tbaa !168
  %303 = trunc i64 %302 to i32, !dbg !18
  %304 = icmp eq i32 %303, 1, !dbg !18
  br i1 %304, label %assert_end175, label %assert_fail174, !dbg !18, !prof !19

assert_fail174:                                   ; preds = %assert_end173
  %305 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %305(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end175:                                    ; preds = %assert_end173
  %306 = getelementptr inbounds i64, i64* %default_function.ph.shape40, i64 1, !dbg !18
  %307 = load i64, i64* %306, align 8, !dbg !18, !tbaa !178
  %308 = trunc i64 %307 to i32, !dbg !18
  %309 = icmp eq i32 %308, 1, !dbg !18
  br i1 %309, label %assert_end177, label %assert_fail176, !dbg !18, !prof !19

assert_fail176:                                   ; preds = %assert_end175
  %310 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %310(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end177:                                    ; preds = %assert_end175
  %311 = getelementptr inbounds i64, i64* %default_function.ph.shape40, i64 2, !dbg !18
  %312 = load i64, i64* %311, align 8, !dbg !18, !tbaa !180
  %313 = trunc i64 %312 to i32, !dbg !18
  %314 = icmp eq i32 %313, 192, !dbg !18
  br i1 %314, label %assert_end179, label %assert_fail178, !dbg !18, !prof !19

assert_fail178:                                   ; preds = %assert_end177
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %315(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end179:                                    ; preds = %assert_end177
  %316 = getelementptr inbounds i64, i64* %default_function.ph.shape40, i64 3, !dbg !18
  %317 = load i64, i64* %316, align 8, !dbg !18, !tbaa !183
  %318 = trunc i64 %317 to i32, !dbg !18
  %319 = icmp eq i32 %318, 16, !dbg !18
  br i1 %319, label %assert_end181, label %assert_fail180, !dbg !18, !prof !19

assert_fail180:                                   ; preds = %assert_end179
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %320(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end181:                                    ; preds = %assert_end179
  %321 = icmp eq i64* %default_function.ph.strides41, null, !dbg !18
  br i1 %321, label %if_end183, label %if_then182, !dbg !18, !prof !69

if_then182:                                       ; preds = %assert_end181
  %322 = getelementptr inbounds i64, i64* %default_function.ph.strides41, i64 2, !dbg !18
  %323 = load i64, i64* %322, align 8, !dbg !18, !tbaa !185
  %324 = trunc i64 %323 to i32, !dbg !18
  %325 = icmp eq i32 %324, 16, !dbg !18
  %326 = getelementptr inbounds i64, i64* %default_function.ph.strides41, i64 3, !dbg !18
  %327 = load i64, i64* %326, align 8, !dbg !18, !tbaa !195
  %328 = trunc i64 %327 to i32, !dbg !18
  %329 = icmp eq i32 %328, 1, !dbg !18
  %330 = and i1 %325, %329, !dbg !18
  br i1 %330, label %if_end183, label %assert_fail184, !dbg !18, !prof !19

if_end183:                                        ; preds = %assert_end181, %if_then182
  %331 = getelementptr inbounds %1, %1* %ph10278, i64 0, i32 6, !dbg !18
  %332 = load i64, i64* %331, align 8, !dbg !18
  %333 = icmp eq i64 %332, 0, !dbg !18
  br i1 %333, label %assert_end187, label %assert_fail186, !dbg !18, !prof !19

assert_fail184:                                   ; preds = %if_then182
  %334 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %334(i8* getelementptr inbounds ([183 x i8], [183 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail186:                                   ; preds = %if_end183
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %335(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end187:                                    ; preds = %if_end183
  %336 = getelementptr inbounds %1, %1* %ph10278, i64 0, i32 1, i32 0, !dbg !18
  %337 = load i32, i32* %336, align 4, !dbg !18
  %338 = icmp eq i32 %337, 1, !dbg !18
  br i1 %338, label %assert_end189, label %assert_fail188, !dbg !18, !prof !19

assert_fail188:                                   ; preds = %assert_end187
  %339 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %339(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end189:                                    ; preds = %assert_end187
  %340 = getelementptr inbounds %1, %1* %ph10278, i64 0, i32 1, i32 1, !dbg !18
  %341 = load i32, i32* %340, align 4, !dbg !18
  %342 = icmp eq i32 %dev_id, %341, !dbg !18
  br i1 %342, label %assert_end191, label %assert_fail190, !dbg !18, !prof !19

assert_fail190:                                   ; preds = %assert_end189
  %343 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %343(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end191:                                    ; preds = %assert_end189
  %344 = getelementptr inbounds %1, %1* %ph11279, i64 0, i32 2, !dbg !18
  %345 = load i32, i32* %344, align 4, !dbg !18
  %346 = icmp eq i32 %345, 4, !dbg !18
  br i1 %346, label %assert_end195, label %assert_fail192, !dbg !18, !prof !19

assert_fail192:                                   ; preds = %assert_end191
  %347 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %347(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end195:                                    ; preds = %assert_end191
  %348 = getelementptr inbounds %1, %1* %ph11279, i64 0, i32 3, i32 2, !dbg !18
  %349 = load i16, i16* %348, align 2, !dbg !18
  %350 = icmp eq i16 %349, 1, !dbg !18
  %351 = getelementptr inbounds %1, %1* %ph11279, i64 0, i32 3, i32 1, !dbg !18
  %352 = load i8, i8* %351, align 1, !dbg !18
  %353 = icmp eq i8 %352, 32, !dbg !18
  %354 = getelementptr inbounds %1, %1* %ph11279, i64 0, i32 3, i32 0, !dbg !18
  %355 = load i8, i8* %354, align 1, !dbg !18
  %356 = icmp eq i8 %355, 2, !dbg !18
  %357 = and i1 %353, %356, !dbg !18
  %358 = and i1 %350, %357, !dbg !18
  br i1 %358, label %assert_end197, label %assert_fail196, !dbg !18, !prof !19

assert_fail196:                                   ; preds = %assert_end195
  %359 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %359(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end197:                                    ; preds = %assert_end195
  %360 = load i64, i64* %default_function.ph.shape47, align 8, !dbg !18, !tbaa !197
  %361 = trunc i64 %360 to i32, !dbg !18
  %362 = icmp eq i32 %361, 5, !dbg !18
  br i1 %362, label %assert_end199, label %assert_fail198, !dbg !18, !prof !19

assert_fail198:                                   ; preds = %assert_end197
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %363(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end199:                                    ; preds = %assert_end197
  %364 = getelementptr inbounds i64, i64* %default_function.ph.shape47, i64 1, !dbg !18
  %365 = load i64, i64* %364, align 8, !dbg !18, !tbaa !207
  %366 = trunc i64 %365 to i32, !dbg !18
  %367 = icmp eq i32 %366, 5, !dbg !18
  br i1 %367, label %assert_end201, label %assert_fail200, !dbg !18, !prof !19

assert_fail200:                                   ; preds = %assert_end199
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %368(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end201:                                    ; preds = %assert_end199
  %369 = getelementptr inbounds i64, i64* %default_function.ph.shape47, i64 2, !dbg !18
  %370 = load i64, i64* %369, align 8, !dbg !18, !tbaa !209
  %371 = trunc i64 %370 to i32, !dbg !18
  %372 = icmp eq i32 %371, 16, !dbg !18
  br i1 %372, label %assert_end203, label %assert_fail202, !dbg !18, !prof !19

assert_fail202:                                   ; preds = %assert_end201
  %373 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %373(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end203:                                    ; preds = %assert_end201
  %374 = getelementptr inbounds i64, i64* %default_function.ph.shape47, i64 3, !dbg !18
  %375 = load i64, i64* %374, align 8, !dbg !18, !tbaa !212
  %376 = trunc i64 %375 to i32, !dbg !18
  %377 = icmp eq i32 %376, 32, !dbg !18
  br i1 %377, label %assert_end205, label %assert_fail204, !dbg !18, !prof !19

assert_fail204:                                   ; preds = %assert_end203
  %378 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %378(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end205:                                    ; preds = %assert_end203
  %379 = icmp eq i64* %default_function.ph.strides48, null, !dbg !18
  br i1 %379, label %if_end207, label %if_then206, !dbg !18, !prof !69

if_then206:                                       ; preds = %assert_end205
  %380 = bitcast i64* %default_function.ph.strides48 to <4 x i64>*, !dbg !18
  %381 = load <4 x i64>, <4 x i64>* %380, align 8, !dbg !18, !tbaa !214
  %382 = trunc <4 x i64> %381 to <4 x i32>, !dbg !18
  %383 = icmp eq <4 x i32> %382, <i32 2560, i32 512, i32 32, i32 1>, !dbg !18
  %rdx.shuf = shufflevector <4 x i1> %383, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>, !dbg !18
  %bin.rdx = and <4 x i1> %383, %rdx.shuf, !dbg !18
  %rdx.shuf290 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>, !dbg !18
  %bin.rdx291 = and <4 x i1> %bin.rdx, %rdx.shuf290, !dbg !18
  %384 = extractelement <4 x i1> %bin.rdx291, i32 0, !dbg !18
  br i1 %384, label %if_end207, label %assert_fail208, !dbg !18, !prof !19

if_end207:                                        ; preds = %assert_end205, %if_then206
  %385 = getelementptr inbounds %1, %1* %ph11279, i64 0, i32 6, !dbg !18
  %386 = load i64, i64* %385, align 8, !dbg !18
  %387 = icmp eq i64 %386, 0, !dbg !18
  br i1 %387, label %assert_end211, label %assert_fail210, !dbg !18, !prof !19

assert_fail208:                                   ; preds = %if_then206
  %388 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %388(i8* getelementptr inbounds ([302 x i8], [302 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail210:                                   ; preds = %if_end207
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %389(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end211:                                    ; preds = %if_end207
  %390 = getelementptr inbounds %1, %1* %ph11279, i64 0, i32 1, i32 0, !dbg !18
  %391 = load i32, i32* %390, align 4, !dbg !18
  %392 = icmp eq i32 %391, 1, !dbg !18
  br i1 %392, label %assert_end213, label %assert_fail212, !dbg !18, !prof !19

assert_fail212:                                   ; preds = %assert_end211
  %393 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %393(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end213:                                    ; preds = %assert_end211
  %394 = getelementptr inbounds %1, %1* %ph11279, i64 0, i32 1, i32 1, !dbg !18
  %395 = load i32, i32* %394, align 4, !dbg !18
  %396 = icmp eq i32 %dev_id, %395, !dbg !18
  br i1 %396, label %assert_end215, label %assert_fail214, !dbg !18, !prof !19

assert_fail214:                                   ; preds = %assert_end213
  %397 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %397(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end215:                                    ; preds = %assert_end213
  %398 = getelementptr inbounds %1, %1* %ph12280, i64 0, i32 2, !dbg !18
  %399 = load i32, i32* %398, align 4, !dbg !18
  %400 = icmp eq i32 %399, 4, !dbg !18
  br i1 %400, label %assert_end219, label %assert_fail216, !dbg !18, !prof !19

assert_fail216:                                   ; preds = %assert_end215
  %401 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %401(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end219:                                    ; preds = %assert_end215
  %402 = getelementptr inbounds %1, %1* %ph12280, i64 0, i32 3, i32 2, !dbg !18
  %403 = load i16, i16* %402, align 2, !dbg !18
  %404 = icmp eq i16 %403, 1, !dbg !18
  %405 = getelementptr inbounds %1, %1* %ph12280, i64 0, i32 3, i32 1, !dbg !18
  %406 = load i8, i8* %405, align 1, !dbg !18
  %407 = icmp eq i8 %406, 32, !dbg !18
  %408 = getelementptr inbounds %1, %1* %ph12280, i64 0, i32 3, i32 0, !dbg !18
  %409 = load i8, i8* %408, align 1, !dbg !18
  %410 = icmp eq i8 %409, 2, !dbg !18
  %411 = and i1 %407, %410, !dbg !18
  %412 = and i1 %404, %411, !dbg !18
  br i1 %412, label %assert_end221, label %assert_fail220, !dbg !18, !prof !19

assert_fail220:                                   ; preds = %assert_end219
  %413 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %413(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end221:                                    ; preds = %assert_end219
  %414 = load i64, i64* %default_function.ph.shape54, align 8, !dbg !18, !tbaa !222
  %415 = trunc i64 %414 to i32, !dbg !18
  %416 = icmp eq i32 %415, 1, !dbg !18
  br i1 %416, label %assert_end223, label %assert_fail222, !dbg !18, !prof !19

assert_fail222:                                   ; preds = %assert_end221
  %417 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %417(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end223:                                    ; preds = %assert_end221
  %418 = getelementptr inbounds i64, i64* %default_function.ph.shape54, i64 1, !dbg !18
  %419 = load i64, i64* %418, align 8, !dbg !18, !tbaa !232
  %420 = trunc i64 %419 to i32, !dbg !18
  %421 = icmp eq i32 %420, 1, !dbg !18
  br i1 %421, label %assert_end225, label %assert_fail224, !dbg !18, !prof !19

assert_fail224:                                   ; preds = %assert_end223
  %422 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %422(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end225:                                    ; preds = %assert_end223
  %423 = getelementptr inbounds i64, i64* %default_function.ph.shape54, i64 2, !dbg !18
  %424 = load i64, i64* %423, align 8, !dbg !18, !tbaa !234
  %425 = trunc i64 %424 to i32, !dbg !18
  %426 = icmp eq i32 %425, 192, !dbg !18
  br i1 %426, label %assert_end227, label %assert_fail226, !dbg !18, !prof !19

assert_fail226:                                   ; preds = %assert_end225
  %427 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %427(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end227:                                    ; preds = %assert_end225
  %428 = getelementptr inbounds i64, i64* %default_function.ph.shape54, i64 3, !dbg !18
  %429 = load i64, i64* %428, align 8, !dbg !18, !tbaa !237
  %430 = trunc i64 %429 to i32, !dbg !18
  %431 = icmp eq i32 %430, 32, !dbg !18
  br i1 %431, label %assert_end229, label %assert_fail228, !dbg !18, !prof !19

assert_fail228:                                   ; preds = %assert_end227
  %432 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %432(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end229:                                    ; preds = %assert_end227
  %433 = icmp eq i64* %default_function.ph.strides55, null, !dbg !18
  br i1 %433, label %if_end231, label %if_then230, !dbg !18, !prof !69

if_then230:                                       ; preds = %assert_end229
  %434 = getelementptr inbounds i64, i64* %default_function.ph.strides55, i64 2, !dbg !18
  %435 = load i64, i64* %434, align 8, !dbg !18, !tbaa !239
  %436 = trunc i64 %435 to i32, !dbg !18
  %437 = icmp eq i32 %436, 32, !dbg !18
  %438 = getelementptr inbounds i64, i64* %default_function.ph.strides55, i64 3, !dbg !18
  %439 = load i64, i64* %438, align 8, !dbg !18, !tbaa !249
  %440 = trunc i64 %439 to i32, !dbg !18
  %441 = icmp eq i32 %440, 1, !dbg !18
  %442 = and i1 %437, %441, !dbg !18
  br i1 %442, label %if_end231, label %assert_fail232, !dbg !18, !prof !19

if_end231:                                        ; preds = %assert_end229, %if_then230
  %443 = getelementptr inbounds %1, %1* %ph12280, i64 0, i32 6, !dbg !18
  %444 = load i64, i64* %443, align 8, !dbg !18
  %445 = icmp eq i64 %444, 0, !dbg !18
  br i1 %445, label %assert_end235, label %assert_fail234, !dbg !18, !prof !19

assert_fail232:                                   ; preds = %if_then230
  %446 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %446(i8* getelementptr inbounds ([183 x i8], [183 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail234:                                   ; preds = %if_end231
  %447 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %447(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end235:                                    ; preds = %if_end231
  %448 = getelementptr inbounds %1, %1* %ph12280, i64 0, i32 1, i32 0, !dbg !18
  %449 = load i32, i32* %448, align 4, !dbg !18
  %450 = icmp eq i32 %449, 1, !dbg !18
  br i1 %450, label %assert_end237, label %assert_fail236, !dbg !18, !prof !19

assert_fail236:                                   ; preds = %assert_end235
  %451 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %451(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end237:                                    ; preds = %assert_end235
  %452 = getelementptr inbounds %1, %1* %ph12280, i64 0, i32 1, i32 1, !dbg !18
  %453 = load i32, i32* %452, align 4, !dbg !18
  %454 = icmp eq i32 %dev_id, %453, !dbg !18
  br i1 %454, label %assert_end239, label %assert_fail238, !dbg !18, !prof !19

assert_fail238:                                   ; preds = %assert_end237
  %455 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %455(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end239:                                    ; preds = %assert_end237
  %456 = getelementptr inbounds %1, %1* %T_concat281, i64 0, i32 2, !dbg !18
  %457 = load i32, i32* %456, align 4, !dbg !18
  %458 = icmp eq i32 %457, 4, !dbg !18
  br i1 %458, label %assert_end243, label %assert_fail240, !dbg !18, !prof !19

assert_fail240:                                   ; preds = %assert_end239
  %459 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %459(i8* getelementptr inbounds ([115 x i8], [115 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end243:                                    ; preds = %assert_end239
  %460 = getelementptr inbounds %1, %1* %T_concat281, i64 0, i32 3, i32 2, !dbg !18
  %461 = load i16, i16* %460, align 2, !dbg !18
  %462 = icmp eq i16 %461, 1, !dbg !18
  %463 = getelementptr inbounds %1, %1* %T_concat281, i64 0, i32 3, i32 1, !dbg !18
  %464 = load i8, i8* %463, align 1, !dbg !18
  %465 = icmp eq i8 %464, 32, !dbg !18
  %466 = getelementptr inbounds %1, %1* %T_concat281, i64 0, i32 3, i32 0, !dbg !18
  %467 = load i8, i8* %466, align 1, !dbg !18
  %468 = icmp eq i8 %467, 2, !dbg !18
  %469 = and i1 %465, %468, !dbg !18
  %470 = and i1 %462, %469, !dbg !18
  br i1 %470, label %assert_end245, label %assert_fail244, !dbg !18, !prof !19

assert_fail244:                                   ; preds = %assert_end243
  %471 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %471(i8* getelementptr inbounds ([251 x i8], [251 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end245:                                    ; preds = %assert_end243
  %472 = load i64, i64* %default_function.T_concat.shape, align 8, !dbg !18, !tbaa !251
  %473 = trunc i64 %472 to i32, !dbg !18
  %474 = icmp eq i32 %473, 1, !dbg !18
  br i1 %474, label %assert_end247, label %assert_fail246, !dbg !18, !prof !19

assert_fail246:                                   ; preds = %assert_end245
  %475 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %475(i8* getelementptr inbounds ([203 x i8], [203 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end247:                                    ; preds = %assert_end245
  %476 = getelementptr inbounds i64, i64* %default_function.T_concat.shape, i64 1, !dbg !18
  %477 = load i64, i64* %476, align 8, !dbg !18, !tbaa !261
  %478 = trunc i64 %477 to i32, !dbg !18
  %479 = icmp eq i32 %478, 128, !dbg !18
  br i1 %479, label %assert_end249, label %assert_fail248, !dbg !18, !prof !19

assert_fail248:                                   ; preds = %assert_end247
  %480 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %480(i8* getelementptr inbounds ([207 x i8], [207 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end249:                                    ; preds = %assert_end247
  %481 = getelementptr inbounds i64, i64* %default_function.T_concat.shape, i64 2, !dbg !18
  %482 = load i64, i64* %481, align 8, !dbg !18, !tbaa !263
  %483 = trunc i64 %482 to i32, !dbg !18
  %484 = icmp eq i32 %483, 128, !dbg !18
  br i1 %484, label %assert_end251, label %assert_fail250, !dbg !18, !prof !19

assert_fail250:                                   ; preds = %assert_end249
  %485 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %485(i8* getelementptr inbounds ([207 x i8], [207 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end251:                                    ; preds = %assert_end249
  %486 = getelementptr inbounds i64, i64* %default_function.T_concat.shape, i64 3, !dbg !18
  %487 = load i64, i64* %486, align 8, !dbg !18, !tbaa !266
  %488 = trunc i64 %487 to i32, !dbg !18
  %489 = icmp eq i32 %488, 256, !dbg !18
  br i1 %489, label %assert_end253, label %assert_fail252, !dbg !18, !prof !19

assert_fail252:                                   ; preds = %assert_end251
  %490 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %490(i8* getelementptr inbounds ([207 x i8], [207 x i8]* @.str.43, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end253:                                    ; preds = %assert_end251
  %491 = icmp eq i64* %default_function.T_concat.strides, null, !dbg !18
  br i1 %491, label %if_end255, label %if_then254, !dbg !18, !prof !69

if_then254:                                       ; preds = %assert_end253
  %492 = getelementptr inbounds i64, i64* %default_function.T_concat.strides, i64 1, !dbg !18
  %493 = load i64, i64* %492, align 8, !dbg !18, !tbaa !268
  %494 = trunc i64 %493 to i32, !dbg !18
  %495 = icmp eq i32 %494, 32768, !dbg !18
  %496 = getelementptr inbounds i64, i64* %default_function.T_concat.strides, i64 2, !dbg !18
  %497 = load i64, i64* %496, align 8, !dbg !18, !tbaa !278
  %498 = trunc i64 %497 to i32, !dbg !18
  %499 = icmp eq i32 %498, 256, !dbg !18
  %500 = getelementptr inbounds i64, i64* %default_function.T_concat.strides, i64 3, !dbg !18
  %501 = load i64, i64* %500, align 8, !dbg !18, !tbaa !281
  %502 = trunc i64 %501 to i32, !dbg !18
  %503 = icmp eq i32 %502, 1, !dbg !18
  %504 = and i1 %499, %503, !dbg !18
  %505 = and i1 %495, %504, !dbg !18
  br i1 %505, label %if_end255, label %assert_fail256, !dbg !18, !prof !19

if_end255:                                        ; preds = %assert_end253, %if_then254
  %506 = getelementptr inbounds %1, %1* %T_concat281, i64 0, i32 6, !dbg !18
  %507 = load i64, i64* %506, align 8, !dbg !18
  %508 = icmp eq i64 %507, 0, !dbg !18
  br i1 %508, label %assert_end259, label %assert_fail258, !dbg !18, !prof !19

assert_fail256:                                   ; preds = %if_then254
  %509 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %509(i8* getelementptr inbounds ([269 x i8], [269 x i8]* @.str.44, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail258:                                   ; preds = %if_end255
  %510 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %510(i8* getelementptr inbounds ([208 x i8], [208 x i8]* @.str.45, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end259:                                    ; preds = %if_end255
  %511 = getelementptr inbounds %1, %1* %T_concat281, i64 0, i32 1, i32 0, !dbg !18
  %512 = load i32, i32* %511, align 4, !dbg !18
  %513 = icmp eq i32 %512, 1, !dbg !18
  br i1 %513, label %assert_end261, label %assert_fail260, !dbg !18, !prof !19

assert_fail260:                                   ; preds = %assert_end259
  %514 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %514(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.46, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end261:                                    ; preds = %assert_end259
  %515 = getelementptr inbounds %1, %1* %T_concat281, i64 0, i32 1, i32 1, !dbg !18
  %516 = load i32, i32* %515, align 4, !dbg !18
  %517 = icmp eq i32 %dev_id, %516, !dbg !18
  br i1 %517, label %assert_end263, label %assert_fail262, !dbg !18, !prof !19

assert_fail262:                                   ; preds = %assert_end261
  %518 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %518(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.47, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end263:                                    ; preds = %assert_end261
  %519 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %T_concat_void_ptr289, i32* nonnull %stack_tcode273.sub, float* %ph_void_ptr282, float* %ph_void_ptr49288, float* %ph_void_ptr35286, float* %ph_void_ptr42287, float* %ph_void_ptr21284, float* %ph_void_ptr28285, float* %ph_void_ptr14283), !dbg !18
  ret i32 %519, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5, float* noalias align 64 %6, float* noalias align 64 %7, float* noalias align 64 %8, float* noalias align 64 %9) unnamed_addr #2 {
entry:
  %10 = alloca i8*, align 8
  %11 = bitcast i8* %0 to %0*
  %12 = bitcast i8* %0 to float**
  store float* %1, float** %12, align 8
  %13 = getelementptr inbounds i8, i8* %0, i64 8
  %14 = bitcast i8* %13 to float**
  store float* %3, float** %14, align 8
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = bitcast i8* %15 to float**
  store float* %4, float** %16, align 8
  %17 = getelementptr inbounds i8, i8* %0, i64 24
  %18 = bitcast i8* %17 to float**
  store float* %5, float** %18, align 8
  %19 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %19, align 4, !tbaa !283
  %20 = getelementptr inbounds i8, i8* %0, i64 32
  %21 = bitcast i8* %20 to float**
  store float* %6, float** %21, align 8
  %22 = getelementptr inbounds i32, i32* %2, i64 4
  %23 = getelementptr inbounds i8, i8* %0, i64 40
  %24 = bitcast i8* %23 to float**
  store float* %7, float** %24, align 8
  %25 = getelementptr inbounds i8, i8* %0, i64 48
  %26 = bitcast i8* %25 to float**
  store float* %8, float** %26, align 8
  %27 = getelementptr inbounds i8, i8* %0, i64 56
  %28 = bitcast i8* %27 to float**
  store float* %9, float** %28, align 8
  %29 = bitcast i32* %22 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %29, align 4, !tbaa !292
  %30 = getelementptr inbounds i8, i8* %0, i64 64
  %31 = bitcast i8* %30 to %0*
  %32 = getelementptr inbounds i32, i32* %2, i64 8
  %33 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %34 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %handle_init, label %handle_init_end, !prof !69

handle_init:                                      ; preds = %entry
  %36 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %37 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %38 = call i32 %37(i8* %36, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.48, i64 0, i64 0), i8** nonnull %10)
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %40 = phi i8* [ %34, %entry ], [ %43, %call_end ]
  %41 = call i32 %33(i8* %40, %0* %11, i32* nonnull %2, i32 8, %0* nonnull %31, i32* nonnull %32)
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %38, %handle_init ], [ %41, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %43 = load i8*, i8** %10, align 8
  store i8* %43, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %44 = bitcast i8* %30 to i64*
  %45 = load i64, i64* %44, align 8
  %kernel_error_code = trunc i64 %45 to i32
  %46 = icmp eq i32 %kernel_error_code, 0
  br i1 %46, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %47 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %47(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x5572418f5730.w4.b0", !25, i64 0}
!25 = !{!"0x5572418f5730.w8.b0", !26, i64 0}
!26 = !{!"0x5572418f5730.w16.b0", !27, i64 0}
!27 = !{!"0x5572418f5730.w32.b0", !28, i64 0}
!28 = !{!"0x5572418f5730.w64.b0", !29, i64 0}
!29 = !{!"0x5572418f5730.w128.b0", !30, i64 0}
!30 = !{!"0x5572418f5730.w256.b0", !31, i64 0}
!31 = !{!"0x5572418f5730.w512.b0", !32, i64 0}
!32 = !{!"0x5572418f5730.w1024.b0", !33, i64 0}
!33 = !{!"0x5572418f5730", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x5572418f5730.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x5572418f5730.w4.b8", !38, i64 0}
!38 = !{!"0x5572418f5730.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x5572418f5730.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x5572418f5730.w4.b16", !43, i64 0}
!43 = !{!"0x5572418f5730.w8.b16", !44, i64 0}
!44 = !{!"0x5572418f5730.w16.b16", !27, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"0x5572418f5730.w4.b20", !43, i64 0}
!47 = !{!48, !48, i64 0}
!48 = !{!"0x5572418f5730.w4.b24", !49, i64 0}
!49 = !{!"0x5572418f5730.w8.b24", !44, i64 0}
!50 = !{!51, !51, i64 0}
!51 = !{!"0x5572418f5730.w4.b28", !49, i64 0}
!52 = !{!53, !53, i64 0}
!53 = !{!"0x5572418fa920.w8.b0", !54, i64 0}
!54 = !{!"0x5572418fa920.w16.b0", !55, i64 0}
!55 = !{!"0x5572418fa920.w32.b0", !56, i64 0}
!56 = !{!"0x5572418fa920.w64.b0", !57, i64 0}
!57 = !{!"0x5572418fa920.w128.b0", !58, i64 0}
!58 = !{!"0x5572418fa920.w256.b0", !59, i64 0}
!59 = !{!"0x5572418fa920.w512.b0", !60, i64 0}
!60 = !{!"0x5572418fa920.w1024.b0", !61, i64 0}
!61 = !{!"0x5572418fa920", !22, i64 0}
!62 = !{!63, !63, i64 0}
!63 = !{!"0x5572418fa920.w8.b8", !54, i64 0}
!64 = !{!65, !65, i64 0}
!65 = !{!"0x5572418fa920.w8.b16", !66, i64 0}
!66 = !{!"0x5572418fa920.w16.b16", !55, i64 0}
!67 = !{!68, !68, i64 0}
!68 = !{!"0x5572418fa920.w8.b24", !66, i64 0}
!69 = !{!"branch_weights", i32 1, i32 1048576}
!70 = !{!71, !71, i64 0}
!71 = !{!"0x5572419020b0.w8.b8", !72, i64 0}
!72 = !{!"0x5572419020b0.w16.b0", !73, i64 0}
!73 = !{!"0x5572419020b0.w32.b0", !74, i64 0}
!74 = !{!"0x5572419020b0.w64.b0", !75, i64 0}
!75 = !{!"0x5572419020b0.w128.b0", !76, i64 0}
!76 = !{!"0x5572419020b0.w256.b0", !77, i64 0}
!77 = !{!"0x5572419020b0.w512.b0", !78, i64 0}
!78 = !{!"0x5572419020b0.w1024.b0", !79, i64 0}
!79 = !{!"0x5572419020b0", !22, i64 0}
!80 = !{!81, !81, i64 0}
!81 = !{!"0x5572419020b0.w8.b16", !82, i64 0}
!82 = !{!"0x5572419020b0.w16.b16", !73, i64 0}
!83 = !{!84, !84, i64 0}
!84 = !{!"0x5572419020b0.w8.b24", !82, i64 0}
!85 = !{!86, !86, i64 0}
!86 = !{!"0x557241914860.w8.b0", !87, i64 0}
!87 = !{!"0x557241914860.w16.b0", !88, i64 0}
!88 = !{!"0x557241914860.w32.b0", !89, i64 0}
!89 = !{!"0x557241914860.w64.b0", !90, i64 0}
!90 = !{!"0x557241914860.w128.b0", !91, i64 0}
!91 = !{!"0x557241914860.w256.b0", !92, i64 0}
!92 = !{!"0x557241914860.w512.b0", !93, i64 0}
!93 = !{!"0x557241914860.w1024.b0", !94, i64 0}
!94 = !{!"0x557241914860", !22, i64 0}
!95 = !{!96, !96, i64 0}
!96 = !{!"0x557241914860.w8.b8", !87, i64 0}
!97 = !{!98, !98, i64 0}
!98 = !{!"0x557241914860.w8.b16", !99, i64 0}
!99 = !{!"0x557241914860.w16.b16", !88, i64 0}
!100 = !{!101, !101, i64 0}
!101 = !{!"0x557241914860.w8.b24", !99, i64 0}
!102 = !{!103, !103, i64 0}
!103 = !{!"0x557241911710.w8.b16", !104, i64 0}
!104 = !{!"0x557241911710.w16.b16", !105, i64 0}
!105 = !{!"0x557241911710.w32.b0", !106, i64 0}
!106 = !{!"0x557241911710.w64.b0", !107, i64 0}
!107 = !{!"0x557241911710.w128.b0", !108, i64 0}
!108 = !{!"0x557241911710.w256.b0", !109, i64 0}
!109 = !{!"0x557241911710.w512.b0", !110, i64 0}
!110 = !{!"0x557241911710.w1024.b0", !111, i64 0}
!111 = !{!"0x557241911710", !22, i64 0}
!112 = !{!113, !113, i64 0}
!113 = !{!"0x557241911710.w8.b24", !104, i64 0}
!114 = !{!115, !115, i64 0}
!115 = !{!"0x55724190c930.w8.b0", !116, i64 0}
!116 = !{!"0x55724190c930.w16.b0", !117, i64 0}
!117 = !{!"0x55724190c930.w32.b0", !118, i64 0}
!118 = !{!"0x55724190c930.w64.b0", !119, i64 0}
!119 = !{!"0x55724190c930.w128.b0", !120, i64 0}
!120 = !{!"0x55724190c930.w256.b0", !121, i64 0}
!121 = !{!"0x55724190c930.w512.b0", !122, i64 0}
!122 = !{!"0x55724190c930.w1024.b0", !123, i64 0}
!123 = !{!"0x55724190c930", !22, i64 0}
!124 = !{!125, !125, i64 0}
!125 = !{!"0x55724190c930.w8.b8", !116, i64 0}
!126 = !{!127, !127, i64 0}
!127 = !{!"0x55724190c930.w8.b16", !128, i64 0}
!128 = !{!"0x55724190c930.w16.b16", !117, i64 0}
!129 = !{!130, !130, i64 0}
!130 = !{!"0x55724190c930.w8.b24", !128, i64 0}
!131 = !{!132, !132, i64 0}
!132 = !{!"0x5572418f1fd0.w8.b16", !133, i64 0}
!133 = !{!"0x5572418f1fd0.w16.b16", !134, i64 0}
!134 = !{!"0x5572418f1fd0.w32.b0", !135, i64 0}
!135 = !{!"0x5572418f1fd0.w64.b0", !136, i64 0}
!136 = !{!"0x5572418f1fd0.w128.b0", !137, i64 0}
!137 = !{!"0x5572418f1fd0.w256.b0", !138, i64 0}
!138 = !{!"0x5572418f1fd0.w512.b0", !139, i64 0}
!139 = !{!"0x5572418f1fd0.w1024.b0", !140, i64 0}
!140 = !{!"0x5572418f1fd0", !22, i64 0}
!141 = !{!142, !142, i64 0}
!142 = !{!"0x5572418f1fd0.w8.b24", !133, i64 0}
!143 = !{!144, !144, i64 0}
!144 = !{!"0x557241945240.w8.b0", !145, i64 0}
!145 = !{!"0x557241945240.w16.b0", !146, i64 0}
!146 = !{!"0x557241945240.w32.b0", !147, i64 0}
!147 = !{!"0x557241945240.w64.b0", !148, i64 0}
!148 = !{!"0x557241945240.w128.b0", !149, i64 0}
!149 = !{!"0x557241945240.w256.b0", !150, i64 0}
!150 = !{!"0x557241945240.w512.b0", !151, i64 0}
!151 = !{!"0x557241945240.w1024.b0", !152, i64 0}
!152 = !{!"0x557241945240", !22, i64 0}
!153 = !{!154, !154, i64 0}
!154 = !{!"0x557241945240.w8.b8", !145, i64 0}
!155 = !{!156, !156, i64 0}
!156 = !{!"0x557241945240.w8.b16", !157, i64 0}
!157 = !{!"0x557241945240.w16.b16", !146, i64 0}
!158 = !{!159, !159, i64 0}
!159 = !{!"0x557241945240.w8.b24", !157, i64 0}
!160 = !{!161, !161, i64 0}
!161 = !{!"0x557241946760.w32.b0", !162, i64 0}
!162 = !{!"0x557241946760.w64.b0", !163, i64 0}
!163 = !{!"0x557241946760.w128.b0", !164, i64 0}
!164 = !{!"0x557241946760.w256.b0", !165, i64 0}
!165 = !{!"0x557241946760.w512.b0", !166, i64 0}
!166 = !{!"0x557241946760.w1024.b0", !167, i64 0}
!167 = !{!"0x557241946760", !22, i64 0}
!168 = !{!169, !169, i64 0}
!169 = !{!"0x557241948ac0.w8.b0", !170, i64 0}
!170 = !{!"0x557241948ac0.w16.b0", !171, i64 0}
!171 = !{!"0x557241948ac0.w32.b0", !172, i64 0}
!172 = !{!"0x557241948ac0.w64.b0", !173, i64 0}
!173 = !{!"0x557241948ac0.w128.b0", !174, i64 0}
!174 = !{!"0x557241948ac0.w256.b0", !175, i64 0}
!175 = !{!"0x557241948ac0.w512.b0", !176, i64 0}
!176 = !{!"0x557241948ac0.w1024.b0", !177, i64 0}
!177 = !{!"0x557241948ac0", !22, i64 0}
!178 = !{!179, !179, i64 0}
!179 = !{!"0x557241948ac0.w8.b8", !170, i64 0}
!180 = !{!181, !181, i64 0}
!181 = !{!"0x557241948ac0.w8.b16", !182, i64 0}
!182 = !{!"0x557241948ac0.w16.b16", !171, i64 0}
!183 = !{!184, !184, i64 0}
!184 = !{!"0x557241948ac0.w8.b24", !182, i64 0}
!185 = !{!186, !186, i64 0}
!186 = !{!"0x557241949d60.w8.b16", !187, i64 0}
!187 = !{!"0x557241949d60.w16.b16", !188, i64 0}
!188 = !{!"0x557241949d60.w32.b0", !189, i64 0}
!189 = !{!"0x557241949d60.w64.b0", !190, i64 0}
!190 = !{!"0x557241949d60.w128.b0", !191, i64 0}
!191 = !{!"0x557241949d60.w256.b0", !192, i64 0}
!192 = !{!"0x557241949d60.w512.b0", !193, i64 0}
!193 = !{!"0x557241949d60.w1024.b0", !194, i64 0}
!194 = !{!"0x557241949d60", !22, i64 0}
!195 = !{!196, !196, i64 0}
!196 = !{!"0x557241949d60.w8.b24", !187, i64 0}
!197 = !{!198, !198, i64 0}
!198 = !{!"0x55724194bb40.w8.b0", !199, i64 0}
!199 = !{!"0x55724194bb40.w16.b0", !200, i64 0}
!200 = !{!"0x55724194bb40.w32.b0", !201, i64 0}
!201 = !{!"0x55724194bb40.w64.b0", !202, i64 0}
!202 = !{!"0x55724194bb40.w128.b0", !203, i64 0}
!203 = !{!"0x55724194bb40.w256.b0", !204, i64 0}
!204 = !{!"0x55724194bb40.w512.b0", !205, i64 0}
!205 = !{!"0x55724194bb40.w1024.b0", !206, i64 0}
!206 = !{!"0x55724194bb40", !22, i64 0}
!207 = !{!208, !208, i64 0}
!208 = !{!"0x55724194bb40.w8.b8", !199, i64 0}
!209 = !{!210, !210, i64 0}
!210 = !{!"0x55724194bb40.w8.b16", !211, i64 0}
!211 = !{!"0x55724194bb40.w16.b16", !200, i64 0}
!212 = !{!213, !213, i64 0}
!213 = !{!"0x55724194bb40.w8.b24", !211, i64 0}
!214 = !{!215, !215, i64 0}
!215 = !{!"0x55724194cea0.w32.b0", !216, i64 0}
!216 = !{!"0x55724194cea0.w64.b0", !217, i64 0}
!217 = !{!"0x55724194cea0.w128.b0", !218, i64 0}
!218 = !{!"0x55724194cea0.w256.b0", !219, i64 0}
!219 = !{!"0x55724194cea0.w512.b0", !220, i64 0}
!220 = !{!"0x55724194cea0.w1024.b0", !221, i64 0}
!221 = !{!"0x55724194cea0", !22, i64 0}
!222 = !{!223, !223, i64 0}
!223 = !{!"0x55724194eff0.w8.b0", !224, i64 0}
!224 = !{!"0x55724194eff0.w16.b0", !225, i64 0}
!225 = !{!"0x55724194eff0.w32.b0", !226, i64 0}
!226 = !{!"0x55724194eff0.w64.b0", !227, i64 0}
!227 = !{!"0x55724194eff0.w128.b0", !228, i64 0}
!228 = !{!"0x55724194eff0.w256.b0", !229, i64 0}
!229 = !{!"0x55724194eff0.w512.b0", !230, i64 0}
!230 = !{!"0x55724194eff0.w1024.b0", !231, i64 0}
!231 = !{!"0x55724194eff0", !22, i64 0}
!232 = !{!233, !233, i64 0}
!233 = !{!"0x55724194eff0.w8.b8", !224, i64 0}
!234 = !{!235, !235, i64 0}
!235 = !{!"0x55724194eff0.w8.b16", !236, i64 0}
!236 = !{!"0x55724194eff0.w16.b16", !225, i64 0}
!237 = !{!238, !238, i64 0}
!238 = !{!"0x55724194eff0.w8.b24", !236, i64 0}
!239 = !{!240, !240, i64 0}
!240 = !{!"0x557241950300.w8.b16", !241, i64 0}
!241 = !{!"0x557241950300.w16.b16", !242, i64 0}
!242 = !{!"0x557241950300.w32.b0", !243, i64 0}
!243 = !{!"0x557241950300.w64.b0", !244, i64 0}
!244 = !{!"0x557241950300.w128.b0", !245, i64 0}
!245 = !{!"0x557241950300.w256.b0", !246, i64 0}
!246 = !{!"0x557241950300.w512.b0", !247, i64 0}
!247 = !{!"0x557241950300.w1024.b0", !248, i64 0}
!248 = !{!"0x557241950300", !22, i64 0}
!249 = !{!250, !250, i64 0}
!250 = !{!"0x557241950300.w8.b24", !241, i64 0}
!251 = !{!252, !252, i64 0}
!252 = !{!"0x5572419520a0.w8.b0", !253, i64 0}
!253 = !{!"0x5572419520a0.w16.b0", !254, i64 0}
!254 = !{!"0x5572419520a0.w32.b0", !255, i64 0}
!255 = !{!"0x5572419520a0.w64.b0", !256, i64 0}
!256 = !{!"0x5572419520a0.w128.b0", !257, i64 0}
!257 = !{!"0x5572419520a0.w256.b0", !258, i64 0}
!258 = !{!"0x5572419520a0.w512.b0", !259, i64 0}
!259 = !{!"0x5572419520a0.w1024.b0", !260, i64 0}
!260 = !{!"0x5572419520a0", !22, i64 0}
!261 = !{!262, !262, i64 0}
!262 = !{!"0x5572419520a0.w8.b8", !253, i64 0}
!263 = !{!264, !264, i64 0}
!264 = !{!"0x5572419520a0.w8.b16", !265, i64 0}
!265 = !{!"0x5572419520a0.w16.b16", !254, i64 0}
!266 = !{!267, !267, i64 0}
!267 = !{!"0x5572419520a0.w8.b24", !265, i64 0}
!268 = !{!269, !269, i64 0}
!269 = !{!"0x557241952c20.w8.b8", !270, i64 0}
!270 = !{!"0x557241952c20.w16.b0", !271, i64 0}
!271 = !{!"0x557241952c20.w32.b0", !272, i64 0}
!272 = !{!"0x557241952c20.w64.b0", !273, i64 0}
!273 = !{!"0x557241952c20.w128.b0", !274, i64 0}
!274 = !{!"0x557241952c20.w256.b0", !275, i64 0}
!275 = !{!"0x557241952c20.w512.b0", !276, i64 0}
!276 = !{!"0x557241952c20.w1024.b0", !277, i64 0}
!277 = !{!"0x557241952c20", !22, i64 0}
!278 = !{!279, !279, i64 0}
!279 = !{!"0x557241952c20.w8.b16", !280, i64 0}
!280 = !{!"0x557241952c20.w16.b16", !271, i64 0}
!281 = !{!282, !282, i64 0}
!282 = !{!"0x557241952c20.w8.b24", !280, i64 0}
!283 = !{!284, !284, i64 0}
!284 = !{!"0x5572418f3900.w16.b0", !285, i64 0}
!285 = !{!"0x5572418f3900.w32.b0", !286, i64 0}
!286 = !{!"0x5572418f3900.w64.b0", !287, i64 0}
!287 = !{!"0x5572418f3900.w128.b0", !288, i64 0}
!288 = !{!"0x5572418f3900.w256.b0", !289, i64 0}
!289 = !{!"0x5572418f3900.w512.b0", !290, i64 0}
!290 = !{!"0x5572418f3900.w1024.b0", !291, i64 0}
!291 = !{!"0x5572418f3900", !22, i64 0}
!292 = !{!293, !293, i64 0}
!293 = !{!"0x5572418f3900.w16.b16", !285, i64 0}
