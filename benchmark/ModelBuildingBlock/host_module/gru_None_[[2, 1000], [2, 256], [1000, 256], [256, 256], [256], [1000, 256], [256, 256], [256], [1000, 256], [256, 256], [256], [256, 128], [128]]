; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [69 x i8] c"Assert fail: num_args == 14, default_function: num_args should be 14\00", align 1
@.str.1 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[4] to be pointer\00", align 1
@.str.6 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[5] to be pointer\00", align 1
@.str.7 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[6] to be pointer\00", align 1
@.str.8 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[7] to be pointer\00", align 1
@.str.9 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[8] to be pointer\00", align 1
@.str.10 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[9] to be pointer\00", align 1
@.str.11 = private constant [123 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[10] to be pointer\00", align 1
@.str.12 = private constant [123 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[11] to be pointer\00", align 1
@.str.13 = private constant [123 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[12] to be pointer\00", align 1
@.str.14 = private constant [135 x i8] c"Assert fail: T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, default_function: Expect arg[13] to be pointer\00", align 1
@.str.15 = private constant [103 x i8] c"Assert fail: 2 == T.tvm_struct_get(ph, 0, 4, \22int32\22), default_function.ph.ndim is expected to equal 2\00", align 1
@.str.16 = private constant [227 x i8] c"Assert fail: T.tvm_struct_get(ph, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph.dtype is expected to be float32\00", align 1
@.str.17 = private constant [185 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[0]) == 2, Argument default_function.ph.shape[0] has an unsatisfied constraint: 2 == T.Cast(\22int32\22, default_function_ph_shape[0])\00", align 1
@.str.18 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[1]) == 1000, Argument default_function.ph.shape[1] has an unsatisfied constraint: 1000 == T.Cast(\22int32\22, default_function_ph_shape[1])\00", align 1
@.str.19 = private constant [185 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[1]) and 1000 == T.Cast(\22int32\22, default_function_ph_strides[0]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.20 = private constant [190 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph, 0, 8, \22uint64\22), Argument default_function.ph.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph, 0, 8, \22uint64\22)\00", align 1
@.str.21 = private constant [170 x i8] c"Assert fail: T.tvm_struct_get(ph, 0, 10, \22int32\22) == 1, Argument default_function.ph.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph, 0, 10, \22int32\22)\00", align 1
@.str.22 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[1]) == 256, Argument default_function.ph.shape[1] has an unsatisfied constraint: 256 == T.Cast(\22int32\22, default_function_ph_shape[1])\00", align 1
@.str.23 = private constant [184 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[1]) and 256 == T.Cast(\22int32\22, default_function_ph_strides[0]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.24 = private constant [176 x i8] c"Assert fail: dev_id == T.tvm_struct_get(ph, 0, 9, \22int32\22), Argument default_function.ph.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(ph, 0, 9, \22int32\22)\00", align 1
@.str.25 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[0]) == 1000, Argument default_function.ph.shape[0] has an unsatisfied constraint: 1000 == T.Cast(\22int32\22, default_function_ph_shape[0])\00", align 1
@.str.26 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[0]) == 256, Argument default_function.ph.shape[0] has an unsatisfied constraint: 256 == T.Cast(\22int32\22, default_function_ph_shape[0])\00", align 1
@.str.27 = private constant [103 x i8] c"Assert fail: 1 == T.tvm_struct_get(ph, 0, 4, \22int32\22), default_function.ph.ndim is expected to equal 1\00", align 1
@.str.28 = private constant [125 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[0]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.29 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[1]) == 128, Argument default_function.ph.shape[1] has an unsatisfied constraint: 128 == T.Cast(\22int32\22, default_function_ph_shape[1])\00", align 1
@.str.30 = private constant [184 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[1]) and 128 == T.Cast(\22int32\22, default_function_ph_strides[0]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.31 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[0]) == 128, Argument default_function.ph.shape[0] has an unsatisfied constraint: 128 == T.Cast(\22int32\22, default_function_ph_shape[0])\00", align 1
@.str.32 = private constant [109 x i8] c"Assert fail: 2 == T.tvm_struct_get(T_add, 0, 4, \22int32\22), default_function.T_add.ndim is expected to equal 2\00", align 1
@.str.33 = private constant [239 x i8] c"Assert fail: T.tvm_struct_get(T_add, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_add.dtype is expected to be float32\00", align 1
@.str.34 = private constant [194 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_add_shape[0]) == 2, Argument default_function.T_add.shape[0] has an unsatisfied constraint: 2 == T.Cast(\22int32\22, default_function_T_add_shape[0])\00", align 1
@.str.35 = private constant [198 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_add_shape[1]) == 128, Argument default_function.T_add.shape[1] has an unsatisfied constraint: 128 == T.Cast(\22int32\22, default_function_T_add_shape[1])\00", align 1
@.str.36 = private constant [193 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_add_strides[1]) and 128 == T.Cast(\22int32\22, default_function_T_add_strides[0]), default_function.T_add.strides: expected to be compact array\00", align 1
@.str.37 = private constant [199 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \22uint64\22), Argument default_function.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \22uint64\22)\00", align 1
@.str.38 = private constant [179 x i8] c"Assert fail: T.tvm_struct_get(T_add, 0, 10, \22int32\22) == 1, Argument default_function.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \22int32\22)\00", align 1
@.str.39 = private constant [185 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_add, 0, 9, \22int32\22), Argument default_function.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.40 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.41 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr424 = alloca [15 x %0], align 8, !dbg !18
  %stack_tcode425 = alloca [15 x i32], align 4, !dbg !18
  %stack_tcode425.sub = getelementptr inbounds [15 x i32], [15 x i32]* %stack_tcode425, i64 0, i64 0
  %stack_value = bitcast [15 x %0]* %stack_value_void_ptr424 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 14, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %ph.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %ph.code1 = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %ph.code2 = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %ph.code3 = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 4, !dbg !18
  %ph.code4 = load i32, i32* %5, align 4, !dbg !18, !tbaa !41
  %6 = getelementptr inbounds i32, i32* %arg_type_ids, i64 5, !dbg !18
  %ph.code5 = load i32, i32* %6, align 4, !dbg !18, !tbaa !45
  %7 = getelementptr inbounds i32, i32* %arg_type_ids, i64 6, !dbg !18
  %ph.code6 = load i32, i32* %7, align 4, !dbg !18, !tbaa !47
  %8 = getelementptr inbounds i32, i32* %arg_type_ids, i64 7, !dbg !18
  %ph.code7 = load i32, i32* %8, align 4, !dbg !18, !tbaa !50
  %9 = getelementptr inbounds i32, i32* %arg_type_ids, i64 8, !dbg !18
  %ph.code8 = load i32, i32* %9, align 4, !dbg !18, !tbaa !52
  %10 = getelementptr inbounds i32, i32* %arg_type_ids, i64 9, !dbg !18
  %ph.code9 = load i32, i32* %10, align 4, !dbg !18, !tbaa !57
  %11 = getelementptr inbounds i32, i32* %arg_type_ids, i64 10, !dbg !18
  %ph.code10 = load i32, i32* %11, align 4, !dbg !18, !tbaa !59
  %12 = getelementptr inbounds i32, i32* %arg_type_ids, i64 11, !dbg !18
  %ph.code11 = load i32, i32* %12, align 4, !dbg !18, !tbaa !62
  %13 = getelementptr inbounds i32, i32* %arg_type_ids, i64 12, !dbg !18
  %ph.code12 = load i32, i32* %13, align 4, !dbg !18, !tbaa !64
  %14 = getelementptr inbounds i32, i32* %arg_type_ids, i64 13, !dbg !18
  %T_add.code = load i32, i32* %14, align 4, !dbg !18, !tbaa !68
  %15 = bitcast i8* %args to %1**, !dbg !18
  %ph426 = load %1*, %1** %15, align 8, !dbg !18
  %16 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %17 = bitcast i8* %16 to %1**, !dbg !18
  %ph13427 = load %1*, %1** %17, align 8, !dbg !18
  %18 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %19 = bitcast i8* %18 to %1**, !dbg !18
  %ph14428 = load %1*, %1** %19, align 8, !dbg !18
  %20 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %21 = bitcast i8* %20 to %1**, !dbg !18
  %ph15429 = load %1*, %1** %21, align 8, !dbg !18
  %22 = getelementptr inbounds i8, i8* %args, i64 32, !dbg !18
  %23 = bitcast i8* %22 to %1**, !dbg !18
  %ph16430 = load %1*, %1** %23, align 8, !dbg !18
  %24 = getelementptr inbounds i8, i8* %args, i64 40, !dbg !18
  %25 = bitcast i8* %24 to %1**, !dbg !18
  %ph17431 = load %1*, %1** %25, align 8, !dbg !18
  %26 = getelementptr inbounds i8, i8* %args, i64 48, !dbg !18
  %27 = bitcast i8* %26 to %1**, !dbg !18
  %ph18432 = load %1*, %1** %27, align 8, !dbg !18
  %28 = getelementptr inbounds i8, i8* %args, i64 56, !dbg !18
  %29 = bitcast i8* %28 to %1**, !dbg !18
  %ph19433 = load %1*, %1** %29, align 8, !dbg !18
  %30 = getelementptr inbounds i8, i8* %args, i64 64, !dbg !18
  %31 = bitcast i8* %30 to %1**, !dbg !18
  %ph20434 = load %1*, %1** %31, align 8, !dbg !18
  %32 = getelementptr inbounds i8, i8* %args, i64 72, !dbg !18
  %33 = bitcast i8* %32 to %1**, !dbg !18
  %ph21435 = load %1*, %1** %33, align 8, !dbg !18
  %34 = getelementptr inbounds i8, i8* %args, i64 80, !dbg !18
  %35 = bitcast i8* %34 to %1**, !dbg !18
  %ph22436 = load %1*, %1** %35, align 8, !dbg !18
  %36 = getelementptr inbounds i8, i8* %args, i64 88, !dbg !18
  %37 = bitcast i8* %36 to %1**, !dbg !18
  %ph23437 = load %1*, %1** %37, align 8, !dbg !18
  %38 = getelementptr inbounds i8, i8* %args, i64 96, !dbg !18
  %39 = bitcast i8* %38 to %1**, !dbg !18
  %ph24438 = load %1*, %1** %39, align 8, !dbg !18
  %40 = getelementptr inbounds i8, i8* %args, i64 104, !dbg !18
  %41 = bitcast i8* %40 to %1**, !dbg !18
  %T_add439 = load %1*, %1** %41, align 8, !dbg !18
  %42 = bitcast %1* %ph426 to float**, !dbg !18
  %ph_void_ptr440 = load float*, float** %42, align 8, !dbg !18
  %ptrint = ptrtoint float* %ph_void_ptr440 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %43 = getelementptr inbounds %1, %1* %ph426, i64 0, i32 4, !dbg !18
  %default_function.ph.shape = load i64*, i64** %43, align 8, !dbg !18
  %44 = getelementptr inbounds %1, %1* %ph426, i64 0, i32 5, !dbg !18
  %default_function.ph.strides = load i64*, i64** %44, align 8, !dbg !18
  %45 = getelementptr inbounds %1, %1* %ph426, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %45, align 4, !dbg !18
  %46 = bitcast %1* %ph13427 to float**, !dbg !18
  %ph_void_ptr26441 = load float*, float** %46, align 8, !dbg !18
  %ptrint28 = ptrtoint float* %ph_void_ptr26441 to i64, !dbg !18
  %maskedptr29 = and i64 %ptrint28, 63, !dbg !18
  %maskcond30 = icmp eq i64 %maskedptr29, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond30), !dbg !18
  %47 = getelementptr inbounds %1, %1* %ph13427, i64 0, i32 4, !dbg !18
  %default_function.ph.shape31 = load i64*, i64** %47, align 8, !dbg !18
  %48 = getelementptr inbounds %1, %1* %ph13427, i64 0, i32 5, !dbg !18
  %default_function.ph.strides32 = load i64*, i64** %48, align 8, !dbg !18
  %49 = bitcast %1* %ph14428 to float**, !dbg !18
  %ph_void_ptr33442 = load float*, float** %49, align 8, !dbg !18
  %ptrint35 = ptrtoint float* %ph_void_ptr33442 to i64, !dbg !18
  %maskedptr36 = and i64 %ptrint35, 63, !dbg !18
  %maskcond37 = icmp eq i64 %maskedptr36, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond37), !dbg !18
  %50 = getelementptr inbounds %1, %1* %ph14428, i64 0, i32 4, !dbg !18
  %default_function.ph.shape38 = load i64*, i64** %50, align 8, !dbg !18
  %51 = getelementptr inbounds %1, %1* %ph14428, i64 0, i32 5, !dbg !18
  %default_function.ph.strides39 = load i64*, i64** %51, align 8, !dbg !18
  %52 = bitcast %1* %ph15429 to float**, !dbg !18
  %ph_void_ptr40443 = load float*, float** %52, align 8, !dbg !18
  %ptrint42 = ptrtoint float* %ph_void_ptr40443 to i64, !dbg !18
  %maskedptr43 = and i64 %ptrint42, 63, !dbg !18
  %maskcond44 = icmp eq i64 %maskedptr43, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond44), !dbg !18
  %53 = getelementptr inbounds %1, %1* %ph15429, i64 0, i32 4, !dbg !18
  %default_function.ph.shape45 = load i64*, i64** %53, align 8, !dbg !18
  %54 = getelementptr inbounds %1, %1* %ph15429, i64 0, i32 5, !dbg !18
  %default_function.ph.strides46 = load i64*, i64** %54, align 8, !dbg !18
  %55 = bitcast %1* %ph16430 to float**, !dbg !18
  %ph_void_ptr47444 = load float*, float** %55, align 8, !dbg !18
  %ptrint49 = ptrtoint float* %ph_void_ptr47444 to i64, !dbg !18
  %maskedptr50 = and i64 %ptrint49, 63, !dbg !18
  %maskcond51 = icmp eq i64 %maskedptr50, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond51), !dbg !18
  %56 = getelementptr inbounds %1, %1* %ph16430, i64 0, i32 4, !dbg !18
  %default_function.ph.shape52 = load i64*, i64** %56, align 8, !dbg !18
  %57 = getelementptr inbounds %1, %1* %ph16430, i64 0, i32 5, !dbg !18
  %default_function.ph.strides53 = load i64*, i64** %57, align 8, !dbg !18
  %58 = bitcast %1* %ph17431 to float**, !dbg !18
  %ph_void_ptr54445 = load float*, float** %58, align 8, !dbg !18
  %ptrint56 = ptrtoint float* %ph_void_ptr54445 to i64, !dbg !18
  %maskedptr57 = and i64 %ptrint56, 63, !dbg !18
  %maskcond58 = icmp eq i64 %maskedptr57, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond58), !dbg !18
  %59 = getelementptr inbounds %1, %1* %ph17431, i64 0, i32 4, !dbg !18
  %default_function.ph.shape59 = load i64*, i64** %59, align 8, !dbg !18
  %60 = getelementptr inbounds %1, %1* %ph17431, i64 0, i32 5, !dbg !18
  %default_function.ph.strides60 = load i64*, i64** %60, align 8, !dbg !18
  %61 = bitcast %1* %ph18432 to float**, !dbg !18
  %ph_void_ptr61446 = load float*, float** %61, align 8, !dbg !18
  %ptrint63 = ptrtoint float* %ph_void_ptr61446 to i64, !dbg !18
  %maskedptr64 = and i64 %ptrint63, 63, !dbg !18
  %maskcond65 = icmp eq i64 %maskedptr64, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond65), !dbg !18
  %62 = getelementptr inbounds %1, %1* %ph18432, i64 0, i32 4, !dbg !18
  %default_function.ph.shape66 = load i64*, i64** %62, align 8, !dbg !18
  %63 = getelementptr inbounds %1, %1* %ph18432, i64 0, i32 5, !dbg !18
  %default_function.ph.strides67 = load i64*, i64** %63, align 8, !dbg !18
  %64 = bitcast %1* %ph19433 to float**, !dbg !18
  %ph_void_ptr68447 = load float*, float** %64, align 8, !dbg !18
  %ptrint70 = ptrtoint float* %ph_void_ptr68447 to i64, !dbg !18
  %maskedptr71 = and i64 %ptrint70, 63, !dbg !18
  %maskcond72 = icmp eq i64 %maskedptr71, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond72), !dbg !18
  %65 = getelementptr inbounds %1, %1* %ph19433, i64 0, i32 4, !dbg !18
  %default_function.ph.shape73 = load i64*, i64** %65, align 8, !dbg !18
  %66 = getelementptr inbounds %1, %1* %ph19433, i64 0, i32 5, !dbg !18
  %default_function.ph.strides74 = load i64*, i64** %66, align 8, !dbg !18
  %67 = bitcast %1* %ph20434 to float**, !dbg !18
  %ph_void_ptr75448 = load float*, float** %67, align 8, !dbg !18
  %ptrint77 = ptrtoint float* %ph_void_ptr75448 to i64, !dbg !18
  %maskedptr78 = and i64 %ptrint77, 63, !dbg !18
  %maskcond79 = icmp eq i64 %maskedptr78, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond79), !dbg !18
  %68 = getelementptr inbounds %1, %1* %ph20434, i64 0, i32 4, !dbg !18
  %default_function.ph.shape80 = load i64*, i64** %68, align 8, !dbg !18
  %69 = getelementptr inbounds %1, %1* %ph20434, i64 0, i32 5, !dbg !18
  %default_function.ph.strides81 = load i64*, i64** %69, align 8, !dbg !18
  %70 = bitcast %1* %ph21435 to float**, !dbg !18
  %ph_void_ptr82449 = load float*, float** %70, align 8, !dbg !18
  %ptrint84 = ptrtoint float* %ph_void_ptr82449 to i64, !dbg !18
  %maskedptr85 = and i64 %ptrint84, 63, !dbg !18
  %maskcond86 = icmp eq i64 %maskedptr85, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond86), !dbg !18
  %71 = getelementptr inbounds %1, %1* %ph21435, i64 0, i32 4, !dbg !18
  %default_function.ph.shape87 = load i64*, i64** %71, align 8, !dbg !18
  %72 = getelementptr inbounds %1, %1* %ph21435, i64 0, i32 5, !dbg !18
  %default_function.ph.strides88 = load i64*, i64** %72, align 8, !dbg !18
  %73 = bitcast %1* %ph22436 to float**, !dbg !18
  %ph_void_ptr89450 = load float*, float** %73, align 8, !dbg !18
  %ptrint91 = ptrtoint float* %ph_void_ptr89450 to i64, !dbg !18
  %maskedptr92 = and i64 %ptrint91, 63, !dbg !18
  %maskcond93 = icmp eq i64 %maskedptr92, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond93), !dbg !18
  %74 = getelementptr inbounds %1, %1* %ph22436, i64 0, i32 4, !dbg !18
  %default_function.ph.shape94 = load i64*, i64** %74, align 8, !dbg !18
  %75 = getelementptr inbounds %1, %1* %ph22436, i64 0, i32 5, !dbg !18
  %default_function.ph.strides95 = load i64*, i64** %75, align 8, !dbg !18
  %76 = bitcast %1* %ph23437 to float**, !dbg !18
  %ph_void_ptr96451 = load float*, float** %76, align 8, !dbg !18
  %ptrint98 = ptrtoint float* %ph_void_ptr96451 to i64, !dbg !18
  %maskedptr99 = and i64 %ptrint98, 63, !dbg !18
  %maskcond100 = icmp eq i64 %maskedptr99, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond100), !dbg !18
  %77 = getelementptr inbounds %1, %1* %ph23437, i64 0, i32 4, !dbg !18
  %default_function.ph.shape101 = load i64*, i64** %77, align 8, !dbg !18
  %78 = getelementptr inbounds %1, %1* %ph23437, i64 0, i32 5, !dbg !18
  %default_function.ph.strides102 = load i64*, i64** %78, align 8, !dbg !18
  %79 = bitcast %1* %ph24438 to float**, !dbg !18
  %ph_void_ptr103452 = load float*, float** %79, align 8, !dbg !18
  %ptrint105 = ptrtoint float* %ph_void_ptr103452 to i64, !dbg !18
  %maskedptr106 = and i64 %ptrint105, 63, !dbg !18
  %maskcond107 = icmp eq i64 %maskedptr106, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond107), !dbg !18
  %80 = getelementptr inbounds %1, %1* %ph24438, i64 0, i32 4, !dbg !18
  %default_function.ph.shape108 = load i64*, i64** %80, align 8, !dbg !18
  %81 = getelementptr inbounds %1, %1* %ph24438, i64 0, i32 5, !dbg !18
  %default_function.ph.strides109 = load i64*, i64** %81, align 8, !dbg !18
  %82 = bitcast %1* %T_add439 to float**, !dbg !18
  %T_add_void_ptr453 = load float*, float** %82, align 8, !dbg !18
  %ptrint111 = ptrtoint float* %T_add_void_ptr453 to i64, !dbg !18
  %maskedptr112 = and i64 %ptrint111, 63, !dbg !18
  %maskcond113 = icmp eq i64 %maskedptr112, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond113), !dbg !18
  %83 = getelementptr inbounds %1, %1* %T_add439, i64 0, i32 4, !dbg !18
  %default_function.T_add.shape = load i64*, i64** %83, align 8, !dbg !18
  %84 = getelementptr inbounds %1, %1* %T_add439, i64 0, i32 5, !dbg !18
  %default_function.T_add.strides = load i64*, i64** %84, align 8, !dbg !18
  switch i32 %ph.code, label %assert_fail114 [
    i32 13, label %assert_end115
    i32 7, label %assert_end115
    i32 4, label %assert_end115
    i32 3, label %assert_end115
  ], !dbg !18

assert_fail114:                                   ; preds = %assert_end
  %85 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %85(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end115:                                    ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %ph.code1, label %assert_fail116 [
    i32 13, label %assert_end117
    i32 7, label %assert_end117
    i32 4, label %assert_end117
    i32 3, label %assert_end117
  ], !dbg !18

assert_fail116:                                   ; preds = %assert_end115
  %86 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %86(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end117:                                    ; preds = %assert_end115, %assert_end115, %assert_end115, %assert_end115
  switch i32 %ph.code2, label %assert_fail118 [
    i32 13, label %assert_end119
    i32 7, label %assert_end119
    i32 4, label %assert_end119
    i32 3, label %assert_end119
  ], !dbg !18

assert_fail118:                                   ; preds = %assert_end117
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %87(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end119:                                    ; preds = %assert_end117, %assert_end117, %assert_end117, %assert_end117
  switch i32 %ph.code3, label %assert_fail120 [
    i32 13, label %assert_end121
    i32 7, label %assert_end121
    i32 4, label %assert_end121
    i32 3, label %assert_end121
  ], !dbg !18

assert_fail120:                                   ; preds = %assert_end119
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %88(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end121:                                    ; preds = %assert_end119, %assert_end119, %assert_end119, %assert_end119
  switch i32 %ph.code4, label %assert_fail122 [
    i32 13, label %assert_end123
    i32 7, label %assert_end123
    i32 4, label %assert_end123
    i32 3, label %assert_end123
  ], !dbg !18

assert_fail122:                                   ; preds = %assert_end121
  %89 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %89(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end123:                                    ; preds = %assert_end121, %assert_end121, %assert_end121, %assert_end121
  switch i32 %ph.code5, label %assert_fail124 [
    i32 13, label %assert_end125
    i32 7, label %assert_end125
    i32 4, label %assert_end125
    i32 3, label %assert_end125
  ], !dbg !18

assert_fail124:                                   ; preds = %assert_end123
  %90 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %90(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end125:                                    ; preds = %assert_end123, %assert_end123, %assert_end123, %assert_end123
  switch i32 %ph.code6, label %assert_fail126 [
    i32 13, label %assert_end127
    i32 7, label %assert_end127
    i32 4, label %assert_end127
    i32 3, label %assert_end127
  ], !dbg !18

assert_fail126:                                   ; preds = %assert_end125
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %91(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end127:                                    ; preds = %assert_end125, %assert_end125, %assert_end125, %assert_end125
  switch i32 %ph.code7, label %assert_fail128 [
    i32 13, label %assert_end129
    i32 7, label %assert_end129
    i32 4, label %assert_end129
    i32 3, label %assert_end129
  ], !dbg !18

assert_fail128:                                   ; preds = %assert_end127
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %92(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end129:                                    ; preds = %assert_end127, %assert_end127, %assert_end127, %assert_end127
  switch i32 %ph.code8, label %assert_fail130 [
    i32 13, label %assert_end131
    i32 7, label %assert_end131
    i32 4, label %assert_end131
    i32 3, label %assert_end131
  ], !dbg !18

assert_fail130:                                   ; preds = %assert_end129
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %93(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end131:                                    ; preds = %assert_end129, %assert_end129, %assert_end129, %assert_end129
  switch i32 %ph.code9, label %assert_fail132 [
    i32 13, label %assert_end133
    i32 7, label %assert_end133
    i32 4, label %assert_end133
    i32 3, label %assert_end133
  ], !dbg !18

assert_fail132:                                   ; preds = %assert_end131
  %94 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %94(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end133:                                    ; preds = %assert_end131, %assert_end131, %assert_end131, %assert_end131
  switch i32 %ph.code10, label %assert_fail134 [
    i32 13, label %assert_end135
    i32 7, label %assert_end135
    i32 4, label %assert_end135
    i32 3, label %assert_end135
  ], !dbg !18

assert_fail134:                                   ; preds = %assert_end133
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %95(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end135:                                    ; preds = %assert_end133, %assert_end133, %assert_end133, %assert_end133
  switch i32 %ph.code11, label %assert_fail136 [
    i32 13, label %assert_end137
    i32 7, label %assert_end137
    i32 4, label %assert_end137
    i32 3, label %assert_end137
  ], !dbg !18

assert_fail136:                                   ; preds = %assert_end135
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %96(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end137:                                    ; preds = %assert_end135, %assert_end135, %assert_end135, %assert_end135
  switch i32 %ph.code12, label %assert_fail138 [
    i32 13, label %assert_end139
    i32 7, label %assert_end139
    i32 4, label %assert_end139
    i32 3, label %assert_end139
  ], !dbg !18

assert_fail138:                                   ; preds = %assert_end137
  %97 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %97(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end139:                                    ; preds = %assert_end137, %assert_end137, %assert_end137, %assert_end137
  switch i32 %T_add.code, label %assert_fail140 [
    i32 13, label %assert_end141
    i32 7, label %assert_end141
    i32 4, label %assert_end141
    i32 3, label %assert_end141
  ], !dbg !18

assert_fail140:                                   ; preds = %assert_end139
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %98(i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end141:                                    ; preds = %assert_end139, %assert_end139, %assert_end139, %assert_end139
  %99 = getelementptr inbounds %1, %1* %ph426, i64 0, i32 2, !dbg !18
  %100 = load i32, i32* %99, align 4, !dbg !18
  %101 = icmp eq i32 %100, 2, !dbg !18
  br i1 %101, label %assert_end145, label %assert_fail142, !dbg !18, !prof !19

assert_fail142:                                   ; preds = %assert_end141
  %102 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %102(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end145:                                    ; preds = %assert_end141
  %103 = getelementptr inbounds %1, %1* %ph426, i64 0, i32 3, i32 2, !dbg !18
  %104 = load i16, i16* %103, align 2, !dbg !18
  %105 = icmp eq i16 %104, 1, !dbg !18
  %106 = getelementptr inbounds %1, %1* %ph426, i64 0, i32 3, i32 1, !dbg !18
  %107 = load i8, i8* %106, align 1, !dbg !18
  %108 = icmp eq i8 %107, 32, !dbg !18
  %109 = getelementptr inbounds %1, %1* %ph426, i64 0, i32 3, i32 0, !dbg !18
  %110 = load i8, i8* %109, align 1, !dbg !18
  %111 = icmp eq i8 %110, 2, !dbg !18
  %112 = and i1 %108, %111, !dbg !18
  %113 = and i1 %105, %112, !dbg !18
  br i1 %113, label %assert_end147, label %assert_fail146, !dbg !18, !prof !19

assert_fail146:                                   ; preds = %assert_end145
  %114 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %114(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end147:                                    ; preds = %assert_end145
  %115 = load i64, i64* %default_function.ph.shape, align 8, !dbg !18, !tbaa !70
  %116 = trunc i64 %115 to i32, !dbg !18
  %117 = icmp eq i32 %116, 2, !dbg !18
  br i1 %117, label %assert_end149, label %assert_fail148, !dbg !18, !prof !19

assert_fail148:                                   ; preds = %assert_end147
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %118(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end149:                                    ; preds = %assert_end147
  %119 = getelementptr inbounds i64, i64* %default_function.ph.shape, i64 1, !dbg !18
  %120 = load i64, i64* %119, align 8, !dbg !18, !tbaa !80
  %121 = trunc i64 %120 to i32, !dbg !18
  %122 = icmp eq i32 %121, 1000, !dbg !18
  br i1 %122, label %assert_end151, label %assert_fail150, !dbg !18, !prof !19

assert_fail150:                                   ; preds = %assert_end149
  %123 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %123(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end151:                                    ; preds = %assert_end149
  %124 = icmp eq i64* %default_function.ph.strides, null, !dbg !18
  br i1 %124, label %if_end, label %if_then, !dbg !18, !prof !82

if_then:                                          ; preds = %assert_end151
  %125 = load i64, i64* %default_function.ph.strides, align 8, !dbg !18, !tbaa !83
  %126 = trunc i64 %125 to i32, !dbg !18
  %127 = icmp eq i32 %126, 1000, !dbg !18
  %128 = getelementptr inbounds i64, i64* %default_function.ph.strides, i64 1, !dbg !18
  %129 = load i64, i64* %128, align 8, !dbg !18, !tbaa !93
  %130 = trunc i64 %129 to i32, !dbg !18
  %131 = icmp eq i32 %130, 1, !dbg !18
  %132 = and i1 %127, %131, !dbg !18
  br i1 %132, label %if_end, label %assert_fail152, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end151, %if_then
  %133 = getelementptr inbounds %1, %1* %ph426, i64 0, i32 6, !dbg !18
  %134 = load i64, i64* %133, align 8, !dbg !18
  %135 = icmp eq i64 %134, 0, !dbg !18
  br i1 %135, label %assert_end155, label %assert_fail154, !dbg !18, !prof !19

assert_fail152:                                   ; preds = %if_then
  %136 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %136(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail154:                                   ; preds = %if_end
  %137 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %137(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end155:                                    ; preds = %if_end
  %138 = getelementptr inbounds %1, %1* %ph426, i64 0, i32 1, i32 0, !dbg !18
  %139 = load i32, i32* %138, align 4, !dbg !18
  %140 = icmp eq i32 %139, 1, !dbg !18
  br i1 %140, label %assert_end157, label %assert_fail156, !dbg !18, !prof !19

assert_fail156:                                   ; preds = %assert_end155
  %141 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %141(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end157:                                    ; preds = %assert_end155
  %142 = getelementptr inbounds %1, %1* %ph13427, i64 0, i32 2, !dbg !18
  %143 = load i32, i32* %142, align 4, !dbg !18
  %144 = icmp eq i32 %143, 2, !dbg !18
  br i1 %144, label %assert_end161, label %assert_fail158, !dbg !18, !prof !19

assert_fail158:                                   ; preds = %assert_end157
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %145(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end161:                                    ; preds = %assert_end157
  %146 = getelementptr inbounds %1, %1* %ph13427, i64 0, i32 3, i32 2, !dbg !18
  %147 = load i16, i16* %146, align 2, !dbg !18
  %148 = icmp eq i16 %147, 1, !dbg !18
  %149 = getelementptr inbounds %1, %1* %ph13427, i64 0, i32 3, i32 1, !dbg !18
  %150 = load i8, i8* %149, align 1, !dbg !18
  %151 = icmp eq i8 %150, 32, !dbg !18
  %152 = getelementptr inbounds %1, %1* %ph13427, i64 0, i32 3, i32 0, !dbg !18
  %153 = load i8, i8* %152, align 1, !dbg !18
  %154 = icmp eq i8 %153, 2, !dbg !18
  %155 = and i1 %151, %154, !dbg !18
  %156 = and i1 %148, %155, !dbg !18
  br i1 %156, label %assert_end163, label %assert_fail162, !dbg !18, !prof !19

assert_fail162:                                   ; preds = %assert_end161
  %157 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %157(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end163:                                    ; preds = %assert_end161
  %158 = load i64, i64* %default_function.ph.shape31, align 8, !dbg !18, !tbaa !95
  %159 = trunc i64 %158 to i32, !dbg !18
  %160 = icmp eq i32 %159, 2, !dbg !18
  br i1 %160, label %assert_end165, label %assert_fail164, !dbg !18, !prof !19

assert_fail164:                                   ; preds = %assert_end163
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %161(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end165:                                    ; preds = %assert_end163
  %162 = getelementptr inbounds i64, i64* %default_function.ph.shape31, i64 1, !dbg !18
  %163 = load i64, i64* %162, align 8, !dbg !18, !tbaa !105
  %164 = trunc i64 %163 to i32, !dbg !18
  %165 = icmp eq i32 %164, 256, !dbg !18
  br i1 %165, label %assert_end167, label %assert_fail166, !dbg !18, !prof !19

assert_fail166:                                   ; preds = %assert_end165
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %166(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end167:                                    ; preds = %assert_end165
  %167 = icmp eq i64* %default_function.ph.strides32, null, !dbg !18
  br i1 %167, label %if_end169, label %if_then168, !dbg !18, !prof !82

if_then168:                                       ; preds = %assert_end167
  %168 = load i64, i64* %default_function.ph.strides32, align 8, !dbg !18, !tbaa !107
  %169 = trunc i64 %168 to i32, !dbg !18
  %170 = icmp eq i32 %169, 256, !dbg !18
  %171 = getelementptr inbounds i64, i64* %default_function.ph.strides32, i64 1, !dbg !18
  %172 = load i64, i64* %171, align 8, !dbg !18, !tbaa !117
  %173 = trunc i64 %172 to i32, !dbg !18
  %174 = icmp eq i32 %173, 1, !dbg !18
  %175 = and i1 %170, %174, !dbg !18
  br i1 %175, label %if_end169, label %assert_fail170, !dbg !18, !prof !19

if_end169:                                        ; preds = %assert_end167, %if_then168
  %176 = getelementptr inbounds %1, %1* %ph13427, i64 0, i32 6, !dbg !18
  %177 = load i64, i64* %176, align 8, !dbg !18
  %178 = icmp eq i64 %177, 0, !dbg !18
  br i1 %178, label %assert_end173, label %assert_fail172, !dbg !18, !prof !19

assert_fail170:                                   ; preds = %if_then168
  %179 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %179(i8* getelementptr inbounds ([184 x i8], [184 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail172:                                   ; preds = %if_end169
  %180 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %180(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end173:                                    ; preds = %if_end169
  %181 = getelementptr inbounds %1, %1* %ph13427, i64 0, i32 1, i32 0, !dbg !18
  %182 = load i32, i32* %181, align 4, !dbg !18
  %183 = icmp eq i32 %182, 1, !dbg !18
  br i1 %183, label %assert_end175, label %assert_fail174, !dbg !18, !prof !19

assert_fail174:                                   ; preds = %assert_end173
  %184 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %184(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end175:                                    ; preds = %assert_end173
  %185 = getelementptr inbounds %1, %1* %ph13427, i64 0, i32 1, i32 1, !dbg !18
  %186 = load i32, i32* %185, align 4, !dbg !18
  %187 = icmp eq i32 %dev_id, %186, !dbg !18
  br i1 %187, label %assert_end177, label %assert_fail176, !dbg !18, !prof !19

assert_fail176:                                   ; preds = %assert_end175
  %188 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %188(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end177:                                    ; preds = %assert_end175
  %189 = getelementptr inbounds %1, %1* %ph14428, i64 0, i32 2, !dbg !18
  %190 = load i32, i32* %189, align 4, !dbg !18
  %191 = icmp eq i32 %190, 2, !dbg !18
  br i1 %191, label %assert_end181, label %assert_fail178, !dbg !18, !prof !19

assert_fail178:                                   ; preds = %assert_end177
  %192 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %192(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end181:                                    ; preds = %assert_end177
  %193 = getelementptr inbounds %1, %1* %ph14428, i64 0, i32 3, i32 2, !dbg !18
  %194 = load i16, i16* %193, align 2, !dbg !18
  %195 = icmp eq i16 %194, 1, !dbg !18
  %196 = getelementptr inbounds %1, %1* %ph14428, i64 0, i32 3, i32 1, !dbg !18
  %197 = load i8, i8* %196, align 1, !dbg !18
  %198 = icmp eq i8 %197, 32, !dbg !18
  %199 = getelementptr inbounds %1, %1* %ph14428, i64 0, i32 3, i32 0, !dbg !18
  %200 = load i8, i8* %199, align 1, !dbg !18
  %201 = icmp eq i8 %200, 2, !dbg !18
  %202 = and i1 %198, %201, !dbg !18
  %203 = and i1 %195, %202, !dbg !18
  br i1 %203, label %assert_end183, label %assert_fail182, !dbg !18, !prof !19

assert_fail182:                                   ; preds = %assert_end181
  %204 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %204(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end183:                                    ; preds = %assert_end181
  %205 = load i64, i64* %default_function.ph.shape38, align 8, !dbg !18, !tbaa !119
  %206 = trunc i64 %205 to i32, !dbg !18
  %207 = icmp eq i32 %206, 1000, !dbg !18
  br i1 %207, label %assert_end185, label %assert_fail184, !dbg !18, !prof !19

assert_fail184:                                   ; preds = %assert_end183
  %208 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %208(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end185:                                    ; preds = %assert_end183
  %209 = getelementptr inbounds i64, i64* %default_function.ph.shape38, i64 1, !dbg !18
  %210 = load i64, i64* %209, align 8, !dbg !18, !tbaa !129
  %211 = trunc i64 %210 to i32, !dbg !18
  %212 = icmp eq i32 %211, 256, !dbg !18
  br i1 %212, label %assert_end187, label %assert_fail186, !dbg !18, !prof !19

assert_fail186:                                   ; preds = %assert_end185
  %213 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %213(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end187:                                    ; preds = %assert_end185
  %214 = icmp eq i64* %default_function.ph.strides39, null, !dbg !18
  br i1 %214, label %if_end189, label %if_then188, !dbg !18, !prof !82

if_then188:                                       ; preds = %assert_end187
  %215 = load i64, i64* %default_function.ph.strides39, align 8, !dbg !18, !tbaa !131
  %216 = trunc i64 %215 to i32, !dbg !18
  %217 = icmp eq i32 %216, 256, !dbg !18
  %218 = getelementptr inbounds i64, i64* %default_function.ph.strides39, i64 1, !dbg !18
  %219 = load i64, i64* %218, align 8, !dbg !18, !tbaa !141
  %220 = trunc i64 %219 to i32, !dbg !18
  %221 = icmp eq i32 %220, 1, !dbg !18
  %222 = and i1 %217, %221, !dbg !18
  br i1 %222, label %if_end189, label %assert_fail190, !dbg !18, !prof !19

if_end189:                                        ; preds = %assert_end187, %if_then188
  %223 = getelementptr inbounds %1, %1* %ph14428, i64 0, i32 6, !dbg !18
  %224 = load i64, i64* %223, align 8, !dbg !18
  %225 = icmp eq i64 %224, 0, !dbg !18
  br i1 %225, label %assert_end193, label %assert_fail192, !dbg !18, !prof !19

assert_fail190:                                   ; preds = %if_then188
  %226 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %226(i8* getelementptr inbounds ([184 x i8], [184 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail192:                                   ; preds = %if_end189
  %227 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %227(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end193:                                    ; preds = %if_end189
  %228 = getelementptr inbounds %1, %1* %ph14428, i64 0, i32 1, i32 0, !dbg !18
  %229 = load i32, i32* %228, align 4, !dbg !18
  %230 = icmp eq i32 %229, 1, !dbg !18
  br i1 %230, label %assert_end195, label %assert_fail194, !dbg !18, !prof !19

assert_fail194:                                   ; preds = %assert_end193
  %231 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %231(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end195:                                    ; preds = %assert_end193
  %232 = getelementptr inbounds %1, %1* %ph14428, i64 0, i32 1, i32 1, !dbg !18
  %233 = load i32, i32* %232, align 4, !dbg !18
  %234 = icmp eq i32 %dev_id, %233, !dbg !18
  br i1 %234, label %assert_end197, label %assert_fail196, !dbg !18, !prof !19

assert_fail196:                                   ; preds = %assert_end195
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %235(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end197:                                    ; preds = %assert_end195
  %236 = getelementptr inbounds %1, %1* %ph15429, i64 0, i32 2, !dbg !18
  %237 = load i32, i32* %236, align 4, !dbg !18
  %238 = icmp eq i32 %237, 2, !dbg !18
  br i1 %238, label %assert_end201, label %assert_fail198, !dbg !18, !prof !19

assert_fail198:                                   ; preds = %assert_end197
  %239 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %239(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end201:                                    ; preds = %assert_end197
  %240 = getelementptr inbounds %1, %1* %ph15429, i64 0, i32 3, i32 2, !dbg !18
  %241 = load i16, i16* %240, align 2, !dbg !18
  %242 = icmp eq i16 %241, 1, !dbg !18
  %243 = getelementptr inbounds %1, %1* %ph15429, i64 0, i32 3, i32 1, !dbg !18
  %244 = load i8, i8* %243, align 1, !dbg !18
  %245 = icmp eq i8 %244, 32, !dbg !18
  %246 = getelementptr inbounds %1, %1* %ph15429, i64 0, i32 3, i32 0, !dbg !18
  %247 = load i8, i8* %246, align 1, !dbg !18
  %248 = icmp eq i8 %247, 2, !dbg !18
  %249 = and i1 %245, %248, !dbg !18
  %250 = and i1 %242, %249, !dbg !18
  br i1 %250, label %assert_end203, label %assert_fail202, !dbg !18, !prof !19

assert_fail202:                                   ; preds = %assert_end201
  %251 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %251(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end203:                                    ; preds = %assert_end201
  %252 = load i64, i64* %default_function.ph.shape45, align 8, !dbg !18, !tbaa !143
  %253 = trunc i64 %252 to i32, !dbg !18
  %254 = icmp eq i32 %253, 256, !dbg !18
  br i1 %254, label %assert_end205, label %assert_fail204, !dbg !18, !prof !19

assert_fail204:                                   ; preds = %assert_end203
  %255 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %255(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end205:                                    ; preds = %assert_end203
  %256 = getelementptr inbounds i64, i64* %default_function.ph.shape45, i64 1, !dbg !18
  %257 = load i64, i64* %256, align 8, !dbg !18, !tbaa !153
  %258 = trunc i64 %257 to i32, !dbg !18
  %259 = icmp eq i32 %258, 256, !dbg !18
  br i1 %259, label %assert_end207, label %assert_fail206, !dbg !18, !prof !19

assert_fail206:                                   ; preds = %assert_end205
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %260(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end207:                                    ; preds = %assert_end205
  %261 = icmp eq i64* %default_function.ph.strides46, null, !dbg !18
  br i1 %261, label %if_end209, label %if_then208, !dbg !18, !prof !82

if_then208:                                       ; preds = %assert_end207
  %262 = load i64, i64* %default_function.ph.strides46, align 8, !dbg !18, !tbaa !155
  %263 = trunc i64 %262 to i32, !dbg !18
  %264 = icmp eq i32 %263, 256, !dbg !18
  %265 = getelementptr inbounds i64, i64* %default_function.ph.strides46, i64 1, !dbg !18
  %266 = load i64, i64* %265, align 8, !dbg !18, !tbaa !165
  %267 = trunc i64 %266 to i32, !dbg !18
  %268 = icmp eq i32 %267, 1, !dbg !18
  %269 = and i1 %264, %268, !dbg !18
  br i1 %269, label %if_end209, label %assert_fail210, !dbg !18, !prof !19

if_end209:                                        ; preds = %assert_end207, %if_then208
  %270 = getelementptr inbounds %1, %1* %ph15429, i64 0, i32 6, !dbg !18
  %271 = load i64, i64* %270, align 8, !dbg !18
  %272 = icmp eq i64 %271, 0, !dbg !18
  br i1 %272, label %assert_end213, label %assert_fail212, !dbg !18, !prof !19

assert_fail210:                                   ; preds = %if_then208
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %273(i8* getelementptr inbounds ([184 x i8], [184 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail212:                                   ; preds = %if_end209
  %274 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %274(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end213:                                    ; preds = %if_end209
  %275 = getelementptr inbounds %1, %1* %ph15429, i64 0, i32 1, i32 0, !dbg !18
  %276 = load i32, i32* %275, align 4, !dbg !18
  %277 = icmp eq i32 %276, 1, !dbg !18
  br i1 %277, label %assert_end215, label %assert_fail214, !dbg !18, !prof !19

assert_fail214:                                   ; preds = %assert_end213
  %278 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %278(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end215:                                    ; preds = %assert_end213
  %279 = getelementptr inbounds %1, %1* %ph15429, i64 0, i32 1, i32 1, !dbg !18
  %280 = load i32, i32* %279, align 4, !dbg !18
  %281 = icmp eq i32 %dev_id, %280, !dbg !18
  br i1 %281, label %assert_end217, label %assert_fail216, !dbg !18, !prof !19

assert_fail216:                                   ; preds = %assert_end215
  %282 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %282(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end217:                                    ; preds = %assert_end215
  %283 = getelementptr inbounds %1, %1* %ph16430, i64 0, i32 2, !dbg !18
  %284 = load i32, i32* %283, align 4, !dbg !18
  %285 = icmp eq i32 %284, 1, !dbg !18
  br i1 %285, label %assert_end221, label %assert_fail218, !dbg !18, !prof !19

assert_fail218:                                   ; preds = %assert_end217
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %286(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end221:                                    ; preds = %assert_end217
  %287 = getelementptr inbounds %1, %1* %ph16430, i64 0, i32 3, i32 2, !dbg !18
  %288 = load i16, i16* %287, align 2, !dbg !18
  %289 = icmp eq i16 %288, 1, !dbg !18
  %290 = getelementptr inbounds %1, %1* %ph16430, i64 0, i32 3, i32 1, !dbg !18
  %291 = load i8, i8* %290, align 1, !dbg !18
  %292 = icmp eq i8 %291, 32, !dbg !18
  %293 = getelementptr inbounds %1, %1* %ph16430, i64 0, i32 3, i32 0, !dbg !18
  %294 = load i8, i8* %293, align 1, !dbg !18
  %295 = icmp eq i8 %294, 2, !dbg !18
  %296 = and i1 %292, %295, !dbg !18
  %297 = and i1 %289, %296, !dbg !18
  br i1 %297, label %assert_end223, label %assert_fail222, !dbg !18, !prof !19

assert_fail222:                                   ; preds = %assert_end221
  %298 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %298(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end223:                                    ; preds = %assert_end221
  %299 = load i64, i64* %default_function.ph.shape52, align 8, !dbg !18, !tbaa !167
  %300 = trunc i64 %299 to i32, !dbg !18
  %301 = icmp eq i32 %300, 256, !dbg !18
  br i1 %301, label %assert_end225, label %assert_fail224, !dbg !18, !prof !19

assert_fail224:                                   ; preds = %assert_end223
  %302 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %302(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end225:                                    ; preds = %assert_end223
  %303 = icmp eq i64* %default_function.ph.strides53, null, !dbg !18
  br i1 %303, label %if_end227, label %if_then226, !dbg !18, !prof !82

if_then226:                                       ; preds = %assert_end225
  %304 = load i64, i64* %default_function.ph.strides53, align 8, !dbg !18, !tbaa !177
  %305 = trunc i64 %304 to i32, !dbg !18
  %306 = icmp eq i32 %305, 1, !dbg !18
  br i1 %306, label %if_end227, label %assert_fail228, !dbg !18, !prof !19

if_end227:                                        ; preds = %assert_end225, %if_then226
  %307 = getelementptr inbounds %1, %1* %ph16430, i64 0, i32 6, !dbg !18
  %308 = load i64, i64* %307, align 8, !dbg !18
  %309 = icmp eq i64 %308, 0, !dbg !18
  br i1 %309, label %assert_end231, label %assert_fail230, !dbg !18, !prof !19

assert_fail228:                                   ; preds = %if_then226
  %310 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %310(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail230:                                   ; preds = %if_end227
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %311(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end231:                                    ; preds = %if_end227
  %312 = getelementptr inbounds %1, %1* %ph16430, i64 0, i32 1, i32 0, !dbg !18
  %313 = load i32, i32* %312, align 4, !dbg !18
  %314 = icmp eq i32 %313, 1, !dbg !18
  br i1 %314, label %assert_end233, label %assert_fail232, !dbg !18, !prof !19

assert_fail232:                                   ; preds = %assert_end231
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %315(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end233:                                    ; preds = %assert_end231
  %316 = getelementptr inbounds %1, %1* %ph16430, i64 0, i32 1, i32 1, !dbg !18
  %317 = load i32, i32* %316, align 4, !dbg !18
  %318 = icmp eq i32 %dev_id, %317, !dbg !18
  br i1 %318, label %assert_end235, label %assert_fail234, !dbg !18, !prof !19

assert_fail234:                                   ; preds = %assert_end233
  %319 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %319(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end235:                                    ; preds = %assert_end233
  %320 = getelementptr inbounds %1, %1* %ph17431, i64 0, i32 2, !dbg !18
  %321 = load i32, i32* %320, align 4, !dbg !18
  %322 = icmp eq i32 %321, 2, !dbg !18
  br i1 %322, label %assert_end239, label %assert_fail236, !dbg !18, !prof !19

assert_fail236:                                   ; preds = %assert_end235
  %323 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %323(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end239:                                    ; preds = %assert_end235
  %324 = getelementptr inbounds %1, %1* %ph17431, i64 0, i32 3, i32 2, !dbg !18
  %325 = load i16, i16* %324, align 2, !dbg !18
  %326 = icmp eq i16 %325, 1, !dbg !18
  %327 = getelementptr inbounds %1, %1* %ph17431, i64 0, i32 3, i32 1, !dbg !18
  %328 = load i8, i8* %327, align 1, !dbg !18
  %329 = icmp eq i8 %328, 32, !dbg !18
  %330 = getelementptr inbounds %1, %1* %ph17431, i64 0, i32 3, i32 0, !dbg !18
  %331 = load i8, i8* %330, align 1, !dbg !18
  %332 = icmp eq i8 %331, 2, !dbg !18
  %333 = and i1 %329, %332, !dbg !18
  %334 = and i1 %326, %333, !dbg !18
  br i1 %334, label %assert_end241, label %assert_fail240, !dbg !18, !prof !19

assert_fail240:                                   ; preds = %assert_end239
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %335(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end241:                                    ; preds = %assert_end239
  %336 = load i64, i64* %default_function.ph.shape59, align 8, !dbg !18, !tbaa !187
  %337 = trunc i64 %336 to i32, !dbg !18
  %338 = icmp eq i32 %337, 1000, !dbg !18
  br i1 %338, label %assert_end243, label %assert_fail242, !dbg !18, !prof !19

assert_fail242:                                   ; preds = %assert_end241
  %339 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %339(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end243:                                    ; preds = %assert_end241
  %340 = getelementptr inbounds i64, i64* %default_function.ph.shape59, i64 1, !dbg !18
  %341 = load i64, i64* %340, align 8, !dbg !18, !tbaa !197
  %342 = trunc i64 %341 to i32, !dbg !18
  %343 = icmp eq i32 %342, 256, !dbg !18
  br i1 %343, label %assert_end245, label %assert_fail244, !dbg !18, !prof !19

assert_fail244:                                   ; preds = %assert_end243
  %344 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %344(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end245:                                    ; preds = %assert_end243
  %345 = icmp eq i64* %default_function.ph.strides60, null, !dbg !18
  br i1 %345, label %if_end247, label %if_then246, !dbg !18, !prof !82

if_then246:                                       ; preds = %assert_end245
  %346 = load i64, i64* %default_function.ph.strides60, align 8, !dbg !18, !tbaa !199
  %347 = trunc i64 %346 to i32, !dbg !18
  %348 = icmp eq i32 %347, 256, !dbg !18
  %349 = getelementptr inbounds i64, i64* %default_function.ph.strides60, i64 1, !dbg !18
  %350 = load i64, i64* %349, align 8, !dbg !18, !tbaa !209
  %351 = trunc i64 %350 to i32, !dbg !18
  %352 = icmp eq i32 %351, 1, !dbg !18
  %353 = and i1 %348, %352, !dbg !18
  br i1 %353, label %if_end247, label %assert_fail248, !dbg !18, !prof !19

if_end247:                                        ; preds = %assert_end245, %if_then246
  %354 = getelementptr inbounds %1, %1* %ph17431, i64 0, i32 6, !dbg !18
  %355 = load i64, i64* %354, align 8, !dbg !18
  %356 = icmp eq i64 %355, 0, !dbg !18
  br i1 %356, label %assert_end251, label %assert_fail250, !dbg !18, !prof !19

assert_fail248:                                   ; preds = %if_then246
  %357 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %357(i8* getelementptr inbounds ([184 x i8], [184 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail250:                                   ; preds = %if_end247
  %358 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %358(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end251:                                    ; preds = %if_end247
  %359 = getelementptr inbounds %1, %1* %ph17431, i64 0, i32 1, i32 0, !dbg !18
  %360 = load i32, i32* %359, align 4, !dbg !18
  %361 = icmp eq i32 %360, 1, !dbg !18
  br i1 %361, label %assert_end253, label %assert_fail252, !dbg !18, !prof !19

assert_fail252:                                   ; preds = %assert_end251
  %362 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %362(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end253:                                    ; preds = %assert_end251
  %363 = getelementptr inbounds %1, %1* %ph17431, i64 0, i32 1, i32 1, !dbg !18
  %364 = load i32, i32* %363, align 4, !dbg !18
  %365 = icmp eq i32 %dev_id, %364, !dbg !18
  br i1 %365, label %assert_end255, label %assert_fail254, !dbg !18, !prof !19

assert_fail254:                                   ; preds = %assert_end253
  %366 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %366(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end255:                                    ; preds = %assert_end253
  %367 = getelementptr inbounds %1, %1* %ph18432, i64 0, i32 2, !dbg !18
  %368 = load i32, i32* %367, align 4, !dbg !18
  %369 = icmp eq i32 %368, 2, !dbg !18
  br i1 %369, label %assert_end259, label %assert_fail256, !dbg !18, !prof !19

assert_fail256:                                   ; preds = %assert_end255
  %370 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %370(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end259:                                    ; preds = %assert_end255
  %371 = getelementptr inbounds %1, %1* %ph18432, i64 0, i32 3, i32 2, !dbg !18
  %372 = load i16, i16* %371, align 2, !dbg !18
  %373 = icmp eq i16 %372, 1, !dbg !18
  %374 = getelementptr inbounds %1, %1* %ph18432, i64 0, i32 3, i32 1, !dbg !18
  %375 = load i8, i8* %374, align 1, !dbg !18
  %376 = icmp eq i8 %375, 32, !dbg !18
  %377 = getelementptr inbounds %1, %1* %ph18432, i64 0, i32 3, i32 0, !dbg !18
  %378 = load i8, i8* %377, align 1, !dbg !18
  %379 = icmp eq i8 %378, 2, !dbg !18
  %380 = and i1 %376, %379, !dbg !18
  %381 = and i1 %373, %380, !dbg !18
  br i1 %381, label %assert_end261, label %assert_fail260, !dbg !18, !prof !19

assert_fail260:                                   ; preds = %assert_end259
  %382 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %382(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end261:                                    ; preds = %assert_end259
  %383 = load i64, i64* %default_function.ph.shape66, align 8, !dbg !18, !tbaa !211
  %384 = trunc i64 %383 to i32, !dbg !18
  %385 = icmp eq i32 %384, 256, !dbg !18
  br i1 %385, label %assert_end263, label %assert_fail262, !dbg !18, !prof !19

assert_fail262:                                   ; preds = %assert_end261
  %386 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %386(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end263:                                    ; preds = %assert_end261
  %387 = getelementptr inbounds i64, i64* %default_function.ph.shape66, i64 1, !dbg !18
  %388 = load i64, i64* %387, align 8, !dbg !18, !tbaa !221
  %389 = trunc i64 %388 to i32, !dbg !18
  %390 = icmp eq i32 %389, 256, !dbg !18
  br i1 %390, label %assert_end265, label %assert_fail264, !dbg !18, !prof !19

assert_fail264:                                   ; preds = %assert_end263
  %391 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %391(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end265:                                    ; preds = %assert_end263
  %392 = icmp eq i64* %default_function.ph.strides67, null, !dbg !18
  br i1 %392, label %if_end267, label %if_then266, !dbg !18, !prof !82

if_then266:                                       ; preds = %assert_end265
  %393 = load i64, i64* %default_function.ph.strides67, align 8, !dbg !18, !tbaa !223
  %394 = trunc i64 %393 to i32, !dbg !18
  %395 = icmp eq i32 %394, 256, !dbg !18
  %396 = getelementptr inbounds i64, i64* %default_function.ph.strides67, i64 1, !dbg !18
  %397 = load i64, i64* %396, align 8, !dbg !18, !tbaa !233
  %398 = trunc i64 %397 to i32, !dbg !18
  %399 = icmp eq i32 %398, 1, !dbg !18
  %400 = and i1 %395, %399, !dbg !18
  br i1 %400, label %if_end267, label %assert_fail268, !dbg !18, !prof !19

if_end267:                                        ; preds = %assert_end265, %if_then266
  %401 = getelementptr inbounds %1, %1* %ph18432, i64 0, i32 6, !dbg !18
  %402 = load i64, i64* %401, align 8, !dbg !18
  %403 = icmp eq i64 %402, 0, !dbg !18
  br i1 %403, label %assert_end271, label %assert_fail270, !dbg !18, !prof !19

assert_fail268:                                   ; preds = %if_then266
  %404 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %404(i8* getelementptr inbounds ([184 x i8], [184 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail270:                                   ; preds = %if_end267
  %405 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %405(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end271:                                    ; preds = %if_end267
  %406 = getelementptr inbounds %1, %1* %ph18432, i64 0, i32 1, i32 0, !dbg !18
  %407 = load i32, i32* %406, align 4, !dbg !18
  %408 = icmp eq i32 %407, 1, !dbg !18
  br i1 %408, label %assert_end273, label %assert_fail272, !dbg !18, !prof !19

assert_fail272:                                   ; preds = %assert_end271
  %409 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %409(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end273:                                    ; preds = %assert_end271
  %410 = getelementptr inbounds %1, %1* %ph18432, i64 0, i32 1, i32 1, !dbg !18
  %411 = load i32, i32* %410, align 4, !dbg !18
  %412 = icmp eq i32 %dev_id, %411, !dbg !18
  br i1 %412, label %assert_end275, label %assert_fail274, !dbg !18, !prof !19

assert_fail274:                                   ; preds = %assert_end273
  %413 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %413(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end275:                                    ; preds = %assert_end273
  %414 = getelementptr inbounds %1, %1* %ph19433, i64 0, i32 2, !dbg !18
  %415 = load i32, i32* %414, align 4, !dbg !18
  %416 = icmp eq i32 %415, 1, !dbg !18
  br i1 %416, label %assert_end279, label %assert_fail276, !dbg !18, !prof !19

assert_fail276:                                   ; preds = %assert_end275
  %417 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %417(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end279:                                    ; preds = %assert_end275
  %418 = getelementptr inbounds %1, %1* %ph19433, i64 0, i32 3, i32 2, !dbg !18
  %419 = load i16, i16* %418, align 2, !dbg !18
  %420 = icmp eq i16 %419, 1, !dbg !18
  %421 = getelementptr inbounds %1, %1* %ph19433, i64 0, i32 3, i32 1, !dbg !18
  %422 = load i8, i8* %421, align 1, !dbg !18
  %423 = icmp eq i8 %422, 32, !dbg !18
  %424 = getelementptr inbounds %1, %1* %ph19433, i64 0, i32 3, i32 0, !dbg !18
  %425 = load i8, i8* %424, align 1, !dbg !18
  %426 = icmp eq i8 %425, 2, !dbg !18
  %427 = and i1 %423, %426, !dbg !18
  %428 = and i1 %420, %427, !dbg !18
  br i1 %428, label %assert_end281, label %assert_fail280, !dbg !18, !prof !19

assert_fail280:                                   ; preds = %assert_end279
  %429 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %429(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end281:                                    ; preds = %assert_end279
  %430 = load i64, i64* %default_function.ph.shape73, align 8, !dbg !18, !tbaa !235
  %431 = trunc i64 %430 to i32, !dbg !18
  %432 = icmp eq i32 %431, 256, !dbg !18
  br i1 %432, label %assert_end283, label %assert_fail282, !dbg !18, !prof !19

assert_fail282:                                   ; preds = %assert_end281
  %433 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %433(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end283:                                    ; preds = %assert_end281
  %434 = icmp eq i64* %default_function.ph.strides74, null, !dbg !18
  br i1 %434, label %if_end285, label %if_then284, !dbg !18, !prof !82

if_then284:                                       ; preds = %assert_end283
  %435 = load i64, i64* %default_function.ph.strides74, align 8, !dbg !18, !tbaa !245
  %436 = trunc i64 %435 to i32, !dbg !18
  %437 = icmp eq i32 %436, 1, !dbg !18
  br i1 %437, label %if_end285, label %assert_fail286, !dbg !18, !prof !19

if_end285:                                        ; preds = %assert_end283, %if_then284
  %438 = getelementptr inbounds %1, %1* %ph19433, i64 0, i32 6, !dbg !18
  %439 = load i64, i64* %438, align 8, !dbg !18
  %440 = icmp eq i64 %439, 0, !dbg !18
  br i1 %440, label %assert_end289, label %assert_fail288, !dbg !18, !prof !19

assert_fail286:                                   ; preds = %if_then284
  %441 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %441(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail288:                                   ; preds = %if_end285
  %442 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %442(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end289:                                    ; preds = %if_end285
  %443 = getelementptr inbounds %1, %1* %ph19433, i64 0, i32 1, i32 0, !dbg !18
  %444 = load i32, i32* %443, align 4, !dbg !18
  %445 = icmp eq i32 %444, 1, !dbg !18
  br i1 %445, label %assert_end291, label %assert_fail290, !dbg !18, !prof !19

assert_fail290:                                   ; preds = %assert_end289
  %446 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %446(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end291:                                    ; preds = %assert_end289
  %447 = getelementptr inbounds %1, %1* %ph19433, i64 0, i32 1, i32 1, !dbg !18
  %448 = load i32, i32* %447, align 4, !dbg !18
  %449 = icmp eq i32 %dev_id, %448, !dbg !18
  br i1 %449, label %assert_end293, label %assert_fail292, !dbg !18, !prof !19

assert_fail292:                                   ; preds = %assert_end291
  %450 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %450(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end293:                                    ; preds = %assert_end291
  %451 = getelementptr inbounds %1, %1* %ph20434, i64 0, i32 2, !dbg !18
  %452 = load i32, i32* %451, align 4, !dbg !18
  %453 = icmp eq i32 %452, 2, !dbg !18
  br i1 %453, label %assert_end297, label %assert_fail294, !dbg !18, !prof !19

assert_fail294:                                   ; preds = %assert_end293
  %454 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %454(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end297:                                    ; preds = %assert_end293
  %455 = getelementptr inbounds %1, %1* %ph20434, i64 0, i32 3, i32 2, !dbg !18
  %456 = load i16, i16* %455, align 2, !dbg !18
  %457 = icmp eq i16 %456, 1, !dbg !18
  %458 = getelementptr inbounds %1, %1* %ph20434, i64 0, i32 3, i32 1, !dbg !18
  %459 = load i8, i8* %458, align 1, !dbg !18
  %460 = icmp eq i8 %459, 32, !dbg !18
  %461 = getelementptr inbounds %1, %1* %ph20434, i64 0, i32 3, i32 0, !dbg !18
  %462 = load i8, i8* %461, align 1, !dbg !18
  %463 = icmp eq i8 %462, 2, !dbg !18
  %464 = and i1 %460, %463, !dbg !18
  %465 = and i1 %457, %464, !dbg !18
  br i1 %465, label %assert_end299, label %assert_fail298, !dbg !18, !prof !19

assert_fail298:                                   ; preds = %assert_end297
  %466 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %466(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end299:                                    ; preds = %assert_end297
  %467 = load i64, i64* %default_function.ph.shape80, align 8, !dbg !18, !tbaa !255
  %468 = trunc i64 %467 to i32, !dbg !18
  %469 = icmp eq i32 %468, 1000, !dbg !18
  br i1 %469, label %assert_end301, label %assert_fail300, !dbg !18, !prof !19

assert_fail300:                                   ; preds = %assert_end299
  %470 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %470(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end301:                                    ; preds = %assert_end299
  %471 = getelementptr inbounds i64, i64* %default_function.ph.shape80, i64 1, !dbg !18
  %472 = load i64, i64* %471, align 8, !dbg !18, !tbaa !265
  %473 = trunc i64 %472 to i32, !dbg !18
  %474 = icmp eq i32 %473, 256, !dbg !18
  br i1 %474, label %assert_end303, label %assert_fail302, !dbg !18, !prof !19

assert_fail302:                                   ; preds = %assert_end301
  %475 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %475(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end303:                                    ; preds = %assert_end301
  %476 = icmp eq i64* %default_function.ph.strides81, null, !dbg !18
  br i1 %476, label %if_end305, label %if_then304, !dbg !18, !prof !82

if_then304:                                       ; preds = %assert_end303
  %477 = load i64, i64* %default_function.ph.strides81, align 8, !dbg !18, !tbaa !267
  %478 = trunc i64 %477 to i32, !dbg !18
  %479 = icmp eq i32 %478, 256, !dbg !18
  %480 = getelementptr inbounds i64, i64* %default_function.ph.strides81, i64 1, !dbg !18
  %481 = load i64, i64* %480, align 8, !dbg !18, !tbaa !277
  %482 = trunc i64 %481 to i32, !dbg !18
  %483 = icmp eq i32 %482, 1, !dbg !18
  %484 = and i1 %479, %483, !dbg !18
  br i1 %484, label %if_end305, label %assert_fail306, !dbg !18, !prof !19

if_end305:                                        ; preds = %assert_end303, %if_then304
  %485 = getelementptr inbounds %1, %1* %ph20434, i64 0, i32 6, !dbg !18
  %486 = load i64, i64* %485, align 8, !dbg !18
  %487 = icmp eq i64 %486, 0, !dbg !18
  br i1 %487, label %assert_end309, label %assert_fail308, !dbg !18, !prof !19

assert_fail306:                                   ; preds = %if_then304
  %488 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %488(i8* getelementptr inbounds ([184 x i8], [184 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail308:                                   ; preds = %if_end305
  %489 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %489(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end309:                                    ; preds = %if_end305
  %490 = getelementptr inbounds %1, %1* %ph20434, i64 0, i32 1, i32 0, !dbg !18
  %491 = load i32, i32* %490, align 4, !dbg !18
  %492 = icmp eq i32 %491, 1, !dbg !18
  br i1 %492, label %assert_end311, label %assert_fail310, !dbg !18, !prof !19

assert_fail310:                                   ; preds = %assert_end309
  %493 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %493(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end311:                                    ; preds = %assert_end309
  %494 = getelementptr inbounds %1, %1* %ph20434, i64 0, i32 1, i32 1, !dbg !18
  %495 = load i32, i32* %494, align 4, !dbg !18
  %496 = icmp eq i32 %dev_id, %495, !dbg !18
  br i1 %496, label %assert_end313, label %assert_fail312, !dbg !18, !prof !19

assert_fail312:                                   ; preds = %assert_end311
  %497 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %497(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end313:                                    ; preds = %assert_end311
  %498 = getelementptr inbounds %1, %1* %ph21435, i64 0, i32 2, !dbg !18
  %499 = load i32, i32* %498, align 4, !dbg !18
  %500 = icmp eq i32 %499, 2, !dbg !18
  br i1 %500, label %assert_end317, label %assert_fail314, !dbg !18, !prof !19

assert_fail314:                                   ; preds = %assert_end313
  %501 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %501(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end317:                                    ; preds = %assert_end313
  %502 = getelementptr inbounds %1, %1* %ph21435, i64 0, i32 3, i32 2, !dbg !18
  %503 = load i16, i16* %502, align 2, !dbg !18
  %504 = icmp eq i16 %503, 1, !dbg !18
  %505 = getelementptr inbounds %1, %1* %ph21435, i64 0, i32 3, i32 1, !dbg !18
  %506 = load i8, i8* %505, align 1, !dbg !18
  %507 = icmp eq i8 %506, 32, !dbg !18
  %508 = getelementptr inbounds %1, %1* %ph21435, i64 0, i32 3, i32 0, !dbg !18
  %509 = load i8, i8* %508, align 1, !dbg !18
  %510 = icmp eq i8 %509, 2, !dbg !18
  %511 = and i1 %507, %510, !dbg !18
  %512 = and i1 %504, %511, !dbg !18
  br i1 %512, label %assert_end319, label %assert_fail318, !dbg !18, !prof !19

assert_fail318:                                   ; preds = %assert_end317
  %513 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %513(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end319:                                    ; preds = %assert_end317
  %514 = load i64, i64* %default_function.ph.shape87, align 8, !dbg !18, !tbaa !279
  %515 = trunc i64 %514 to i32, !dbg !18
  %516 = icmp eq i32 %515, 256, !dbg !18
  br i1 %516, label %assert_end321, label %assert_fail320, !dbg !18, !prof !19

assert_fail320:                                   ; preds = %assert_end319
  %517 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %517(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end321:                                    ; preds = %assert_end319
  %518 = getelementptr inbounds i64, i64* %default_function.ph.shape87, i64 1, !dbg !18
  %519 = load i64, i64* %518, align 8, !dbg !18, !tbaa !289
  %520 = trunc i64 %519 to i32, !dbg !18
  %521 = icmp eq i32 %520, 256, !dbg !18
  br i1 %521, label %assert_end323, label %assert_fail322, !dbg !18, !prof !19

assert_fail322:                                   ; preds = %assert_end321
  %522 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %522(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end323:                                    ; preds = %assert_end321
  %523 = icmp eq i64* %default_function.ph.strides88, null, !dbg !18
  br i1 %523, label %if_end325, label %if_then324, !dbg !18, !prof !82

if_then324:                                       ; preds = %assert_end323
  %524 = load i64, i64* %default_function.ph.strides88, align 8, !dbg !18, !tbaa !291
  %525 = trunc i64 %524 to i32, !dbg !18
  %526 = icmp eq i32 %525, 256, !dbg !18
  %527 = getelementptr inbounds i64, i64* %default_function.ph.strides88, i64 1, !dbg !18
  %528 = load i64, i64* %527, align 8, !dbg !18, !tbaa !301
  %529 = trunc i64 %528 to i32, !dbg !18
  %530 = icmp eq i32 %529, 1, !dbg !18
  %531 = and i1 %526, %530, !dbg !18
  br i1 %531, label %if_end325, label %assert_fail326, !dbg !18, !prof !19

if_end325:                                        ; preds = %assert_end323, %if_then324
  %532 = getelementptr inbounds %1, %1* %ph21435, i64 0, i32 6, !dbg !18
  %533 = load i64, i64* %532, align 8, !dbg !18
  %534 = icmp eq i64 %533, 0, !dbg !18
  br i1 %534, label %assert_end329, label %assert_fail328, !dbg !18, !prof !19

assert_fail326:                                   ; preds = %if_then324
  %535 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %535(i8* getelementptr inbounds ([184 x i8], [184 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail328:                                   ; preds = %if_end325
  %536 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %536(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end329:                                    ; preds = %if_end325
  %537 = getelementptr inbounds %1, %1* %ph21435, i64 0, i32 1, i32 0, !dbg !18
  %538 = load i32, i32* %537, align 4, !dbg !18
  %539 = icmp eq i32 %538, 1, !dbg !18
  br i1 %539, label %assert_end331, label %assert_fail330, !dbg !18, !prof !19

assert_fail330:                                   ; preds = %assert_end329
  %540 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %540(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end331:                                    ; preds = %assert_end329
  %541 = getelementptr inbounds %1, %1* %ph21435, i64 0, i32 1, i32 1, !dbg !18
  %542 = load i32, i32* %541, align 4, !dbg !18
  %543 = icmp eq i32 %dev_id, %542, !dbg !18
  br i1 %543, label %assert_end333, label %assert_fail332, !dbg !18, !prof !19

assert_fail332:                                   ; preds = %assert_end331
  %544 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %544(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end333:                                    ; preds = %assert_end331
  %545 = getelementptr inbounds %1, %1* %ph22436, i64 0, i32 2, !dbg !18
  %546 = load i32, i32* %545, align 4, !dbg !18
  %547 = icmp eq i32 %546, 1, !dbg !18
  br i1 %547, label %assert_end337, label %assert_fail334, !dbg !18, !prof !19

assert_fail334:                                   ; preds = %assert_end333
  %548 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %548(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end337:                                    ; preds = %assert_end333
  %549 = getelementptr inbounds %1, %1* %ph22436, i64 0, i32 3, i32 2, !dbg !18
  %550 = load i16, i16* %549, align 2, !dbg !18
  %551 = icmp eq i16 %550, 1, !dbg !18
  %552 = getelementptr inbounds %1, %1* %ph22436, i64 0, i32 3, i32 1, !dbg !18
  %553 = load i8, i8* %552, align 1, !dbg !18
  %554 = icmp eq i8 %553, 32, !dbg !18
  %555 = getelementptr inbounds %1, %1* %ph22436, i64 0, i32 3, i32 0, !dbg !18
  %556 = load i8, i8* %555, align 1, !dbg !18
  %557 = icmp eq i8 %556, 2, !dbg !18
  %558 = and i1 %554, %557, !dbg !18
  %559 = and i1 %551, %558, !dbg !18
  br i1 %559, label %assert_end339, label %assert_fail338, !dbg !18, !prof !19

assert_fail338:                                   ; preds = %assert_end337
  %560 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %560(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end339:                                    ; preds = %assert_end337
  %561 = load i64, i64* %default_function.ph.shape94, align 8, !dbg !18, !tbaa !303
  %562 = trunc i64 %561 to i32, !dbg !18
  %563 = icmp eq i32 %562, 256, !dbg !18
  br i1 %563, label %assert_end341, label %assert_fail340, !dbg !18, !prof !19

assert_fail340:                                   ; preds = %assert_end339
  %564 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %564(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end341:                                    ; preds = %assert_end339
  %565 = icmp eq i64* %default_function.ph.strides95, null, !dbg !18
  br i1 %565, label %if_end343, label %if_then342, !dbg !18, !prof !82

if_then342:                                       ; preds = %assert_end341
  %566 = load i64, i64* %default_function.ph.strides95, align 8, !dbg !18, !tbaa !313
  %567 = trunc i64 %566 to i32, !dbg !18
  %568 = icmp eq i32 %567, 1, !dbg !18
  br i1 %568, label %if_end343, label %assert_fail344, !dbg !18, !prof !19

if_end343:                                        ; preds = %assert_end341, %if_then342
  %569 = getelementptr inbounds %1, %1* %ph22436, i64 0, i32 6, !dbg !18
  %570 = load i64, i64* %569, align 8, !dbg !18
  %571 = icmp eq i64 %570, 0, !dbg !18
  br i1 %571, label %assert_end347, label %assert_fail346, !dbg !18, !prof !19

assert_fail344:                                   ; preds = %if_then342
  %572 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %572(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail346:                                   ; preds = %if_end343
  %573 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %573(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end347:                                    ; preds = %if_end343
  %574 = getelementptr inbounds %1, %1* %ph22436, i64 0, i32 1, i32 0, !dbg !18
  %575 = load i32, i32* %574, align 4, !dbg !18
  %576 = icmp eq i32 %575, 1, !dbg !18
  br i1 %576, label %assert_end349, label %assert_fail348, !dbg !18, !prof !19

assert_fail348:                                   ; preds = %assert_end347
  %577 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %577(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end349:                                    ; preds = %assert_end347
  %578 = getelementptr inbounds %1, %1* %ph22436, i64 0, i32 1, i32 1, !dbg !18
  %579 = load i32, i32* %578, align 4, !dbg !18
  %580 = icmp eq i32 %dev_id, %579, !dbg !18
  br i1 %580, label %assert_end351, label %assert_fail350, !dbg !18, !prof !19

assert_fail350:                                   ; preds = %assert_end349
  %581 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %581(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end351:                                    ; preds = %assert_end349
  %582 = getelementptr inbounds %1, %1* %ph23437, i64 0, i32 2, !dbg !18
  %583 = load i32, i32* %582, align 4, !dbg !18
  %584 = icmp eq i32 %583, 2, !dbg !18
  br i1 %584, label %assert_end355, label %assert_fail352, !dbg !18, !prof !19

assert_fail352:                                   ; preds = %assert_end351
  %585 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %585(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end355:                                    ; preds = %assert_end351
  %586 = getelementptr inbounds %1, %1* %ph23437, i64 0, i32 3, i32 2, !dbg !18
  %587 = load i16, i16* %586, align 2, !dbg !18
  %588 = icmp eq i16 %587, 1, !dbg !18
  %589 = getelementptr inbounds %1, %1* %ph23437, i64 0, i32 3, i32 1, !dbg !18
  %590 = load i8, i8* %589, align 1, !dbg !18
  %591 = icmp eq i8 %590, 32, !dbg !18
  %592 = getelementptr inbounds %1, %1* %ph23437, i64 0, i32 3, i32 0, !dbg !18
  %593 = load i8, i8* %592, align 1, !dbg !18
  %594 = icmp eq i8 %593, 2, !dbg !18
  %595 = and i1 %591, %594, !dbg !18
  %596 = and i1 %588, %595, !dbg !18
  br i1 %596, label %assert_end357, label %assert_fail356, !dbg !18, !prof !19

assert_fail356:                                   ; preds = %assert_end355
  %597 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %597(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end357:                                    ; preds = %assert_end355
  %598 = load i64, i64* %default_function.ph.shape101, align 8, !dbg !18, !tbaa !323
  %599 = trunc i64 %598 to i32, !dbg !18
  %600 = icmp eq i32 %599, 256, !dbg !18
  br i1 %600, label %assert_end359, label %assert_fail358, !dbg !18, !prof !19

assert_fail358:                                   ; preds = %assert_end357
  %601 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %601(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end359:                                    ; preds = %assert_end357
  %602 = getelementptr inbounds i64, i64* %default_function.ph.shape101, i64 1, !dbg !18
  %603 = load i64, i64* %602, align 8, !dbg !18, !tbaa !333
  %604 = trunc i64 %603 to i32, !dbg !18
  %605 = icmp eq i32 %604, 128, !dbg !18
  br i1 %605, label %assert_end361, label %assert_fail360, !dbg !18, !prof !19

assert_fail360:                                   ; preds = %assert_end359
  %606 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %606(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end361:                                    ; preds = %assert_end359
  %607 = icmp eq i64* %default_function.ph.strides102, null, !dbg !18
  br i1 %607, label %if_end363, label %if_then362, !dbg !18, !prof !82

if_then362:                                       ; preds = %assert_end361
  %608 = load i64, i64* %default_function.ph.strides102, align 8, !dbg !18, !tbaa !335
  %609 = trunc i64 %608 to i32, !dbg !18
  %610 = icmp eq i32 %609, 128, !dbg !18
  %611 = getelementptr inbounds i64, i64* %default_function.ph.strides102, i64 1, !dbg !18
  %612 = load i64, i64* %611, align 8, !dbg !18, !tbaa !345
  %613 = trunc i64 %612 to i32, !dbg !18
  %614 = icmp eq i32 %613, 1, !dbg !18
  %615 = and i1 %610, %614, !dbg !18
  br i1 %615, label %if_end363, label %assert_fail364, !dbg !18, !prof !19

if_end363:                                        ; preds = %assert_end361, %if_then362
  %616 = getelementptr inbounds %1, %1* %ph23437, i64 0, i32 6, !dbg !18
  %617 = load i64, i64* %616, align 8, !dbg !18
  %618 = icmp eq i64 %617, 0, !dbg !18
  br i1 %618, label %assert_end367, label %assert_fail366, !dbg !18, !prof !19

assert_fail364:                                   ; preds = %if_then362
  %619 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %619(i8* getelementptr inbounds ([184 x i8], [184 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail366:                                   ; preds = %if_end363
  %620 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %620(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end367:                                    ; preds = %if_end363
  %621 = getelementptr inbounds %1, %1* %ph23437, i64 0, i32 1, i32 0, !dbg !18
  %622 = load i32, i32* %621, align 4, !dbg !18
  %623 = icmp eq i32 %622, 1, !dbg !18
  br i1 %623, label %assert_end369, label %assert_fail368, !dbg !18, !prof !19

assert_fail368:                                   ; preds = %assert_end367
  %624 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %624(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end369:                                    ; preds = %assert_end367
  %625 = getelementptr inbounds %1, %1* %ph23437, i64 0, i32 1, i32 1, !dbg !18
  %626 = load i32, i32* %625, align 4, !dbg !18
  %627 = icmp eq i32 %dev_id, %626, !dbg !18
  br i1 %627, label %assert_end371, label %assert_fail370, !dbg !18, !prof !19

assert_fail370:                                   ; preds = %assert_end369
  %628 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %628(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end371:                                    ; preds = %assert_end369
  %629 = getelementptr inbounds %1, %1* %ph24438, i64 0, i32 2, !dbg !18
  %630 = load i32, i32* %629, align 4, !dbg !18
  %631 = icmp eq i32 %630, 1, !dbg !18
  br i1 %631, label %assert_end375, label %assert_fail372, !dbg !18, !prof !19

assert_fail372:                                   ; preds = %assert_end371
  %632 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %632(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end375:                                    ; preds = %assert_end371
  %633 = getelementptr inbounds %1, %1* %ph24438, i64 0, i32 3, i32 2, !dbg !18
  %634 = load i16, i16* %633, align 2, !dbg !18
  %635 = icmp eq i16 %634, 1, !dbg !18
  %636 = getelementptr inbounds %1, %1* %ph24438, i64 0, i32 3, i32 1, !dbg !18
  %637 = load i8, i8* %636, align 1, !dbg !18
  %638 = icmp eq i8 %637, 32, !dbg !18
  %639 = getelementptr inbounds %1, %1* %ph24438, i64 0, i32 3, i32 0, !dbg !18
  %640 = load i8, i8* %639, align 1, !dbg !18
  %641 = icmp eq i8 %640, 2, !dbg !18
  %642 = and i1 %638, %641, !dbg !18
  %643 = and i1 %635, %642, !dbg !18
  br i1 %643, label %assert_end377, label %assert_fail376, !dbg !18, !prof !19

assert_fail376:                                   ; preds = %assert_end375
  %644 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %644(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end377:                                    ; preds = %assert_end375
  %645 = load i64, i64* %default_function.ph.shape108, align 8, !dbg !18, !tbaa !347
  %646 = trunc i64 %645 to i32, !dbg !18
  %647 = icmp eq i32 %646, 128, !dbg !18
  br i1 %647, label %assert_end379, label %assert_fail378, !dbg !18, !prof !19

assert_fail378:                                   ; preds = %assert_end377
  %648 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %648(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end379:                                    ; preds = %assert_end377
  %649 = icmp eq i64* %default_function.ph.strides109, null, !dbg !18
  br i1 %649, label %if_end381, label %if_then380, !dbg !18, !prof !82

if_then380:                                       ; preds = %assert_end379
  %650 = load i64, i64* %default_function.ph.strides109, align 8, !dbg !18, !tbaa !357
  %651 = trunc i64 %650 to i32, !dbg !18
  %652 = icmp eq i32 %651, 1, !dbg !18
  br i1 %652, label %if_end381, label %assert_fail382, !dbg !18, !prof !19

if_end381:                                        ; preds = %assert_end379, %if_then380
  %653 = getelementptr inbounds %1, %1* %ph24438, i64 0, i32 6, !dbg !18
  %654 = load i64, i64* %653, align 8, !dbg !18
  %655 = icmp eq i64 %654, 0, !dbg !18
  br i1 %655, label %assert_end385, label %assert_fail384, !dbg !18, !prof !19

assert_fail382:                                   ; preds = %if_then380
  %656 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %656(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail384:                                   ; preds = %if_end381
  %657 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %657(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end385:                                    ; preds = %if_end381
  %658 = getelementptr inbounds %1, %1* %ph24438, i64 0, i32 1, i32 0, !dbg !18
  %659 = load i32, i32* %658, align 4, !dbg !18
  %660 = icmp eq i32 %659, 1, !dbg !18
  br i1 %660, label %assert_end387, label %assert_fail386, !dbg !18, !prof !19

assert_fail386:                                   ; preds = %assert_end385
  %661 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %661(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end387:                                    ; preds = %assert_end385
  %662 = getelementptr inbounds %1, %1* %ph24438, i64 0, i32 1, i32 1, !dbg !18
  %663 = load i32, i32* %662, align 4, !dbg !18
  %664 = icmp eq i32 %dev_id, %663, !dbg !18
  br i1 %664, label %assert_end389, label %assert_fail388, !dbg !18, !prof !19

assert_fail388:                                   ; preds = %assert_end387
  %665 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %665(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end389:                                    ; preds = %assert_end387
  %666 = getelementptr inbounds %1, %1* %T_add439, i64 0, i32 2, !dbg !18
  %667 = load i32, i32* %666, align 4, !dbg !18
  %668 = icmp eq i32 %667, 2, !dbg !18
  br i1 %668, label %assert_end393, label %assert_fail390, !dbg !18, !prof !19

assert_fail390:                                   ; preds = %assert_end389
  %669 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %669(i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end393:                                    ; preds = %assert_end389
  %670 = getelementptr inbounds %1, %1* %T_add439, i64 0, i32 3, i32 2, !dbg !18
  %671 = load i16, i16* %670, align 2, !dbg !18
  %672 = icmp eq i16 %671, 1, !dbg !18
  %673 = getelementptr inbounds %1, %1* %T_add439, i64 0, i32 3, i32 1, !dbg !18
  %674 = load i8, i8* %673, align 1, !dbg !18
  %675 = icmp eq i8 %674, 32, !dbg !18
  %676 = getelementptr inbounds %1, %1* %T_add439, i64 0, i32 3, i32 0, !dbg !18
  %677 = load i8, i8* %676, align 1, !dbg !18
  %678 = icmp eq i8 %677, 2, !dbg !18
  %679 = and i1 %675, %678, !dbg !18
  %680 = and i1 %672, %679, !dbg !18
  br i1 %680, label %assert_end395, label %assert_fail394, !dbg !18, !prof !19

assert_fail394:                                   ; preds = %assert_end393
  %681 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %681(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end395:                                    ; preds = %assert_end393
  %682 = load i64, i64* %default_function.T_add.shape, align 8, !dbg !18, !tbaa !367
  %683 = trunc i64 %682 to i32, !dbg !18
  %684 = icmp eq i32 %683, 2, !dbg !18
  br i1 %684, label %assert_end397, label %assert_fail396, !dbg !18, !prof !19

assert_fail396:                                   ; preds = %assert_end395
  %685 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %685(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end397:                                    ; preds = %assert_end395
  %686 = getelementptr inbounds i64, i64* %default_function.T_add.shape, i64 1, !dbg !18
  %687 = load i64, i64* %686, align 8, !dbg !18, !tbaa !377
  %688 = trunc i64 %687 to i32, !dbg !18
  %689 = icmp eq i32 %688, 128, !dbg !18
  br i1 %689, label %assert_end399, label %assert_fail398, !dbg !18, !prof !19

assert_fail398:                                   ; preds = %assert_end397
  %690 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %690(i8* getelementptr inbounds ([198 x i8], [198 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end399:                                    ; preds = %assert_end397
  %691 = icmp eq i64* %default_function.T_add.strides, null, !dbg !18
  br i1 %691, label %if_end401, label %if_then400, !dbg !18, !prof !82

if_then400:                                       ; preds = %assert_end399
  %692 = load i64, i64* %default_function.T_add.strides, align 8, !dbg !18, !tbaa !379
  %693 = trunc i64 %692 to i32, !dbg !18
  %694 = icmp eq i32 %693, 128, !dbg !18
  %695 = getelementptr inbounds i64, i64* %default_function.T_add.strides, i64 1, !dbg !18
  %696 = load i64, i64* %695, align 8, !dbg !18, !tbaa !389
  %697 = trunc i64 %696 to i32, !dbg !18
  %698 = icmp eq i32 %697, 1, !dbg !18
  %699 = and i1 %694, %698, !dbg !18
  br i1 %699, label %if_end401, label %assert_fail402, !dbg !18, !prof !19

if_end401:                                        ; preds = %assert_end399, %if_then400
  %700 = getelementptr inbounds %1, %1* %T_add439, i64 0, i32 6, !dbg !18
  %701 = load i64, i64* %700, align 8, !dbg !18
  %702 = icmp eq i64 %701, 0, !dbg !18
  br i1 %702, label %assert_end405, label %assert_fail404, !dbg !18, !prof !19

assert_fail402:                                   ; preds = %if_then400
  %703 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %703(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail404:                                   ; preds = %if_end401
  %704 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %704(i8* getelementptr inbounds ([199 x i8], [199 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end405:                                    ; preds = %if_end401
  %705 = getelementptr inbounds %1, %1* %T_add439, i64 0, i32 1, i32 0, !dbg !18
  %706 = load i32, i32* %705, align 4, !dbg !18
  %707 = icmp eq i32 %706, 1, !dbg !18
  br i1 %707, label %assert_end407, label %assert_fail406, !dbg !18, !prof !19

assert_fail406:                                   ; preds = %assert_end405
  %708 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %708(i8* getelementptr inbounds ([179 x i8], [179 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end407:                                    ; preds = %assert_end405
  %709 = getelementptr inbounds %1, %1* %T_add439, i64 0, i32 1, i32 1, !dbg !18
  %710 = load i32, i32* %709, align 4, !dbg !18
  %711 = icmp eq i32 %dev_id, %710, !dbg !18
  br i1 %711, label %assert_end409, label %assert_fail408, !dbg !18, !prof !19

assert_fail408:                                   ; preds = %assert_end407
  %712 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %712(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end409:                                    ; preds = %assert_end407
  %713 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %T_add_void_ptr453, i32* nonnull %stack_tcode425.sub, float* %ph_void_ptr440, float* %ph_void_ptr33442, float* %ph_void_ptr26441, float* %ph_void_ptr40443, float* %ph_void_ptr47444, float* %ph_void_ptr75448, float* %ph_void_ptr54445, float* %ph_void_ptr61446, float* %ph_void_ptr68447, float* %ph_void_ptr82449, float* %ph_void_ptr89450, float* %ph_void_ptr96451, float* %ph_void_ptr103452), !dbg !18
  ret i32 %713, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5, float* noalias align 64 %6, float* noalias align 64 %7, float* noalias align 64 %8, float* noalias align 64 %9, float* noalias align 64 %10, float* noalias align 64 %11, float* noalias align 64 %12, float* noalias align 64 %13, float* noalias align 64 %14, float* noalias align 64 %15) unnamed_addr #2 {
entry:
  %16 = alloca i8*, align 8
  %17 = bitcast i8* %0 to %0*
  %18 = bitcast i8* %0 to float**
  store float* %1, float** %18, align 8
  %19 = getelementptr inbounds i8, i8* %0, i64 8
  %20 = bitcast i8* %19 to float**
  store float* %3, float** %20, align 8
  %21 = getelementptr inbounds i8, i8* %0, i64 16
  %22 = bitcast i8* %21 to float**
  store float* %4, float** %22, align 8
  %23 = getelementptr inbounds i8, i8* %0, i64 24
  %24 = bitcast i8* %23 to float**
  store float* %5, float** %24, align 8
  %25 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %25, align 4, !tbaa !391
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to float**
  store float* %6, float** %27, align 8
  %28 = getelementptr inbounds i32, i32* %2, i64 4
  %29 = getelementptr inbounds i8, i8* %0, i64 40
  %30 = bitcast i8* %29 to float**
  store float* %7, float** %30, align 8
  %31 = getelementptr inbounds i8, i8* %0, i64 48
  %32 = bitcast i8* %31 to float**
  store float* %8, float** %32, align 8
  %33 = getelementptr inbounds i8, i8* %0, i64 56
  %34 = bitcast i8* %33 to float**
  store float* %9, float** %34, align 8
  %35 = bitcast i32* %28 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %35, align 4, !tbaa !400
  %36 = getelementptr inbounds i8, i8* %0, i64 64
  %37 = bitcast i8* %36 to float**
  store float* %10, float** %37, align 8
  %38 = getelementptr inbounds i32, i32* %2, i64 8
  %39 = getelementptr inbounds i8, i8* %0, i64 72
  %40 = bitcast i8* %39 to float**
  store float* %11, float** %40, align 8
  %41 = getelementptr inbounds i8, i8* %0, i64 80
  %42 = bitcast i8* %41 to float**
  store float* %12, float** %42, align 8
  %43 = getelementptr inbounds i8, i8* %0, i64 88
  %44 = bitcast i8* %43 to float**
  store float* %13, float** %44, align 8
  %45 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %45, align 4, !tbaa !402
  %46 = getelementptr inbounds i8, i8* %0, i64 96
  %47 = bitcast i8* %46 to float**
  store float* %14, float** %47, align 8
  %48 = getelementptr inbounds i32, i32* %2, i64 12
  store i32 3, i32* %48, align 4, !tbaa !405
  %49 = getelementptr inbounds i8, i8* %0, i64 104
  %50 = bitcast i8* %49 to float**
  store float* %15, float** %50, align 8
  %51 = getelementptr inbounds i32, i32* %2, i64 13
  store i32 3, i32* %51, align 4, !tbaa !409
  %52 = getelementptr inbounds i8, i8* %0, i64 112
  %53 = bitcast i8* %52 to %0*
  %54 = getelementptr inbounds i32, i32* %2, i64 14
  %55 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %56 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %57 = icmp eq i8* %56, null
  br i1 %57, label %handle_init, label %handle_init_end, !prof !82

handle_init:                                      ; preds = %entry
  %58 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %59 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %60 = call i32 %59(i8* %58, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.40, i64 0, i64 0), i8** nonnull %16)
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %62 = phi i8* [ %56, %entry ], [ %65, %call_end ]
  %63 = call i32 %55(i8* %62, %0* %17, i32* nonnull %2, i32 14, %0* nonnull %53, i32* nonnull %54)
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %60, %handle_init ], [ %63, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %65 = load i8*, i8** %16, align 8
  store i8* %65, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %66 = bitcast i8* %52 to i64*
  %67 = load i64, i64* %66, align 8
  %kernel_error_code = trunc i64 %67 to i32
  %68 = icmp eq i32 %kernel_error_code, 0
  br i1 %68, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %69 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %69(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.41, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x557241ba5830.w4.b0", !25, i64 0}
!25 = !{!"0x557241ba5830.w8.b0", !26, i64 0}
!26 = !{!"0x557241ba5830.w16.b0", !27, i64 0}
!27 = !{!"0x557241ba5830.w32.b0", !28, i64 0}
!28 = !{!"0x557241ba5830.w64.b0", !29, i64 0}
!29 = !{!"0x557241ba5830.w128.b0", !30, i64 0}
!30 = !{!"0x557241ba5830.w256.b0", !31, i64 0}
!31 = !{!"0x557241ba5830.w512.b0", !32, i64 0}
!32 = !{!"0x557241ba5830.w1024.b0", !33, i64 0}
!33 = !{!"0x557241ba5830", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x557241ba5830.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x557241ba5830.w4.b8", !38, i64 0}
!38 = !{!"0x557241ba5830.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x557241ba5830.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x557241ba5830.w4.b16", !43, i64 0}
!43 = !{!"0x557241ba5830.w8.b16", !44, i64 0}
!44 = !{!"0x557241ba5830.w16.b16", !27, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"0x557241ba5830.w4.b20", !43, i64 0}
!47 = !{!48, !48, i64 0}
!48 = !{!"0x557241ba5830.w4.b24", !49, i64 0}
!49 = !{!"0x557241ba5830.w8.b24", !44, i64 0}
!50 = !{!51, !51, i64 0}
!51 = !{!"0x557241ba5830.w4.b28", !49, i64 0}
!52 = !{!53, !53, i64 0}
!53 = !{!"0x557241ba5830.w4.b32", !54, i64 0}
!54 = !{!"0x557241ba5830.w8.b32", !55, i64 0}
!55 = !{!"0x557241ba5830.w16.b32", !56, i64 0}
!56 = !{!"0x557241ba5830.w32.b32", !28, i64 0}
!57 = !{!58, !58, i64 0}
!58 = !{!"0x557241ba5830.w4.b36", !54, i64 0}
!59 = !{!60, !60, i64 0}
!60 = !{!"0x557241ba5830.w4.b40", !61, i64 0}
!61 = !{!"0x557241ba5830.w8.b40", !55, i64 0}
!62 = !{!63, !63, i64 0}
!63 = !{!"0x557241ba5830.w4.b44", !61, i64 0}
!64 = !{!65, !65, i64 0}
!65 = !{!"0x557241ba5830.w4.b48", !66, i64 0}
!66 = !{!"0x557241ba5830.w8.b48", !67, i64 0}
!67 = !{!"0x557241ba5830.w16.b48", !56, i64 0}
!68 = !{!69, !69, i64 0}
!69 = !{!"0x557241ba5830.w4.b52", !66, i64 0}
!70 = !{!71, !71, i64 0}
!71 = !{!"0x557241bad350.w8.b0", !72, i64 0}
!72 = !{!"0x557241bad350.w16.b0", !73, i64 0}
!73 = !{!"0x557241bad350.w32.b0", !74, i64 0}
!74 = !{!"0x557241bad350.w64.b0", !75, i64 0}
!75 = !{!"0x557241bad350.w128.b0", !76, i64 0}
!76 = !{!"0x557241bad350.w256.b0", !77, i64 0}
!77 = !{!"0x557241bad350.w512.b0", !78, i64 0}
!78 = !{!"0x557241bad350.w1024.b0", !79, i64 0}
!79 = !{!"0x557241bad350", !22, i64 0}
!80 = !{!81, !81, i64 0}
!81 = !{!"0x557241bad350.w8.b8", !72, i64 0}
!82 = !{!"branch_weights", i32 1, i32 1048576}
!83 = !{!84, !84, i64 0}
!84 = !{!"0x557241bf9080.w8.b0", !85, i64 0}
!85 = !{!"0x557241bf9080.w16.b0", !86, i64 0}
!86 = !{!"0x557241bf9080.w32.b0", !87, i64 0}
!87 = !{!"0x557241bf9080.w64.b0", !88, i64 0}
!88 = !{!"0x557241bf9080.w128.b0", !89, i64 0}
!89 = !{!"0x557241bf9080.w256.b0", !90, i64 0}
!90 = !{!"0x557241bf9080.w512.b0", !91, i64 0}
!91 = !{!"0x557241bf9080.w1024.b0", !92, i64 0}
!92 = !{!"0x557241bf9080", !22, i64 0}
!93 = !{!94, !94, i64 0}
!94 = !{!"0x557241bf9080.w8.b8", !85, i64 0}
!95 = !{!96, !96, i64 0}
!96 = !{!"0x557241c82b70.w8.b0", !97, i64 0}
!97 = !{!"0x557241c82b70.w16.b0", !98, i64 0}
!98 = !{!"0x557241c82b70.w32.b0", !99, i64 0}
!99 = !{!"0x557241c82b70.w64.b0", !100, i64 0}
!100 = !{!"0x557241c82b70.w128.b0", !101, i64 0}
!101 = !{!"0x557241c82b70.w256.b0", !102, i64 0}
!102 = !{!"0x557241c82b70.w512.b0", !103, i64 0}
!103 = !{!"0x557241c82b70.w1024.b0", !104, i64 0}
!104 = !{!"0x557241c82b70", !22, i64 0}
!105 = !{!106, !106, i64 0}
!106 = !{!"0x557241c82b70.w8.b8", !97, i64 0}
!107 = !{!108, !108, i64 0}
!108 = !{!"0x557241c832d0.w8.b0", !109, i64 0}
!109 = !{!"0x557241c832d0.w16.b0", !110, i64 0}
!110 = !{!"0x557241c832d0.w32.b0", !111, i64 0}
!111 = !{!"0x557241c832d0.w64.b0", !112, i64 0}
!112 = !{!"0x557241c832d0.w128.b0", !113, i64 0}
!113 = !{!"0x557241c832d0.w256.b0", !114, i64 0}
!114 = !{!"0x557241c832d0.w512.b0", !115, i64 0}
!115 = !{!"0x557241c832d0.w1024.b0", !116, i64 0}
!116 = !{!"0x557241c832d0", !22, i64 0}
!117 = !{!118, !118, i64 0}
!118 = !{!"0x557241c832d0.w8.b8", !109, i64 0}
!119 = !{!120, !120, i64 0}
!120 = !{!"0x557241cd7020.w8.b0", !121, i64 0}
!121 = !{!"0x557241cd7020.w16.b0", !122, i64 0}
!122 = !{!"0x557241cd7020.w32.b0", !123, i64 0}
!123 = !{!"0x557241cd7020.w64.b0", !124, i64 0}
!124 = !{!"0x557241cd7020.w128.b0", !125, i64 0}
!125 = !{!"0x557241cd7020.w256.b0", !126, i64 0}
!126 = !{!"0x557241cd7020.w512.b0", !127, i64 0}
!127 = !{!"0x557241cd7020.w1024.b0", !128, i64 0}
!128 = !{!"0x557241cd7020", !22, i64 0}
!129 = !{!130, !130, i64 0}
!130 = !{!"0x557241cd7020.w8.b8", !121, i64 0}
!131 = !{!132, !132, i64 0}
!132 = !{!"0x557241cd7740.w8.b0", !133, i64 0}
!133 = !{!"0x557241cd7740.w16.b0", !134, i64 0}
!134 = !{!"0x557241cd7740.w32.b0", !135, i64 0}
!135 = !{!"0x557241cd7740.w64.b0", !136, i64 0}
!136 = !{!"0x557241cd7740.w128.b0", !137, i64 0}
!137 = !{!"0x557241cd7740.w256.b0", !138, i64 0}
!138 = !{!"0x557241cd7740.w512.b0", !139, i64 0}
!139 = !{!"0x557241cd7740.w1024.b0", !140, i64 0}
!140 = !{!"0x557241cd7740", !22, i64 0}
!141 = !{!142, !142, i64 0}
!142 = !{!"0x557241cd7740.w8.b8", !133, i64 0}
!143 = !{!144, !144, i64 0}
!144 = !{!"0x557241cc73d0.w8.b0", !145, i64 0}
!145 = !{!"0x557241cc73d0.w16.b0", !146, i64 0}
!146 = !{!"0x557241cc73d0.w32.b0", !147, i64 0}
!147 = !{!"0x557241cc73d0.w64.b0", !148, i64 0}
!148 = !{!"0x557241cc73d0.w128.b0", !149, i64 0}
!149 = !{!"0x557241cc73d0.w256.b0", !150, i64 0}
!150 = !{!"0x557241cc73d0.w512.b0", !151, i64 0}
!151 = !{!"0x557241cc73d0.w1024.b0", !152, i64 0}
!152 = !{!"0x557241cc73d0", !22, i64 0}
!153 = !{!154, !154, i64 0}
!154 = !{!"0x557241cc73d0.w8.b8", !145, i64 0}
!155 = !{!156, !156, i64 0}
!156 = !{!"0x557241cc7af0.w8.b0", !157, i64 0}
!157 = !{!"0x557241cc7af0.w16.b0", !158, i64 0}
!158 = !{!"0x557241cc7af0.w32.b0", !159, i64 0}
!159 = !{!"0x557241cc7af0.w64.b0", !160, i64 0}
!160 = !{!"0x557241cc7af0.w128.b0", !161, i64 0}
!161 = !{!"0x557241cc7af0.w256.b0", !162, i64 0}
!162 = !{!"0x557241cc7af0.w512.b0", !163, i64 0}
!163 = !{!"0x557241cc7af0.w1024.b0", !164, i64 0}
!164 = !{!"0x557241cc7af0", !22, i64 0}
!165 = !{!166, !166, i64 0}
!166 = !{!"0x557241cc7af0.w8.b8", !157, i64 0}
!167 = !{!168, !168, i64 0}
!168 = !{!"0x557241c94fd0.w8.b0", !169, i64 0}
!169 = !{!"0x557241c94fd0.w16.b0", !170, i64 0}
!170 = !{!"0x557241c94fd0.w32.b0", !171, i64 0}
!171 = !{!"0x557241c94fd0.w64.b0", !172, i64 0}
!172 = !{!"0x557241c94fd0.w128.b0", !173, i64 0}
!173 = !{!"0x557241c94fd0.w256.b0", !174, i64 0}
!174 = !{!"0x557241c94fd0.w512.b0", !175, i64 0}
!175 = !{!"0x557241c94fd0.w1024.b0", !176, i64 0}
!176 = !{!"0x557241c94fd0", !22, i64 0}
!177 = !{!178, !178, i64 0}
!178 = !{!"0x557241c952f0.w8.b0", !179, i64 0}
!179 = !{!"0x557241c952f0.w16.b0", !180, i64 0}
!180 = !{!"0x557241c952f0.w32.b0", !181, i64 0}
!181 = !{!"0x557241c952f0.w64.b0", !182, i64 0}
!182 = !{!"0x557241c952f0.w128.b0", !183, i64 0}
!183 = !{!"0x557241c952f0.w256.b0", !184, i64 0}
!184 = !{!"0x557241c952f0.w512.b0", !185, i64 0}
!185 = !{!"0x557241c952f0.w1024.b0", !186, i64 0}
!186 = !{!"0x557241c952f0", !22, i64 0}
!187 = !{!188, !188, i64 0}
!188 = !{!"0x557241c1de60.w8.b0", !189, i64 0}
!189 = !{!"0x557241c1de60.w16.b0", !190, i64 0}
!190 = !{!"0x557241c1de60.w32.b0", !191, i64 0}
!191 = !{!"0x557241c1de60.w64.b0", !192, i64 0}
!192 = !{!"0x557241c1de60.w128.b0", !193, i64 0}
!193 = !{!"0x557241c1de60.w256.b0", !194, i64 0}
!194 = !{!"0x557241c1de60.w512.b0", !195, i64 0}
!195 = !{!"0x557241c1de60.w1024.b0", !196, i64 0}
!196 = !{!"0x557241c1de60", !22, i64 0}
!197 = !{!198, !198, i64 0}
!198 = !{!"0x557241c1de60.w8.b8", !189, i64 0}
!199 = !{!200, !200, i64 0}
!200 = !{!"0x557241c1e580.w8.b0", !201, i64 0}
!201 = !{!"0x557241c1e580.w16.b0", !202, i64 0}
!202 = !{!"0x557241c1e580.w32.b0", !203, i64 0}
!203 = !{!"0x557241c1e580.w64.b0", !204, i64 0}
!204 = !{!"0x557241c1e580.w128.b0", !205, i64 0}
!205 = !{!"0x557241c1e580.w256.b0", !206, i64 0}
!206 = !{!"0x557241c1e580.w512.b0", !207, i64 0}
!207 = !{!"0x557241c1e580.w1024.b0", !208, i64 0}
!208 = !{!"0x557241c1e580", !22, i64 0}
!209 = !{!210, !210, i64 0}
!210 = !{!"0x557241c1e580.w8.b8", !201, i64 0}
!211 = !{!212, !212, i64 0}
!212 = !{!"0x557241c46640.w8.b0", !213, i64 0}
!213 = !{!"0x557241c46640.w16.b0", !214, i64 0}
!214 = !{!"0x557241c46640.w32.b0", !215, i64 0}
!215 = !{!"0x557241c46640.w64.b0", !216, i64 0}
!216 = !{!"0x557241c46640.w128.b0", !217, i64 0}
!217 = !{!"0x557241c46640.w256.b0", !218, i64 0}
!218 = !{!"0x557241c46640.w512.b0", !219, i64 0}
!219 = !{!"0x557241c46640.w1024.b0", !220, i64 0}
!220 = !{!"0x557241c46640", !22, i64 0}
!221 = !{!222, !222, i64 0}
!222 = !{!"0x557241c46640.w8.b8", !213, i64 0}
!223 = !{!224, !224, i64 0}
!224 = !{!"0x557241c3aa30.w8.b0", !225, i64 0}
!225 = !{!"0x557241c3aa30.w16.b0", !226, i64 0}
!226 = !{!"0x557241c3aa30.w32.b0", !227, i64 0}
!227 = !{!"0x557241c3aa30.w64.b0", !228, i64 0}
!228 = !{!"0x557241c3aa30.w128.b0", !229, i64 0}
!229 = !{!"0x557241c3aa30.w256.b0", !230, i64 0}
!230 = !{!"0x557241c3aa30.w512.b0", !231, i64 0}
!231 = !{!"0x557241c3aa30.w1024.b0", !232, i64 0}
!232 = !{!"0x557241c3aa30", !22, i64 0}
!233 = !{!234, !234, i64 0}
!234 = !{!"0x557241c3aa30.w8.b8", !225, i64 0}
!235 = !{!236, !236, i64 0}
!236 = !{!"0x557241cb8330.w8.b0", !237, i64 0}
!237 = !{!"0x557241cb8330.w16.b0", !238, i64 0}
!238 = !{!"0x557241cb8330.w32.b0", !239, i64 0}
!239 = !{!"0x557241cb8330.w64.b0", !240, i64 0}
!240 = !{!"0x557241cb8330.w128.b0", !241, i64 0}
!241 = !{!"0x557241cb8330.w256.b0", !242, i64 0}
!242 = !{!"0x557241cb8330.w512.b0", !243, i64 0}
!243 = !{!"0x557241cb8330.w1024.b0", !244, i64 0}
!244 = !{!"0x557241cb8330", !22, i64 0}
!245 = !{!246, !246, i64 0}
!246 = !{!"0x557241cb8650.w8.b0", !247, i64 0}
!247 = !{!"0x557241cb8650.w16.b0", !248, i64 0}
!248 = !{!"0x557241cb8650.w32.b0", !249, i64 0}
!249 = !{!"0x557241cb8650.w64.b0", !250, i64 0}
!250 = !{!"0x557241cb8650.w128.b0", !251, i64 0}
!251 = !{!"0x557241cb8650.w256.b0", !252, i64 0}
!252 = !{!"0x557241cb8650.w512.b0", !253, i64 0}
!253 = !{!"0x557241cb8650.w1024.b0", !254, i64 0}
!254 = !{!"0x557241cb8650", !22, i64 0}
!255 = !{!256, !256, i64 0}
!256 = !{!"0x557241cbeb00.w8.b0", !257, i64 0}
!257 = !{!"0x557241cbeb00.w16.b0", !258, i64 0}
!258 = !{!"0x557241cbeb00.w32.b0", !259, i64 0}
!259 = !{!"0x557241cbeb00.w64.b0", !260, i64 0}
!260 = !{!"0x557241cbeb00.w128.b0", !261, i64 0}
!261 = !{!"0x557241cbeb00.w256.b0", !262, i64 0}
!262 = !{!"0x557241cbeb00.w512.b0", !263, i64 0}
!263 = !{!"0x557241cbeb00.w1024.b0", !264, i64 0}
!264 = !{!"0x557241cbeb00", !22, i64 0}
!265 = !{!266, !266, i64 0}
!266 = !{!"0x557241cbeb00.w8.b8", !257, i64 0}
!267 = !{!268, !268, i64 0}
!268 = !{!"0x557241cbf220.w8.b0", !269, i64 0}
!269 = !{!"0x557241cbf220.w16.b0", !270, i64 0}
!270 = !{!"0x557241cbf220.w32.b0", !271, i64 0}
!271 = !{!"0x557241cbf220.w64.b0", !272, i64 0}
!272 = !{!"0x557241cbf220.w128.b0", !273, i64 0}
!273 = !{!"0x557241cbf220.w256.b0", !274, i64 0}
!274 = !{!"0x557241cbf220.w512.b0", !275, i64 0}
!275 = !{!"0x557241cbf220.w1024.b0", !276, i64 0}
!276 = !{!"0x557241cbf220", !22, i64 0}
!277 = !{!278, !278, i64 0}
!278 = !{!"0x557241cbf220.w8.b8", !269, i64 0}
!279 = !{!280, !280, i64 0}
!280 = !{!"0x557241c23680.w8.b0", !281, i64 0}
!281 = !{!"0x557241c23680.w16.b0", !282, i64 0}
!282 = !{!"0x557241c23680.w32.b0", !283, i64 0}
!283 = !{!"0x557241c23680.w64.b0", !284, i64 0}
!284 = !{!"0x557241c23680.w128.b0", !285, i64 0}
!285 = !{!"0x557241c23680.w256.b0", !286, i64 0}
!286 = !{!"0x557241c23680.w512.b0", !287, i64 0}
!287 = !{!"0x557241c23680.w1024.b0", !288, i64 0}
!288 = !{!"0x557241c23680", !22, i64 0}
!289 = !{!290, !290, i64 0}
!290 = !{!"0x557241c23680.w8.b8", !281, i64 0}
!291 = !{!292, !292, i64 0}
!292 = !{!"0x557241c23e30.w8.b0", !293, i64 0}
!293 = !{!"0x557241c23e30.w16.b0", !294, i64 0}
!294 = !{!"0x557241c23e30.w32.b0", !295, i64 0}
!295 = !{!"0x557241c23e30.w64.b0", !296, i64 0}
!296 = !{!"0x557241c23e30.w128.b0", !297, i64 0}
!297 = !{!"0x557241c23e30.w256.b0", !298, i64 0}
!298 = !{!"0x557241c23e30.w512.b0", !299, i64 0}
!299 = !{!"0x557241c23e30.w1024.b0", !300, i64 0}
!300 = !{!"0x557241c23e30", !22, i64 0}
!301 = !{!302, !302, i64 0}
!302 = !{!"0x557241c23e30.w8.b8", !293, i64 0}
!303 = !{!304, !304, i64 0}
!304 = !{!"0x557241c420f0.w8.b0", !305, i64 0}
!305 = !{!"0x557241c420f0.w16.b0", !306, i64 0}
!306 = !{!"0x557241c420f0.w32.b0", !307, i64 0}
!307 = !{!"0x557241c420f0.w64.b0", !308, i64 0}
!308 = !{!"0x557241c420f0.w128.b0", !309, i64 0}
!309 = !{!"0x557241c420f0.w256.b0", !310, i64 0}
!310 = !{!"0x557241c420f0.w512.b0", !311, i64 0}
!311 = !{!"0x557241c420f0.w1024.b0", !312, i64 0}
!312 = !{!"0x557241c420f0", !22, i64 0}
!313 = !{!314, !314, i64 0}
!314 = !{!"0x557241bb5140.w8.b0", !315, i64 0}
!315 = !{!"0x557241bb5140.w16.b0", !316, i64 0}
!316 = !{!"0x557241bb5140.w32.b0", !317, i64 0}
!317 = !{!"0x557241bb5140.w64.b0", !318, i64 0}
!318 = !{!"0x557241bb5140.w128.b0", !319, i64 0}
!319 = !{!"0x557241bb5140.w256.b0", !320, i64 0}
!320 = !{!"0x557241bb5140.w512.b0", !321, i64 0}
!321 = !{!"0x557241bb5140.w1024.b0", !322, i64 0}
!322 = !{!"0x557241bb5140", !22, i64 0}
!323 = !{!324, !324, i64 0}
!324 = !{!"0x557241c52af0.w8.b0", !325, i64 0}
!325 = !{!"0x557241c52af0.w16.b0", !326, i64 0}
!326 = !{!"0x557241c52af0.w32.b0", !327, i64 0}
!327 = !{!"0x557241c52af0.w64.b0", !328, i64 0}
!328 = !{!"0x557241c52af0.w128.b0", !329, i64 0}
!329 = !{!"0x557241c52af0.w256.b0", !330, i64 0}
!330 = !{!"0x557241c52af0.w512.b0", !331, i64 0}
!331 = !{!"0x557241c52af0.w1024.b0", !332, i64 0}
!332 = !{!"0x557241c52af0", !22, i64 0}
!333 = !{!334, !334, i64 0}
!334 = !{!"0x557241c52af0.w8.b8", !325, i64 0}
!335 = !{!336, !336, i64 0}
!336 = !{!"0x557241c52f90.w8.b0", !337, i64 0}
!337 = !{!"0x557241c52f90.w16.b0", !338, i64 0}
!338 = !{!"0x557241c52f90.w32.b0", !339, i64 0}
!339 = !{!"0x557241c52f90.w64.b0", !340, i64 0}
!340 = !{!"0x557241c52f90.w128.b0", !341, i64 0}
!341 = !{!"0x557241c52f90.w256.b0", !342, i64 0}
!342 = !{!"0x557241c52f90.w512.b0", !343, i64 0}
!343 = !{!"0x557241c52f90.w1024.b0", !344, i64 0}
!344 = !{!"0x557241c52f90", !22, i64 0}
!345 = !{!346, !346, i64 0}
!346 = !{!"0x557241c52f90.w8.b8", !337, i64 0}
!347 = !{!348, !348, i64 0}
!348 = !{!"0x557241d3fe40.w8.b0", !349, i64 0}
!349 = !{!"0x557241d3fe40.w16.b0", !350, i64 0}
!350 = !{!"0x557241d3fe40.w32.b0", !351, i64 0}
!351 = !{!"0x557241d3fe40.w64.b0", !352, i64 0}
!352 = !{!"0x557241d3fe40.w128.b0", !353, i64 0}
!353 = !{!"0x557241d3fe40.w256.b0", !354, i64 0}
!354 = !{!"0x557241d3fe40.w512.b0", !355, i64 0}
!355 = !{!"0x557241d3fe40.w1024.b0", !356, i64 0}
!356 = !{!"0x557241d3fe40", !22, i64 0}
!357 = !{!358, !358, i64 0}
!358 = !{!"0x557241d40160.w8.b0", !359, i64 0}
!359 = !{!"0x557241d40160.w16.b0", !360, i64 0}
!360 = !{!"0x557241d40160.w32.b0", !361, i64 0}
!361 = !{!"0x557241d40160.w64.b0", !362, i64 0}
!362 = !{!"0x557241d40160.w128.b0", !363, i64 0}
!363 = !{!"0x557241d40160.w256.b0", !364, i64 0}
!364 = !{!"0x557241d40160.w512.b0", !365, i64 0}
!365 = !{!"0x557241d40160.w1024.b0", !366, i64 0}
!366 = !{!"0x557241d40160", !22, i64 0}
!367 = !{!368, !368, i64 0}
!368 = !{!"0x557241d42450.w8.b0", !369, i64 0}
!369 = !{!"0x557241d42450.w16.b0", !370, i64 0}
!370 = !{!"0x557241d42450.w32.b0", !371, i64 0}
!371 = !{!"0x557241d42450.w64.b0", !372, i64 0}
!372 = !{!"0x557241d42450.w128.b0", !373, i64 0}
!373 = !{!"0x557241d42450.w256.b0", !374, i64 0}
!374 = !{!"0x557241d42450.w512.b0", !375, i64 0}
!375 = !{!"0x557241d42450.w1024.b0", !376, i64 0}
!376 = !{!"0x557241d42450", !22, i64 0}
!377 = !{!378, !378, i64 0}
!378 = !{!"0x557241d42450.w8.b8", !369, i64 0}
!379 = !{!380, !380, i64 0}
!380 = !{!"0x557241c4cb90.w8.b0", !381, i64 0}
!381 = !{!"0x557241c4cb90.w16.b0", !382, i64 0}
!382 = !{!"0x557241c4cb90.w32.b0", !383, i64 0}
!383 = !{!"0x557241c4cb90.w64.b0", !384, i64 0}
!384 = !{!"0x557241c4cb90.w128.b0", !385, i64 0}
!385 = !{!"0x557241c4cb90.w256.b0", !386, i64 0}
!386 = !{!"0x557241c4cb90.w512.b0", !387, i64 0}
!387 = !{!"0x557241c4cb90.w1024.b0", !388, i64 0}
!388 = !{!"0x557241c4cb90", !22, i64 0}
!389 = !{!390, !390, i64 0}
!390 = !{!"0x557241c4cb90.w8.b8", !381, i64 0}
!391 = !{!392, !392, i64 0}
!392 = !{!"0x557241c4e8c0.w16.b0", !393, i64 0}
!393 = !{!"0x557241c4e8c0.w32.b0", !394, i64 0}
!394 = !{!"0x557241c4e8c0.w64.b0", !395, i64 0}
!395 = !{!"0x557241c4e8c0.w128.b0", !396, i64 0}
!396 = !{!"0x557241c4e8c0.w256.b0", !397, i64 0}
!397 = !{!"0x557241c4e8c0.w512.b0", !398, i64 0}
!398 = !{!"0x557241c4e8c0.w1024.b0", !399, i64 0}
!399 = !{!"0x557241c4e8c0", !22, i64 0}
!400 = !{!401, !401, i64 0}
!401 = !{!"0x557241c4e8c0.w16.b16", !393, i64 0}
!402 = !{!403, !403, i64 0}
!403 = !{!"0x557241c4e8c0.w16.b32", !404, i64 0}
!404 = !{!"0x557241c4e8c0.w32.b32", !394, i64 0}
!405 = !{!406, !406, i64 0}
!406 = !{!"0x557241c4e8c0.w4.b48", !407, i64 0}
!407 = !{!"0x557241c4e8c0.w8.b48", !408, i64 0}
!408 = !{!"0x557241c4e8c0.w16.b48", !404, i64 0}
!409 = !{!410, !410, i64 0}
!410 = !{!"0x557241c4e8c0.w4.b52", !407, i64 0}
