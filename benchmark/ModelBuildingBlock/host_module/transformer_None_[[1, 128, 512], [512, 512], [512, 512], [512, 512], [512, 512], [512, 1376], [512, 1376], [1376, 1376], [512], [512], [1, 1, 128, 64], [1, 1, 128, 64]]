; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [69 x i8] c"Assert fail: num_args == 13, default_function: num_args should be 13\00", align 1
@.str.1 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[4] to be pointer\00", align 1
@.str.6 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[5] to be pointer\00", align 1
@.str.7 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[6] to be pointer\00", align 1
@.str.8 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[7] to be pointer\00", align 1
@.str.9 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[8] to be pointer\00", align 1
@.str.10 = private constant [122 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[9] to be pointer\00", align 1
@.str.11 = private constant [123 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[10] to be pointer\00", align 1
@.str.12 = private constant [123 x i8] c"Assert fail: ph_code == 3 or ph_code == 13 or ph_code == 7 or ph_code == 4, default_function: Expect arg[11] to be pointer\00", align 1
@.str.13 = private constant [135 x i8] c"Assert fail: T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, default_function: Expect arg[12] to be pointer\00", align 1
@.str.14 = private constant [103 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph, 0, 4, \22int32\22), default_function.ph.ndim is expected to equal 3\00", align 1
@.str.15 = private constant [227 x i8] c"Assert fail: T.tvm_struct_get(ph, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph.dtype is expected to be float32\00", align 1
@.str.16 = private constant [185 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[0]) == 1, Argument default_function.ph.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_shape[0])\00", align 1
@.str.17 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[1]) == 128, Argument default_function.ph.shape[1] has an unsatisfied constraint: 128 == T.Cast(\22int32\22, default_function_ph_shape[1])\00", align 1
@.str.18 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[2]) == 512, Argument default_function.ph.shape[2] has an unsatisfied constraint: 512 == T.Cast(\22int32\22, default_function_ph_shape[2])\00", align 1
@.str.19 = private constant [184 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[2]) and 512 == T.Cast(\22int32\22, default_function_ph_strides[1]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.20 = private constant [190 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph, 0, 8, \22uint64\22), Argument default_function.ph.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph, 0, 8, \22uint64\22)\00", align 1
@.str.21 = private constant [170 x i8] c"Assert fail: T.tvm_struct_get(ph, 0, 10, \22int32\22) == 1, Argument default_function.ph.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph, 0, 10, \22int32\22)\00", align 1
@.str.22 = private constant [103 x i8] c"Assert fail: 2 == T.tvm_struct_get(ph, 0, 4, \22int32\22), default_function.ph.ndim is expected to equal 2\00", align 1
@.str.23 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[0]) == 512, Argument default_function.ph.shape[0] has an unsatisfied constraint: 512 == T.Cast(\22int32\22, default_function_ph_shape[0])\00", align 1
@.str.24 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[1]) == 512, Argument default_function.ph.shape[1] has an unsatisfied constraint: 512 == T.Cast(\22int32\22, default_function_ph_shape[1])\00", align 1
@.str.25 = private constant [184 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[1]) and 512 == T.Cast(\22int32\22, default_function_ph_strides[0]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.26 = private constant [176 x i8] c"Assert fail: dev_id == T.tvm_struct_get(ph, 0, 9, \22int32\22), Argument default_function.ph.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(ph, 0, 9, \22int32\22)\00", align 1
@.str.27 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[1]) == 1376, Argument default_function.ph.shape[1] has an unsatisfied constraint: 1376 == T.Cast(\22int32\22, default_function_ph_shape[1])\00", align 1
@.str.28 = private constant [185 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[1]) and 1376 == T.Cast(\22int32\22, default_function_ph_strides[0]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.29 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[0]) == 1376, Argument default_function.ph.shape[0] has an unsatisfied constraint: 1376 == T.Cast(\22int32\22, default_function_ph_shape[0])\00", align 1
@.str.30 = private constant [103 x i8] c"Assert fail: 1 == T.tvm_struct_get(ph, 0, 4, \22int32\22), default_function.ph.ndim is expected to equal 1\00", align 1
@.str.31 = private constant [125 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[0]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.32 = private constant [103 x i8] c"Assert fail: 4 == T.tvm_struct_get(ph, 0, 4, \22int32\22), default_function.ph.ndim is expected to equal 4\00", align 1
@.str.33 = private constant [185 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[1]) == 1, Argument default_function.ph.shape[1] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_shape[1])\00", align 1
@.str.34 = private constant [189 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[2]) == 128, Argument default_function.ph.shape[2] has an unsatisfied constraint: 128 == T.Cast(\22int32\22, default_function_ph_shape[2])\00", align 1
@.str.35 = private constant [187 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_shape[3]) == 64, Argument default_function.ph.shape[3] has an unsatisfied constraint: 64 == T.Cast(\22int32\22, default_function_ph_shape[3])\00", align 1
@.str.36 = private constant [183 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_strides[3]) and 64 == T.Cast(\22int32\22, default_function_ph_strides[2]), default_function.ph.strides: expected to be compact array\00", align 1
@.str.37 = private constant [109 x i8] c"Assert fail: 3 == T.tvm_struct_get(T_add, 0, 4, \22int32\22), default_function.T_add.ndim is expected to equal 3\00", align 1
@.str.38 = private constant [239 x i8] c"Assert fail: T.tvm_struct_get(T_add, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_add.dtype is expected to be float32\00", align 1
@.str.39 = private constant [194 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_add_shape[0]) == 1, Argument default_function.T_add.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_T_add_shape[0])\00", align 1
@.str.40 = private constant [198 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_add_shape[1]) == 128, Argument default_function.T_add.shape[1] has an unsatisfied constraint: 128 == T.Cast(\22int32\22, default_function_T_add_shape[1])\00", align 1
@.str.41 = private constant [198 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_add_shape[2]) == 512, Argument default_function.T_add.shape[2] has an unsatisfied constraint: 512 == T.Cast(\22int32\22, default_function_T_add_shape[2])\00", align 1
@.str.42 = private constant [193 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_add_strides[2]) and 512 == T.Cast(\22int32\22, default_function_T_add_strides[1]), default_function.T_add.strides: expected to be compact array\00", align 1
@.str.43 = private constant [199 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \22uint64\22), Argument default_function.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \22uint64\22)\00", align 1
@.str.44 = private constant [179 x i8] c"Assert fail: T.tvm_struct_get(T_add, 0, 10, \22int32\22) == 1, Argument default_function.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \22int32\22)\00", align 1
@.str.45 = private constant [185 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_add, 0, 9, \22int32\22), Argument default_function.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.46 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.47 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr408 = alloca [14 x %0], align 8, !dbg !18
  %stack_tcode409 = alloca [14 x i32], align 4, !dbg !18
  %stack_tcode409.sub = getelementptr inbounds [14 x i32], [14 x i32]* %stack_tcode409, i64 0, i64 0
  %stack_value = bitcast [14 x %0]* %stack_value_void_ptr408 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 13, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %ph.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %ph.code1 = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %ph.code2 = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %ph.code3 = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 4, !dbg !18
  %ph.code4 = load i32, i32* %5, align 4, !dbg !18, !tbaa !41
  %6 = getelementptr inbounds i32, i32* %arg_type_ids, i64 5, !dbg !18
  %ph.code5 = load i32, i32* %6, align 4, !dbg !18, !tbaa !45
  %7 = getelementptr inbounds i32, i32* %arg_type_ids, i64 6, !dbg !18
  %ph.code6 = load i32, i32* %7, align 4, !dbg !18, !tbaa !47
  %8 = getelementptr inbounds i32, i32* %arg_type_ids, i64 7, !dbg !18
  %ph.code7 = load i32, i32* %8, align 4, !dbg !18, !tbaa !50
  %9 = getelementptr inbounds i32, i32* %arg_type_ids, i64 8, !dbg !18
  %ph.code8 = load i32, i32* %9, align 4, !dbg !18, !tbaa !52
  %10 = getelementptr inbounds i32, i32* %arg_type_ids, i64 9, !dbg !18
  %ph.code9 = load i32, i32* %10, align 4, !dbg !18, !tbaa !57
  %11 = getelementptr inbounds i32, i32* %arg_type_ids, i64 10, !dbg !18
  %ph.code10 = load i32, i32* %11, align 4, !dbg !18, !tbaa !59
  %12 = getelementptr inbounds i32, i32* %arg_type_ids, i64 11, !dbg !18
  %ph.code11 = load i32, i32* %12, align 4, !dbg !18, !tbaa !62
  %13 = getelementptr inbounds i32, i32* %arg_type_ids, i64 12, !dbg !18
  %T_add.code = load i32, i32* %13, align 4, !dbg !18, !tbaa !64
  %14 = bitcast i8* %args to %1**, !dbg !18
  %ph410 = load %1*, %1** %14, align 8, !dbg !18
  %15 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %16 = bitcast i8* %15 to %1**, !dbg !18
  %ph12411 = load %1*, %1** %16, align 8, !dbg !18
  %17 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %18 = bitcast i8* %17 to %1**, !dbg !18
  %ph13412 = load %1*, %1** %18, align 8, !dbg !18
  %19 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %20 = bitcast i8* %19 to %1**, !dbg !18
  %ph14413 = load %1*, %1** %20, align 8, !dbg !18
  %21 = getelementptr inbounds i8, i8* %args, i64 32, !dbg !18
  %22 = bitcast i8* %21 to %1**, !dbg !18
  %ph15414 = load %1*, %1** %22, align 8, !dbg !18
  %23 = getelementptr inbounds i8, i8* %args, i64 40, !dbg !18
  %24 = bitcast i8* %23 to %1**, !dbg !18
  %ph16415 = load %1*, %1** %24, align 8, !dbg !18
  %25 = getelementptr inbounds i8, i8* %args, i64 48, !dbg !18
  %26 = bitcast i8* %25 to %1**, !dbg !18
  %ph17416 = load %1*, %1** %26, align 8, !dbg !18
  %27 = getelementptr inbounds i8, i8* %args, i64 56, !dbg !18
  %28 = bitcast i8* %27 to %1**, !dbg !18
  %ph18417 = load %1*, %1** %28, align 8, !dbg !18
  %29 = getelementptr inbounds i8, i8* %args, i64 64, !dbg !18
  %30 = bitcast i8* %29 to %1**, !dbg !18
  %ph19418 = load %1*, %1** %30, align 8, !dbg !18
  %31 = getelementptr inbounds i8, i8* %args, i64 72, !dbg !18
  %32 = bitcast i8* %31 to %1**, !dbg !18
  %ph20419 = load %1*, %1** %32, align 8, !dbg !18
  %33 = getelementptr inbounds i8, i8* %args, i64 80, !dbg !18
  %34 = bitcast i8* %33 to %1**, !dbg !18
  %ph21420 = load %1*, %1** %34, align 8, !dbg !18
  %35 = getelementptr inbounds i8, i8* %args, i64 88, !dbg !18
  %36 = bitcast i8* %35 to %1**, !dbg !18
  %ph22421 = load %1*, %1** %36, align 8, !dbg !18
  %37 = getelementptr inbounds i8, i8* %args, i64 96, !dbg !18
  %38 = bitcast i8* %37 to %1**, !dbg !18
  %T_add422 = load %1*, %1** %38, align 8, !dbg !18
  %39 = bitcast %1* %ph410 to float**, !dbg !18
  %ph_void_ptr423 = load float*, float** %39, align 8, !dbg !18
  %ptrint = ptrtoint float* %ph_void_ptr423 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %40 = getelementptr inbounds %1, %1* %ph410, i64 0, i32 4, !dbg !18
  %default_function.ph.shape = load i64*, i64** %40, align 8, !dbg !18
  %41 = getelementptr inbounds %1, %1* %ph410, i64 0, i32 5, !dbg !18
  %default_function.ph.strides = load i64*, i64** %41, align 8, !dbg !18
  %42 = getelementptr inbounds %1, %1* %ph410, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %42, align 4, !dbg !18
  %43 = bitcast %1* %ph12411 to float**, !dbg !18
  %ph_void_ptr24424 = load float*, float** %43, align 8, !dbg !18
  %ptrint26 = ptrtoint float* %ph_void_ptr24424 to i64, !dbg !18
  %maskedptr27 = and i64 %ptrint26, 63, !dbg !18
  %maskcond28 = icmp eq i64 %maskedptr27, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond28), !dbg !18
  %44 = getelementptr inbounds %1, %1* %ph12411, i64 0, i32 4, !dbg !18
  %default_function.ph.shape29 = load i64*, i64** %44, align 8, !dbg !18
  %45 = getelementptr inbounds %1, %1* %ph12411, i64 0, i32 5, !dbg !18
  %default_function.ph.strides30 = load i64*, i64** %45, align 8, !dbg !18
  %46 = bitcast %1* %ph13412 to float**, !dbg !18
  %ph_void_ptr31425 = load float*, float** %46, align 8, !dbg !18
  %ptrint33 = ptrtoint float* %ph_void_ptr31425 to i64, !dbg !18
  %maskedptr34 = and i64 %ptrint33, 63, !dbg !18
  %maskcond35 = icmp eq i64 %maskedptr34, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond35), !dbg !18
  %47 = getelementptr inbounds %1, %1* %ph13412, i64 0, i32 4, !dbg !18
  %default_function.ph.shape36 = load i64*, i64** %47, align 8, !dbg !18
  %48 = getelementptr inbounds %1, %1* %ph13412, i64 0, i32 5, !dbg !18
  %default_function.ph.strides37 = load i64*, i64** %48, align 8, !dbg !18
  %49 = bitcast %1* %ph14413 to float**, !dbg !18
  %ph_void_ptr38426 = load float*, float** %49, align 8, !dbg !18
  %ptrint40 = ptrtoint float* %ph_void_ptr38426 to i64, !dbg !18
  %maskedptr41 = and i64 %ptrint40, 63, !dbg !18
  %maskcond42 = icmp eq i64 %maskedptr41, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond42), !dbg !18
  %50 = getelementptr inbounds %1, %1* %ph14413, i64 0, i32 4, !dbg !18
  %default_function.ph.shape43 = load i64*, i64** %50, align 8, !dbg !18
  %51 = getelementptr inbounds %1, %1* %ph14413, i64 0, i32 5, !dbg !18
  %default_function.ph.strides44 = load i64*, i64** %51, align 8, !dbg !18
  %52 = bitcast %1* %ph15414 to float**, !dbg !18
  %ph_void_ptr45427 = load float*, float** %52, align 8, !dbg !18
  %ptrint47 = ptrtoint float* %ph_void_ptr45427 to i64, !dbg !18
  %maskedptr48 = and i64 %ptrint47, 63, !dbg !18
  %maskcond49 = icmp eq i64 %maskedptr48, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond49), !dbg !18
  %53 = getelementptr inbounds %1, %1* %ph15414, i64 0, i32 4, !dbg !18
  %default_function.ph.shape50 = load i64*, i64** %53, align 8, !dbg !18
  %54 = getelementptr inbounds %1, %1* %ph15414, i64 0, i32 5, !dbg !18
  %default_function.ph.strides51 = load i64*, i64** %54, align 8, !dbg !18
  %55 = bitcast %1* %ph16415 to float**, !dbg !18
  %ph_void_ptr52428 = load float*, float** %55, align 8, !dbg !18
  %ptrint54 = ptrtoint float* %ph_void_ptr52428 to i64, !dbg !18
  %maskedptr55 = and i64 %ptrint54, 63, !dbg !18
  %maskcond56 = icmp eq i64 %maskedptr55, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond56), !dbg !18
  %56 = getelementptr inbounds %1, %1* %ph16415, i64 0, i32 4, !dbg !18
  %default_function.ph.shape57 = load i64*, i64** %56, align 8, !dbg !18
  %57 = getelementptr inbounds %1, %1* %ph16415, i64 0, i32 5, !dbg !18
  %default_function.ph.strides58 = load i64*, i64** %57, align 8, !dbg !18
  %58 = bitcast %1* %ph17416 to float**, !dbg !18
  %ph_void_ptr59429 = load float*, float** %58, align 8, !dbg !18
  %ptrint61 = ptrtoint float* %ph_void_ptr59429 to i64, !dbg !18
  %maskedptr62 = and i64 %ptrint61, 63, !dbg !18
  %maskcond63 = icmp eq i64 %maskedptr62, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond63), !dbg !18
  %59 = getelementptr inbounds %1, %1* %ph17416, i64 0, i32 4, !dbg !18
  %default_function.ph.shape64 = load i64*, i64** %59, align 8, !dbg !18
  %60 = getelementptr inbounds %1, %1* %ph17416, i64 0, i32 5, !dbg !18
  %default_function.ph.strides65 = load i64*, i64** %60, align 8, !dbg !18
  %61 = bitcast %1* %ph18417 to float**, !dbg !18
  %ph_void_ptr66430 = load float*, float** %61, align 8, !dbg !18
  %ptrint68 = ptrtoint float* %ph_void_ptr66430 to i64, !dbg !18
  %maskedptr69 = and i64 %ptrint68, 63, !dbg !18
  %maskcond70 = icmp eq i64 %maskedptr69, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond70), !dbg !18
  %62 = getelementptr inbounds %1, %1* %ph18417, i64 0, i32 4, !dbg !18
  %default_function.ph.shape71 = load i64*, i64** %62, align 8, !dbg !18
  %63 = getelementptr inbounds %1, %1* %ph18417, i64 0, i32 5, !dbg !18
  %default_function.ph.strides72 = load i64*, i64** %63, align 8, !dbg !18
  %64 = bitcast %1* %ph19418 to float**, !dbg !18
  %ph_void_ptr73431 = load float*, float** %64, align 8, !dbg !18
  %ptrint75 = ptrtoint float* %ph_void_ptr73431 to i64, !dbg !18
  %maskedptr76 = and i64 %ptrint75, 63, !dbg !18
  %maskcond77 = icmp eq i64 %maskedptr76, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond77), !dbg !18
  %65 = getelementptr inbounds %1, %1* %ph19418, i64 0, i32 4, !dbg !18
  %default_function.ph.shape78 = load i64*, i64** %65, align 8, !dbg !18
  %66 = getelementptr inbounds %1, %1* %ph19418, i64 0, i32 5, !dbg !18
  %default_function.ph.strides79 = load i64*, i64** %66, align 8, !dbg !18
  %67 = bitcast %1* %ph20419 to float**, !dbg !18
  %ph_void_ptr80432 = load float*, float** %67, align 8, !dbg !18
  %ptrint82 = ptrtoint float* %ph_void_ptr80432 to i64, !dbg !18
  %maskedptr83 = and i64 %ptrint82, 63, !dbg !18
  %maskcond84 = icmp eq i64 %maskedptr83, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond84), !dbg !18
  %68 = getelementptr inbounds %1, %1* %ph20419, i64 0, i32 4, !dbg !18
  %default_function.ph.shape85 = load i64*, i64** %68, align 8, !dbg !18
  %69 = getelementptr inbounds %1, %1* %ph20419, i64 0, i32 5, !dbg !18
  %default_function.ph.strides86 = load i64*, i64** %69, align 8, !dbg !18
  %70 = bitcast %1* %ph21420 to float**, !dbg !18
  %ph_void_ptr87433 = load float*, float** %70, align 8, !dbg !18
  %ptrint89 = ptrtoint float* %ph_void_ptr87433 to i64, !dbg !18
  %maskedptr90 = and i64 %ptrint89, 63, !dbg !18
  %maskcond91 = icmp eq i64 %maskedptr90, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond91), !dbg !18
  %71 = getelementptr inbounds %1, %1* %ph21420, i64 0, i32 4, !dbg !18
  %default_function.ph.shape92 = load i64*, i64** %71, align 8, !dbg !18
  %72 = getelementptr inbounds %1, %1* %ph21420, i64 0, i32 5, !dbg !18
  %default_function.ph.strides93 = load i64*, i64** %72, align 8, !dbg !18
  %73 = bitcast %1* %ph22421 to float**, !dbg !18
  %ph_void_ptr94434 = load float*, float** %73, align 8, !dbg !18
  %ptrint96 = ptrtoint float* %ph_void_ptr94434 to i64, !dbg !18
  %maskedptr97 = and i64 %ptrint96, 63, !dbg !18
  %maskcond98 = icmp eq i64 %maskedptr97, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond98), !dbg !18
  %74 = getelementptr inbounds %1, %1* %ph22421, i64 0, i32 4, !dbg !18
  %default_function.ph.shape99 = load i64*, i64** %74, align 8, !dbg !18
  %75 = getelementptr inbounds %1, %1* %ph22421, i64 0, i32 5, !dbg !18
  %default_function.ph.strides100 = load i64*, i64** %75, align 8, !dbg !18
  %76 = bitcast %1* %T_add422 to float**, !dbg !18
  %T_add_void_ptr435 = load float*, float** %76, align 8, !dbg !18
  %ptrint102 = ptrtoint float* %T_add_void_ptr435 to i64, !dbg !18
  %maskedptr103 = and i64 %ptrint102, 63, !dbg !18
  %maskcond104 = icmp eq i64 %maskedptr103, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond104), !dbg !18
  %77 = getelementptr inbounds %1, %1* %T_add422, i64 0, i32 4, !dbg !18
  %default_function.T_add.shape = load i64*, i64** %77, align 8, !dbg !18
  %78 = getelementptr inbounds %1, %1* %T_add422, i64 0, i32 5, !dbg !18
  %default_function.T_add.strides = load i64*, i64** %78, align 8, !dbg !18
  switch i32 %ph.code, label %assert_fail105 [
    i32 13, label %assert_end106
    i32 7, label %assert_end106
    i32 4, label %assert_end106
    i32 3, label %assert_end106
  ], !dbg !18

assert_fail105:                                   ; preds = %assert_end
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %79(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end106:                                    ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %ph.code1, label %assert_fail107 [
    i32 13, label %assert_end108
    i32 7, label %assert_end108
    i32 4, label %assert_end108
    i32 3, label %assert_end108
  ], !dbg !18

assert_fail107:                                   ; preds = %assert_end106
  %80 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %80(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end108:                                    ; preds = %assert_end106, %assert_end106, %assert_end106, %assert_end106
  switch i32 %ph.code2, label %assert_fail109 [
    i32 13, label %assert_end110
    i32 7, label %assert_end110
    i32 4, label %assert_end110
    i32 3, label %assert_end110
  ], !dbg !18

assert_fail109:                                   ; preds = %assert_end108
  %81 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %81(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end110:                                    ; preds = %assert_end108, %assert_end108, %assert_end108, %assert_end108
  switch i32 %ph.code3, label %assert_fail111 [
    i32 13, label %assert_end112
    i32 7, label %assert_end112
    i32 4, label %assert_end112
    i32 3, label %assert_end112
  ], !dbg !18

assert_fail111:                                   ; preds = %assert_end110
  %82 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %82(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end112:                                    ; preds = %assert_end110, %assert_end110, %assert_end110, %assert_end110
  switch i32 %ph.code4, label %assert_fail113 [
    i32 13, label %assert_end114
    i32 7, label %assert_end114
    i32 4, label %assert_end114
    i32 3, label %assert_end114
  ], !dbg !18

assert_fail113:                                   ; preds = %assert_end112
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %83(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end114:                                    ; preds = %assert_end112, %assert_end112, %assert_end112, %assert_end112
  switch i32 %ph.code5, label %assert_fail115 [
    i32 13, label %assert_end116
    i32 7, label %assert_end116
    i32 4, label %assert_end116
    i32 3, label %assert_end116
  ], !dbg !18

assert_fail115:                                   ; preds = %assert_end114
  %84 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %84(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end116:                                    ; preds = %assert_end114, %assert_end114, %assert_end114, %assert_end114
  switch i32 %ph.code6, label %assert_fail117 [
    i32 13, label %assert_end118
    i32 7, label %assert_end118
    i32 4, label %assert_end118
    i32 3, label %assert_end118
  ], !dbg !18

assert_fail117:                                   ; preds = %assert_end116
  %85 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %85(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end118:                                    ; preds = %assert_end116, %assert_end116, %assert_end116, %assert_end116
  switch i32 %ph.code7, label %assert_fail119 [
    i32 13, label %assert_end120
    i32 7, label %assert_end120
    i32 4, label %assert_end120
    i32 3, label %assert_end120
  ], !dbg !18

assert_fail119:                                   ; preds = %assert_end118
  %86 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %86(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end120:                                    ; preds = %assert_end118, %assert_end118, %assert_end118, %assert_end118
  switch i32 %ph.code8, label %assert_fail121 [
    i32 13, label %assert_end122
    i32 7, label %assert_end122
    i32 4, label %assert_end122
    i32 3, label %assert_end122
  ], !dbg !18

assert_fail121:                                   ; preds = %assert_end120
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %87(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end122:                                    ; preds = %assert_end120, %assert_end120, %assert_end120, %assert_end120
  switch i32 %ph.code9, label %assert_fail123 [
    i32 13, label %assert_end124
    i32 7, label %assert_end124
    i32 4, label %assert_end124
    i32 3, label %assert_end124
  ], !dbg !18

assert_fail123:                                   ; preds = %assert_end122
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %88(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end124:                                    ; preds = %assert_end122, %assert_end122, %assert_end122, %assert_end122
  switch i32 %ph.code10, label %assert_fail125 [
    i32 13, label %assert_end126
    i32 7, label %assert_end126
    i32 4, label %assert_end126
    i32 3, label %assert_end126
  ], !dbg !18

assert_fail125:                                   ; preds = %assert_end124
  %89 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %89(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end126:                                    ; preds = %assert_end124, %assert_end124, %assert_end124, %assert_end124
  switch i32 %ph.code11, label %assert_fail127 [
    i32 13, label %assert_end128
    i32 7, label %assert_end128
    i32 4, label %assert_end128
    i32 3, label %assert_end128
  ], !dbg !18

assert_fail127:                                   ; preds = %assert_end126
  %90 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %90(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end128:                                    ; preds = %assert_end126, %assert_end126, %assert_end126, %assert_end126
  switch i32 %T_add.code, label %assert_fail129 [
    i32 13, label %assert_end130
    i32 7, label %assert_end130
    i32 4, label %assert_end130
    i32 3, label %assert_end130
  ], !dbg !18

assert_fail129:                                   ; preds = %assert_end128
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %91(i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end130:                                    ; preds = %assert_end128, %assert_end128, %assert_end128, %assert_end128
  %92 = getelementptr inbounds %1, %1* %ph410, i64 0, i32 2, !dbg !18
  %93 = load i32, i32* %92, align 4, !dbg !18
  %94 = icmp eq i32 %93, 3, !dbg !18
  br i1 %94, label %assert_end134, label %assert_fail131, !dbg !18, !prof !19

assert_fail131:                                   ; preds = %assert_end130
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %95(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end134:                                    ; preds = %assert_end130
  %96 = getelementptr inbounds %1, %1* %ph410, i64 0, i32 3, i32 2, !dbg !18
  %97 = load i16, i16* %96, align 2, !dbg !18
  %98 = icmp eq i16 %97, 1, !dbg !18
  %99 = getelementptr inbounds %1, %1* %ph410, i64 0, i32 3, i32 1, !dbg !18
  %100 = load i8, i8* %99, align 1, !dbg !18
  %101 = icmp eq i8 %100, 32, !dbg !18
  %102 = getelementptr inbounds %1, %1* %ph410, i64 0, i32 3, i32 0, !dbg !18
  %103 = load i8, i8* %102, align 1, !dbg !18
  %104 = icmp eq i8 %103, 2, !dbg !18
  %105 = and i1 %101, %104, !dbg !18
  %106 = and i1 %98, %105, !dbg !18
  br i1 %106, label %assert_end136, label %assert_fail135, !dbg !18, !prof !19

assert_fail135:                                   ; preds = %assert_end134
  %107 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %107(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end136:                                    ; preds = %assert_end134
  %108 = load i64, i64* %default_function.ph.shape, align 8, !dbg !18, !tbaa !68
  %109 = trunc i64 %108 to i32, !dbg !18
  %110 = icmp eq i32 %109, 1, !dbg !18
  br i1 %110, label %assert_end138, label %assert_fail137, !dbg !18, !prof !19

assert_fail137:                                   ; preds = %assert_end136
  %111 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %111(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end138:                                    ; preds = %assert_end136
  %112 = getelementptr inbounds i64, i64* %default_function.ph.shape, i64 1, !dbg !18
  %113 = load i64, i64* %112, align 8, !dbg !18, !tbaa !78
  %114 = trunc i64 %113 to i32, !dbg !18
  %115 = icmp eq i32 %114, 128, !dbg !18
  br i1 %115, label %assert_end140, label %assert_fail139, !dbg !18, !prof !19

assert_fail139:                                   ; preds = %assert_end138
  %116 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %116(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end140:                                    ; preds = %assert_end138
  %117 = getelementptr inbounds i64, i64* %default_function.ph.shape, i64 2, !dbg !18
  %118 = load i64, i64* %117, align 8, !dbg !18, !tbaa !80
  %119 = trunc i64 %118 to i32, !dbg !18
  %120 = icmp eq i32 %119, 512, !dbg !18
  br i1 %120, label %assert_end142, label %assert_fail141, !dbg !18, !prof !19

assert_fail141:                                   ; preds = %assert_end140
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %121(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end142:                                    ; preds = %assert_end140
  %122 = icmp eq i64* %default_function.ph.strides, null, !dbg !18
  br i1 %122, label %if_end, label %if_then, !dbg !18, !prof !83

if_then:                                          ; preds = %assert_end142
  %123 = getelementptr inbounds i64, i64* %default_function.ph.strides, i64 1, !dbg !18
  %124 = load i64, i64* %123, align 8, !dbg !18, !tbaa !84
  %125 = trunc i64 %124 to i32, !dbg !18
  %126 = icmp eq i32 %125, 512, !dbg !18
  %127 = getelementptr inbounds i64, i64* %default_function.ph.strides, i64 2, !dbg !18
  %128 = load i64, i64* %127, align 8, !dbg !18, !tbaa !94
  %129 = trunc i64 %128 to i32, !dbg !18
  %130 = icmp eq i32 %129, 1, !dbg !18
  %131 = and i1 %126, %130, !dbg !18
  br i1 %131, label %if_end, label %assert_fail143, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end142, %if_then
  %132 = getelementptr inbounds %1, %1* %ph410, i64 0, i32 6, !dbg !18
  %133 = load i64, i64* %132, align 8, !dbg !18
  %134 = icmp eq i64 %133, 0, !dbg !18
  br i1 %134, label %assert_end146, label %assert_fail145, !dbg !18, !prof !19

assert_fail143:                                   ; preds = %if_then
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %135(i8* getelementptr inbounds ([184 x i8], [184 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail145:                                   ; preds = %if_end
  %136 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %136(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end146:                                    ; preds = %if_end
  %137 = getelementptr inbounds %1, %1* %ph410, i64 0, i32 1, i32 0, !dbg !18
  %138 = load i32, i32* %137, align 4, !dbg !18
  %139 = icmp eq i32 %138, 1, !dbg !18
  br i1 %139, label %assert_end148, label %assert_fail147, !dbg !18, !prof !19

assert_fail147:                                   ; preds = %assert_end146
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %140(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end148:                                    ; preds = %assert_end146
  %141 = getelementptr inbounds %1, %1* %ph12411, i64 0, i32 2, !dbg !18
  %142 = load i32, i32* %141, align 4, !dbg !18
  %143 = icmp eq i32 %142, 2, !dbg !18
  br i1 %143, label %assert_end152, label %assert_fail149, !dbg !18, !prof !19

assert_fail149:                                   ; preds = %assert_end148
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %144(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end152:                                    ; preds = %assert_end148
  %145 = getelementptr inbounds %1, %1* %ph12411, i64 0, i32 3, i32 2, !dbg !18
  %146 = load i16, i16* %145, align 2, !dbg !18
  %147 = icmp eq i16 %146, 1, !dbg !18
  %148 = getelementptr inbounds %1, %1* %ph12411, i64 0, i32 3, i32 1, !dbg !18
  %149 = load i8, i8* %148, align 1, !dbg !18
  %150 = icmp eq i8 %149, 32, !dbg !18
  %151 = getelementptr inbounds %1, %1* %ph12411, i64 0, i32 3, i32 0, !dbg !18
  %152 = load i8, i8* %151, align 1, !dbg !18
  %153 = icmp eq i8 %152, 2, !dbg !18
  %154 = and i1 %150, %153, !dbg !18
  %155 = and i1 %147, %154, !dbg !18
  br i1 %155, label %assert_end154, label %assert_fail153, !dbg !18, !prof !19

assert_fail153:                                   ; preds = %assert_end152
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %156(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end154:                                    ; preds = %assert_end152
  %157 = load i64, i64* %default_function.ph.shape29, align 8, !dbg !18, !tbaa !97
  %158 = trunc i64 %157 to i32, !dbg !18
  %159 = icmp eq i32 %158, 512, !dbg !18
  br i1 %159, label %assert_end156, label %assert_fail155, !dbg !18, !prof !19

assert_fail155:                                   ; preds = %assert_end154
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %160(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end156:                                    ; preds = %assert_end154
  %161 = getelementptr inbounds i64, i64* %default_function.ph.shape29, i64 1, !dbg !18
  %162 = load i64, i64* %161, align 8, !dbg !18, !tbaa !107
  %163 = trunc i64 %162 to i32, !dbg !18
  %164 = icmp eq i32 %163, 512, !dbg !18
  br i1 %164, label %assert_end158, label %assert_fail157, !dbg !18, !prof !19

assert_fail157:                                   ; preds = %assert_end156
  %165 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %165(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end158:                                    ; preds = %assert_end156
  %166 = icmp eq i64* %default_function.ph.strides30, null, !dbg !18
  br i1 %166, label %if_end160, label %if_then159, !dbg !18, !prof !83

if_then159:                                       ; preds = %assert_end158
  %167 = load i64, i64* %default_function.ph.strides30, align 8, !dbg !18, !tbaa !109
  %168 = trunc i64 %167 to i32, !dbg !18
  %169 = icmp eq i32 %168, 512, !dbg !18
  %170 = getelementptr inbounds i64, i64* %default_function.ph.strides30, i64 1, !dbg !18
  %171 = load i64, i64* %170, align 8, !dbg !18, !tbaa !119
  %172 = trunc i64 %171 to i32, !dbg !18
  %173 = icmp eq i32 %172, 1, !dbg !18
  %174 = and i1 %169, %173, !dbg !18
  br i1 %174, label %if_end160, label %assert_fail161, !dbg !18, !prof !19

if_end160:                                        ; preds = %assert_end158, %if_then159
  %175 = getelementptr inbounds %1, %1* %ph12411, i64 0, i32 6, !dbg !18
  %176 = load i64, i64* %175, align 8, !dbg !18
  %177 = icmp eq i64 %176, 0, !dbg !18
  br i1 %177, label %assert_end164, label %assert_fail163, !dbg !18, !prof !19

assert_fail161:                                   ; preds = %if_then159
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %178(i8* getelementptr inbounds ([184 x i8], [184 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail163:                                   ; preds = %if_end160
  %179 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %179(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end164:                                    ; preds = %if_end160
  %180 = getelementptr inbounds %1, %1* %ph12411, i64 0, i32 1, i32 0, !dbg !18
  %181 = load i32, i32* %180, align 4, !dbg !18
  %182 = icmp eq i32 %181, 1, !dbg !18
  br i1 %182, label %assert_end166, label %assert_fail165, !dbg !18, !prof !19

assert_fail165:                                   ; preds = %assert_end164
  %183 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %183(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end166:                                    ; preds = %assert_end164
  %184 = getelementptr inbounds %1, %1* %ph12411, i64 0, i32 1, i32 1, !dbg !18
  %185 = load i32, i32* %184, align 4, !dbg !18
  %186 = icmp eq i32 %dev_id, %185, !dbg !18
  br i1 %186, label %assert_end168, label %assert_fail167, !dbg !18, !prof !19

assert_fail167:                                   ; preds = %assert_end166
  %187 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %187(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end168:                                    ; preds = %assert_end166
  %188 = getelementptr inbounds %1, %1* %ph13412, i64 0, i32 2, !dbg !18
  %189 = load i32, i32* %188, align 4, !dbg !18
  %190 = icmp eq i32 %189, 2, !dbg !18
  br i1 %190, label %assert_end172, label %assert_fail169, !dbg !18, !prof !19

assert_fail169:                                   ; preds = %assert_end168
  %191 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %191(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end172:                                    ; preds = %assert_end168
  %192 = getelementptr inbounds %1, %1* %ph13412, i64 0, i32 3, i32 2, !dbg !18
  %193 = load i16, i16* %192, align 2, !dbg !18
  %194 = icmp eq i16 %193, 1, !dbg !18
  %195 = getelementptr inbounds %1, %1* %ph13412, i64 0, i32 3, i32 1, !dbg !18
  %196 = load i8, i8* %195, align 1, !dbg !18
  %197 = icmp eq i8 %196, 32, !dbg !18
  %198 = getelementptr inbounds %1, %1* %ph13412, i64 0, i32 3, i32 0, !dbg !18
  %199 = load i8, i8* %198, align 1, !dbg !18
  %200 = icmp eq i8 %199, 2, !dbg !18
  %201 = and i1 %197, %200, !dbg !18
  %202 = and i1 %194, %201, !dbg !18
  br i1 %202, label %assert_end174, label %assert_fail173, !dbg !18, !prof !19

assert_fail173:                                   ; preds = %assert_end172
  %203 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %203(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end174:                                    ; preds = %assert_end172
  %204 = load i64, i64* %default_function.ph.shape36, align 8, !dbg !18, !tbaa !121
  %205 = trunc i64 %204 to i32, !dbg !18
  %206 = icmp eq i32 %205, 512, !dbg !18
  br i1 %206, label %assert_end176, label %assert_fail175, !dbg !18, !prof !19

assert_fail175:                                   ; preds = %assert_end174
  %207 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %207(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end176:                                    ; preds = %assert_end174
  %208 = getelementptr inbounds i64, i64* %default_function.ph.shape36, i64 1, !dbg !18
  %209 = load i64, i64* %208, align 8, !dbg !18, !tbaa !131
  %210 = trunc i64 %209 to i32, !dbg !18
  %211 = icmp eq i32 %210, 512, !dbg !18
  br i1 %211, label %assert_end178, label %assert_fail177, !dbg !18, !prof !19

assert_fail177:                                   ; preds = %assert_end176
  %212 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %212(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end178:                                    ; preds = %assert_end176
  %213 = icmp eq i64* %default_function.ph.strides37, null, !dbg !18
  br i1 %213, label %if_end180, label %if_then179, !dbg !18, !prof !83

if_then179:                                       ; preds = %assert_end178
  %214 = load i64, i64* %default_function.ph.strides37, align 8, !dbg !18, !tbaa !133
  %215 = trunc i64 %214 to i32, !dbg !18
  %216 = icmp eq i32 %215, 512, !dbg !18
  %217 = getelementptr inbounds i64, i64* %default_function.ph.strides37, i64 1, !dbg !18
  %218 = load i64, i64* %217, align 8, !dbg !18, !tbaa !143
  %219 = trunc i64 %218 to i32, !dbg !18
  %220 = icmp eq i32 %219, 1, !dbg !18
  %221 = and i1 %216, %220, !dbg !18
  br i1 %221, label %if_end180, label %assert_fail181, !dbg !18, !prof !19

if_end180:                                        ; preds = %assert_end178, %if_then179
  %222 = getelementptr inbounds %1, %1* %ph13412, i64 0, i32 6, !dbg !18
  %223 = load i64, i64* %222, align 8, !dbg !18
  %224 = icmp eq i64 %223, 0, !dbg !18
  br i1 %224, label %assert_end184, label %assert_fail183, !dbg !18, !prof !19

assert_fail181:                                   ; preds = %if_then179
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %225(i8* getelementptr inbounds ([184 x i8], [184 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail183:                                   ; preds = %if_end180
  %226 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %226(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end184:                                    ; preds = %if_end180
  %227 = getelementptr inbounds %1, %1* %ph13412, i64 0, i32 1, i32 0, !dbg !18
  %228 = load i32, i32* %227, align 4, !dbg !18
  %229 = icmp eq i32 %228, 1, !dbg !18
  br i1 %229, label %assert_end186, label %assert_fail185, !dbg !18, !prof !19

assert_fail185:                                   ; preds = %assert_end184
  %230 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %230(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end186:                                    ; preds = %assert_end184
  %231 = getelementptr inbounds %1, %1* %ph13412, i64 0, i32 1, i32 1, !dbg !18
  %232 = load i32, i32* %231, align 4, !dbg !18
  %233 = icmp eq i32 %dev_id, %232, !dbg !18
  br i1 %233, label %assert_end188, label %assert_fail187, !dbg !18, !prof !19

assert_fail187:                                   ; preds = %assert_end186
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %234(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end188:                                    ; preds = %assert_end186
  %235 = getelementptr inbounds %1, %1* %ph14413, i64 0, i32 2, !dbg !18
  %236 = load i32, i32* %235, align 4, !dbg !18
  %237 = icmp eq i32 %236, 2, !dbg !18
  br i1 %237, label %assert_end192, label %assert_fail189, !dbg !18, !prof !19

assert_fail189:                                   ; preds = %assert_end188
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %238(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end192:                                    ; preds = %assert_end188
  %239 = getelementptr inbounds %1, %1* %ph14413, i64 0, i32 3, i32 2, !dbg !18
  %240 = load i16, i16* %239, align 2, !dbg !18
  %241 = icmp eq i16 %240, 1, !dbg !18
  %242 = getelementptr inbounds %1, %1* %ph14413, i64 0, i32 3, i32 1, !dbg !18
  %243 = load i8, i8* %242, align 1, !dbg !18
  %244 = icmp eq i8 %243, 32, !dbg !18
  %245 = getelementptr inbounds %1, %1* %ph14413, i64 0, i32 3, i32 0, !dbg !18
  %246 = load i8, i8* %245, align 1, !dbg !18
  %247 = icmp eq i8 %246, 2, !dbg !18
  %248 = and i1 %244, %247, !dbg !18
  %249 = and i1 %241, %248, !dbg !18
  br i1 %249, label %assert_end194, label %assert_fail193, !dbg !18, !prof !19

assert_fail193:                                   ; preds = %assert_end192
  %250 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %250(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end194:                                    ; preds = %assert_end192
  %251 = load i64, i64* %default_function.ph.shape43, align 8, !dbg !18, !tbaa !145
  %252 = trunc i64 %251 to i32, !dbg !18
  %253 = icmp eq i32 %252, 512, !dbg !18
  br i1 %253, label %assert_end196, label %assert_fail195, !dbg !18, !prof !19

assert_fail195:                                   ; preds = %assert_end194
  %254 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %254(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end196:                                    ; preds = %assert_end194
  %255 = getelementptr inbounds i64, i64* %default_function.ph.shape43, i64 1, !dbg !18
  %256 = load i64, i64* %255, align 8, !dbg !18, !tbaa !155
  %257 = trunc i64 %256 to i32, !dbg !18
  %258 = icmp eq i32 %257, 512, !dbg !18
  br i1 %258, label %assert_end198, label %assert_fail197, !dbg !18, !prof !19

assert_fail197:                                   ; preds = %assert_end196
  %259 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %259(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end198:                                    ; preds = %assert_end196
  %260 = icmp eq i64* %default_function.ph.strides44, null, !dbg !18
  br i1 %260, label %if_end200, label %if_then199, !dbg !18, !prof !83

if_then199:                                       ; preds = %assert_end198
  %261 = load i64, i64* %default_function.ph.strides44, align 8, !dbg !18, !tbaa !157
  %262 = trunc i64 %261 to i32, !dbg !18
  %263 = icmp eq i32 %262, 512, !dbg !18
  %264 = getelementptr inbounds i64, i64* %default_function.ph.strides44, i64 1, !dbg !18
  %265 = load i64, i64* %264, align 8, !dbg !18, !tbaa !167
  %266 = trunc i64 %265 to i32, !dbg !18
  %267 = icmp eq i32 %266, 1, !dbg !18
  %268 = and i1 %263, %267, !dbg !18
  br i1 %268, label %if_end200, label %assert_fail201, !dbg !18, !prof !19

if_end200:                                        ; preds = %assert_end198, %if_then199
  %269 = getelementptr inbounds %1, %1* %ph14413, i64 0, i32 6, !dbg !18
  %270 = load i64, i64* %269, align 8, !dbg !18
  %271 = icmp eq i64 %270, 0, !dbg !18
  br i1 %271, label %assert_end204, label %assert_fail203, !dbg !18, !prof !19

assert_fail201:                                   ; preds = %if_then199
  %272 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %272(i8* getelementptr inbounds ([184 x i8], [184 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail203:                                   ; preds = %if_end200
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %273(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end204:                                    ; preds = %if_end200
  %274 = getelementptr inbounds %1, %1* %ph14413, i64 0, i32 1, i32 0, !dbg !18
  %275 = load i32, i32* %274, align 4, !dbg !18
  %276 = icmp eq i32 %275, 1, !dbg !18
  br i1 %276, label %assert_end206, label %assert_fail205, !dbg !18, !prof !19

assert_fail205:                                   ; preds = %assert_end204
  %277 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %277(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end206:                                    ; preds = %assert_end204
  %278 = getelementptr inbounds %1, %1* %ph14413, i64 0, i32 1, i32 1, !dbg !18
  %279 = load i32, i32* %278, align 4, !dbg !18
  %280 = icmp eq i32 %dev_id, %279, !dbg !18
  br i1 %280, label %assert_end208, label %assert_fail207, !dbg !18, !prof !19

assert_fail207:                                   ; preds = %assert_end206
  %281 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %281(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end208:                                    ; preds = %assert_end206
  %282 = getelementptr inbounds %1, %1* %ph15414, i64 0, i32 2, !dbg !18
  %283 = load i32, i32* %282, align 4, !dbg !18
  %284 = icmp eq i32 %283, 2, !dbg !18
  br i1 %284, label %assert_end212, label %assert_fail209, !dbg !18, !prof !19

assert_fail209:                                   ; preds = %assert_end208
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %285(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end212:                                    ; preds = %assert_end208
  %286 = getelementptr inbounds %1, %1* %ph15414, i64 0, i32 3, i32 2, !dbg !18
  %287 = load i16, i16* %286, align 2, !dbg !18
  %288 = icmp eq i16 %287, 1, !dbg !18
  %289 = getelementptr inbounds %1, %1* %ph15414, i64 0, i32 3, i32 1, !dbg !18
  %290 = load i8, i8* %289, align 1, !dbg !18
  %291 = icmp eq i8 %290, 32, !dbg !18
  %292 = getelementptr inbounds %1, %1* %ph15414, i64 0, i32 3, i32 0, !dbg !18
  %293 = load i8, i8* %292, align 1, !dbg !18
  %294 = icmp eq i8 %293, 2, !dbg !18
  %295 = and i1 %291, %294, !dbg !18
  %296 = and i1 %288, %295, !dbg !18
  br i1 %296, label %assert_end214, label %assert_fail213, !dbg !18, !prof !19

assert_fail213:                                   ; preds = %assert_end212
  %297 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %297(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end214:                                    ; preds = %assert_end212
  %298 = load i64, i64* %default_function.ph.shape50, align 8, !dbg !18, !tbaa !169
  %299 = trunc i64 %298 to i32, !dbg !18
  %300 = icmp eq i32 %299, 512, !dbg !18
  br i1 %300, label %assert_end216, label %assert_fail215, !dbg !18, !prof !19

assert_fail215:                                   ; preds = %assert_end214
  %301 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %301(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end216:                                    ; preds = %assert_end214
  %302 = getelementptr inbounds i64, i64* %default_function.ph.shape50, i64 1, !dbg !18
  %303 = load i64, i64* %302, align 8, !dbg !18, !tbaa !179
  %304 = trunc i64 %303 to i32, !dbg !18
  %305 = icmp eq i32 %304, 512, !dbg !18
  br i1 %305, label %assert_end218, label %assert_fail217, !dbg !18, !prof !19

assert_fail217:                                   ; preds = %assert_end216
  %306 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %306(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end218:                                    ; preds = %assert_end216
  %307 = icmp eq i64* %default_function.ph.strides51, null, !dbg !18
  br i1 %307, label %if_end220, label %if_then219, !dbg !18, !prof !83

if_then219:                                       ; preds = %assert_end218
  %308 = load i64, i64* %default_function.ph.strides51, align 8, !dbg !18, !tbaa !181
  %309 = trunc i64 %308 to i32, !dbg !18
  %310 = icmp eq i32 %309, 512, !dbg !18
  %311 = getelementptr inbounds i64, i64* %default_function.ph.strides51, i64 1, !dbg !18
  %312 = load i64, i64* %311, align 8, !dbg !18, !tbaa !191
  %313 = trunc i64 %312 to i32, !dbg !18
  %314 = icmp eq i32 %313, 1, !dbg !18
  %315 = and i1 %310, %314, !dbg !18
  br i1 %315, label %if_end220, label %assert_fail221, !dbg !18, !prof !19

if_end220:                                        ; preds = %assert_end218, %if_then219
  %316 = getelementptr inbounds %1, %1* %ph15414, i64 0, i32 6, !dbg !18
  %317 = load i64, i64* %316, align 8, !dbg !18
  %318 = icmp eq i64 %317, 0, !dbg !18
  br i1 %318, label %assert_end224, label %assert_fail223, !dbg !18, !prof !19

assert_fail221:                                   ; preds = %if_then219
  %319 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %319(i8* getelementptr inbounds ([184 x i8], [184 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail223:                                   ; preds = %if_end220
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %320(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end224:                                    ; preds = %if_end220
  %321 = getelementptr inbounds %1, %1* %ph15414, i64 0, i32 1, i32 0, !dbg !18
  %322 = load i32, i32* %321, align 4, !dbg !18
  %323 = icmp eq i32 %322, 1, !dbg !18
  br i1 %323, label %assert_end226, label %assert_fail225, !dbg !18, !prof !19

assert_fail225:                                   ; preds = %assert_end224
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %324(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end226:                                    ; preds = %assert_end224
  %325 = getelementptr inbounds %1, %1* %ph15414, i64 0, i32 1, i32 1, !dbg !18
  %326 = load i32, i32* %325, align 4, !dbg !18
  %327 = icmp eq i32 %dev_id, %326, !dbg !18
  br i1 %327, label %assert_end228, label %assert_fail227, !dbg !18, !prof !19

assert_fail227:                                   ; preds = %assert_end226
  %328 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %328(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end228:                                    ; preds = %assert_end226
  %329 = getelementptr inbounds %1, %1* %ph16415, i64 0, i32 2, !dbg !18
  %330 = load i32, i32* %329, align 4, !dbg !18
  %331 = icmp eq i32 %330, 2, !dbg !18
  br i1 %331, label %assert_end232, label %assert_fail229, !dbg !18, !prof !19

assert_fail229:                                   ; preds = %assert_end228
  %332 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %332(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end232:                                    ; preds = %assert_end228
  %333 = getelementptr inbounds %1, %1* %ph16415, i64 0, i32 3, i32 2, !dbg !18
  %334 = load i16, i16* %333, align 2, !dbg !18
  %335 = icmp eq i16 %334, 1, !dbg !18
  %336 = getelementptr inbounds %1, %1* %ph16415, i64 0, i32 3, i32 1, !dbg !18
  %337 = load i8, i8* %336, align 1, !dbg !18
  %338 = icmp eq i8 %337, 32, !dbg !18
  %339 = getelementptr inbounds %1, %1* %ph16415, i64 0, i32 3, i32 0, !dbg !18
  %340 = load i8, i8* %339, align 1, !dbg !18
  %341 = icmp eq i8 %340, 2, !dbg !18
  %342 = and i1 %338, %341, !dbg !18
  %343 = and i1 %335, %342, !dbg !18
  br i1 %343, label %assert_end234, label %assert_fail233, !dbg !18, !prof !19

assert_fail233:                                   ; preds = %assert_end232
  %344 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %344(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end234:                                    ; preds = %assert_end232
  %345 = load i64, i64* %default_function.ph.shape57, align 8, !dbg !18, !tbaa !193
  %346 = trunc i64 %345 to i32, !dbg !18
  %347 = icmp eq i32 %346, 512, !dbg !18
  br i1 %347, label %assert_end236, label %assert_fail235, !dbg !18, !prof !19

assert_fail235:                                   ; preds = %assert_end234
  %348 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %348(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end236:                                    ; preds = %assert_end234
  %349 = getelementptr inbounds i64, i64* %default_function.ph.shape57, i64 1, !dbg !18
  %350 = load i64, i64* %349, align 8, !dbg !18, !tbaa !203
  %351 = trunc i64 %350 to i32, !dbg !18
  %352 = icmp eq i32 %351, 1376, !dbg !18
  br i1 %352, label %assert_end238, label %assert_fail237, !dbg !18, !prof !19

assert_fail237:                                   ; preds = %assert_end236
  %353 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %353(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end238:                                    ; preds = %assert_end236
  %354 = icmp eq i64* %default_function.ph.strides58, null, !dbg !18
  br i1 %354, label %if_end240, label %if_then239, !dbg !18, !prof !83

if_then239:                                       ; preds = %assert_end238
  %355 = load i64, i64* %default_function.ph.strides58, align 8, !dbg !18, !tbaa !205
  %356 = trunc i64 %355 to i32, !dbg !18
  %357 = icmp eq i32 %356, 1376, !dbg !18
  %358 = getelementptr inbounds i64, i64* %default_function.ph.strides58, i64 1, !dbg !18
  %359 = load i64, i64* %358, align 8, !dbg !18, !tbaa !215
  %360 = trunc i64 %359 to i32, !dbg !18
  %361 = icmp eq i32 %360, 1, !dbg !18
  %362 = and i1 %357, %361, !dbg !18
  br i1 %362, label %if_end240, label %assert_fail241, !dbg !18, !prof !19

if_end240:                                        ; preds = %assert_end238, %if_then239
  %363 = getelementptr inbounds %1, %1* %ph16415, i64 0, i32 6, !dbg !18
  %364 = load i64, i64* %363, align 8, !dbg !18
  %365 = icmp eq i64 %364, 0, !dbg !18
  br i1 %365, label %assert_end244, label %assert_fail243, !dbg !18, !prof !19

assert_fail241:                                   ; preds = %if_then239
  %366 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %366(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail243:                                   ; preds = %if_end240
  %367 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %367(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end244:                                    ; preds = %if_end240
  %368 = getelementptr inbounds %1, %1* %ph16415, i64 0, i32 1, i32 0, !dbg !18
  %369 = load i32, i32* %368, align 4, !dbg !18
  %370 = icmp eq i32 %369, 1, !dbg !18
  br i1 %370, label %assert_end246, label %assert_fail245, !dbg !18, !prof !19

assert_fail245:                                   ; preds = %assert_end244
  %371 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %371(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end246:                                    ; preds = %assert_end244
  %372 = getelementptr inbounds %1, %1* %ph16415, i64 0, i32 1, i32 1, !dbg !18
  %373 = load i32, i32* %372, align 4, !dbg !18
  %374 = icmp eq i32 %dev_id, %373, !dbg !18
  br i1 %374, label %assert_end248, label %assert_fail247, !dbg !18, !prof !19

assert_fail247:                                   ; preds = %assert_end246
  %375 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %375(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end248:                                    ; preds = %assert_end246
  %376 = getelementptr inbounds %1, %1* %ph17416, i64 0, i32 2, !dbg !18
  %377 = load i32, i32* %376, align 4, !dbg !18
  %378 = icmp eq i32 %377, 2, !dbg !18
  br i1 %378, label %assert_end252, label %assert_fail249, !dbg !18, !prof !19

assert_fail249:                                   ; preds = %assert_end248
  %379 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %379(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end252:                                    ; preds = %assert_end248
  %380 = getelementptr inbounds %1, %1* %ph17416, i64 0, i32 3, i32 2, !dbg !18
  %381 = load i16, i16* %380, align 2, !dbg !18
  %382 = icmp eq i16 %381, 1, !dbg !18
  %383 = getelementptr inbounds %1, %1* %ph17416, i64 0, i32 3, i32 1, !dbg !18
  %384 = load i8, i8* %383, align 1, !dbg !18
  %385 = icmp eq i8 %384, 32, !dbg !18
  %386 = getelementptr inbounds %1, %1* %ph17416, i64 0, i32 3, i32 0, !dbg !18
  %387 = load i8, i8* %386, align 1, !dbg !18
  %388 = icmp eq i8 %387, 2, !dbg !18
  %389 = and i1 %385, %388, !dbg !18
  %390 = and i1 %382, %389, !dbg !18
  br i1 %390, label %assert_end254, label %assert_fail253, !dbg !18, !prof !19

assert_fail253:                                   ; preds = %assert_end252
  %391 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %391(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end254:                                    ; preds = %assert_end252
  %392 = load i64, i64* %default_function.ph.shape64, align 8, !dbg !18, !tbaa !217
  %393 = trunc i64 %392 to i32, !dbg !18
  %394 = icmp eq i32 %393, 512, !dbg !18
  br i1 %394, label %assert_end256, label %assert_fail255, !dbg !18, !prof !19

assert_fail255:                                   ; preds = %assert_end254
  %395 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %395(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end256:                                    ; preds = %assert_end254
  %396 = getelementptr inbounds i64, i64* %default_function.ph.shape64, i64 1, !dbg !18
  %397 = load i64, i64* %396, align 8, !dbg !18, !tbaa !227
  %398 = trunc i64 %397 to i32, !dbg !18
  %399 = icmp eq i32 %398, 1376, !dbg !18
  br i1 %399, label %assert_end258, label %assert_fail257, !dbg !18, !prof !19

assert_fail257:                                   ; preds = %assert_end256
  %400 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %400(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end258:                                    ; preds = %assert_end256
  %401 = icmp eq i64* %default_function.ph.strides65, null, !dbg !18
  br i1 %401, label %if_end260, label %if_then259, !dbg !18, !prof !83

if_then259:                                       ; preds = %assert_end258
  %402 = load i64, i64* %default_function.ph.strides65, align 8, !dbg !18, !tbaa !229
  %403 = trunc i64 %402 to i32, !dbg !18
  %404 = icmp eq i32 %403, 1376, !dbg !18
  %405 = getelementptr inbounds i64, i64* %default_function.ph.strides65, i64 1, !dbg !18
  %406 = load i64, i64* %405, align 8, !dbg !18, !tbaa !239
  %407 = trunc i64 %406 to i32, !dbg !18
  %408 = icmp eq i32 %407, 1, !dbg !18
  %409 = and i1 %404, %408, !dbg !18
  br i1 %409, label %if_end260, label %assert_fail261, !dbg !18, !prof !19

if_end260:                                        ; preds = %assert_end258, %if_then259
  %410 = getelementptr inbounds %1, %1* %ph17416, i64 0, i32 6, !dbg !18
  %411 = load i64, i64* %410, align 8, !dbg !18
  %412 = icmp eq i64 %411, 0, !dbg !18
  br i1 %412, label %assert_end264, label %assert_fail263, !dbg !18, !prof !19

assert_fail261:                                   ; preds = %if_then259
  %413 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %413(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail263:                                   ; preds = %if_end260
  %414 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %414(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end264:                                    ; preds = %if_end260
  %415 = getelementptr inbounds %1, %1* %ph17416, i64 0, i32 1, i32 0, !dbg !18
  %416 = load i32, i32* %415, align 4, !dbg !18
  %417 = icmp eq i32 %416, 1, !dbg !18
  br i1 %417, label %assert_end266, label %assert_fail265, !dbg !18, !prof !19

assert_fail265:                                   ; preds = %assert_end264
  %418 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %418(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end266:                                    ; preds = %assert_end264
  %419 = getelementptr inbounds %1, %1* %ph17416, i64 0, i32 1, i32 1, !dbg !18
  %420 = load i32, i32* %419, align 4, !dbg !18
  %421 = icmp eq i32 %dev_id, %420, !dbg !18
  br i1 %421, label %assert_end268, label %assert_fail267, !dbg !18, !prof !19

assert_fail267:                                   ; preds = %assert_end266
  %422 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %422(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end268:                                    ; preds = %assert_end266
  %423 = getelementptr inbounds %1, %1* %ph18417, i64 0, i32 2, !dbg !18
  %424 = load i32, i32* %423, align 4, !dbg !18
  %425 = icmp eq i32 %424, 2, !dbg !18
  br i1 %425, label %assert_end272, label %assert_fail269, !dbg !18, !prof !19

assert_fail269:                                   ; preds = %assert_end268
  %426 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %426(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end272:                                    ; preds = %assert_end268
  %427 = getelementptr inbounds %1, %1* %ph18417, i64 0, i32 3, i32 2, !dbg !18
  %428 = load i16, i16* %427, align 2, !dbg !18
  %429 = icmp eq i16 %428, 1, !dbg !18
  %430 = getelementptr inbounds %1, %1* %ph18417, i64 0, i32 3, i32 1, !dbg !18
  %431 = load i8, i8* %430, align 1, !dbg !18
  %432 = icmp eq i8 %431, 32, !dbg !18
  %433 = getelementptr inbounds %1, %1* %ph18417, i64 0, i32 3, i32 0, !dbg !18
  %434 = load i8, i8* %433, align 1, !dbg !18
  %435 = icmp eq i8 %434, 2, !dbg !18
  %436 = and i1 %432, %435, !dbg !18
  %437 = and i1 %429, %436, !dbg !18
  br i1 %437, label %assert_end274, label %assert_fail273, !dbg !18, !prof !19

assert_fail273:                                   ; preds = %assert_end272
  %438 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %438(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end274:                                    ; preds = %assert_end272
  %439 = load i64, i64* %default_function.ph.shape71, align 8, !dbg !18, !tbaa !241
  %440 = trunc i64 %439 to i32, !dbg !18
  %441 = icmp eq i32 %440, 1376, !dbg !18
  br i1 %441, label %assert_end276, label %assert_fail275, !dbg !18, !prof !19

assert_fail275:                                   ; preds = %assert_end274
  %442 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %442(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end276:                                    ; preds = %assert_end274
  %443 = getelementptr inbounds i64, i64* %default_function.ph.shape71, i64 1, !dbg !18
  %444 = load i64, i64* %443, align 8, !dbg !18, !tbaa !251
  %445 = trunc i64 %444 to i32, !dbg !18
  %446 = icmp eq i32 %445, 1376, !dbg !18
  br i1 %446, label %assert_end278, label %assert_fail277, !dbg !18, !prof !19

assert_fail277:                                   ; preds = %assert_end276
  %447 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %447(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end278:                                    ; preds = %assert_end276
  %448 = icmp eq i64* %default_function.ph.strides72, null, !dbg !18
  br i1 %448, label %if_end280, label %if_then279, !dbg !18, !prof !83

if_then279:                                       ; preds = %assert_end278
  %449 = load i64, i64* %default_function.ph.strides72, align 8, !dbg !18, !tbaa !253
  %450 = trunc i64 %449 to i32, !dbg !18
  %451 = icmp eq i32 %450, 1376, !dbg !18
  %452 = getelementptr inbounds i64, i64* %default_function.ph.strides72, i64 1, !dbg !18
  %453 = load i64, i64* %452, align 8, !dbg !18, !tbaa !263
  %454 = trunc i64 %453 to i32, !dbg !18
  %455 = icmp eq i32 %454, 1, !dbg !18
  %456 = and i1 %451, %455, !dbg !18
  br i1 %456, label %if_end280, label %assert_fail281, !dbg !18, !prof !19

if_end280:                                        ; preds = %assert_end278, %if_then279
  %457 = getelementptr inbounds %1, %1* %ph18417, i64 0, i32 6, !dbg !18
  %458 = load i64, i64* %457, align 8, !dbg !18
  %459 = icmp eq i64 %458, 0, !dbg !18
  br i1 %459, label %assert_end284, label %assert_fail283, !dbg !18, !prof !19

assert_fail281:                                   ; preds = %if_then279
  %460 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %460(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail283:                                   ; preds = %if_end280
  %461 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %461(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end284:                                    ; preds = %if_end280
  %462 = getelementptr inbounds %1, %1* %ph18417, i64 0, i32 1, i32 0, !dbg !18
  %463 = load i32, i32* %462, align 4, !dbg !18
  %464 = icmp eq i32 %463, 1, !dbg !18
  br i1 %464, label %assert_end286, label %assert_fail285, !dbg !18, !prof !19

assert_fail285:                                   ; preds = %assert_end284
  %465 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %465(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end286:                                    ; preds = %assert_end284
  %466 = getelementptr inbounds %1, %1* %ph18417, i64 0, i32 1, i32 1, !dbg !18
  %467 = load i32, i32* %466, align 4, !dbg !18
  %468 = icmp eq i32 %dev_id, %467, !dbg !18
  br i1 %468, label %assert_end288, label %assert_fail287, !dbg !18, !prof !19

assert_fail287:                                   ; preds = %assert_end286
  %469 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %469(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end288:                                    ; preds = %assert_end286
  %470 = getelementptr inbounds %1, %1* %ph19418, i64 0, i32 2, !dbg !18
  %471 = load i32, i32* %470, align 4, !dbg !18
  %472 = icmp eq i32 %471, 1, !dbg !18
  br i1 %472, label %assert_end292, label %assert_fail289, !dbg !18, !prof !19

assert_fail289:                                   ; preds = %assert_end288
  %473 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %473(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end292:                                    ; preds = %assert_end288
  %474 = getelementptr inbounds %1, %1* %ph19418, i64 0, i32 3, i32 2, !dbg !18
  %475 = load i16, i16* %474, align 2, !dbg !18
  %476 = icmp eq i16 %475, 1, !dbg !18
  %477 = getelementptr inbounds %1, %1* %ph19418, i64 0, i32 3, i32 1, !dbg !18
  %478 = load i8, i8* %477, align 1, !dbg !18
  %479 = icmp eq i8 %478, 32, !dbg !18
  %480 = getelementptr inbounds %1, %1* %ph19418, i64 0, i32 3, i32 0, !dbg !18
  %481 = load i8, i8* %480, align 1, !dbg !18
  %482 = icmp eq i8 %481, 2, !dbg !18
  %483 = and i1 %479, %482, !dbg !18
  %484 = and i1 %476, %483, !dbg !18
  br i1 %484, label %assert_end294, label %assert_fail293, !dbg !18, !prof !19

assert_fail293:                                   ; preds = %assert_end292
  %485 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %485(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end294:                                    ; preds = %assert_end292
  %486 = load i64, i64* %default_function.ph.shape78, align 8, !dbg !18, !tbaa !265
  %487 = trunc i64 %486 to i32, !dbg !18
  %488 = icmp eq i32 %487, 512, !dbg !18
  br i1 %488, label %assert_end296, label %assert_fail295, !dbg !18, !prof !19

assert_fail295:                                   ; preds = %assert_end294
  %489 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %489(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end296:                                    ; preds = %assert_end294
  %490 = icmp eq i64* %default_function.ph.strides79, null, !dbg !18
  br i1 %490, label %if_end298, label %if_then297, !dbg !18, !prof !83

if_then297:                                       ; preds = %assert_end296
  %491 = load i64, i64* %default_function.ph.strides79, align 8, !dbg !18, !tbaa !275
  %492 = trunc i64 %491 to i32, !dbg !18
  %493 = icmp eq i32 %492, 1, !dbg !18
  br i1 %493, label %if_end298, label %assert_fail299, !dbg !18, !prof !19

if_end298:                                        ; preds = %assert_end296, %if_then297
  %494 = getelementptr inbounds %1, %1* %ph19418, i64 0, i32 6, !dbg !18
  %495 = load i64, i64* %494, align 8, !dbg !18
  %496 = icmp eq i64 %495, 0, !dbg !18
  br i1 %496, label %assert_end302, label %assert_fail301, !dbg !18, !prof !19

assert_fail299:                                   ; preds = %if_then297
  %497 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %497(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail301:                                   ; preds = %if_end298
  %498 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %498(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end302:                                    ; preds = %if_end298
  %499 = getelementptr inbounds %1, %1* %ph19418, i64 0, i32 1, i32 0, !dbg !18
  %500 = load i32, i32* %499, align 4, !dbg !18
  %501 = icmp eq i32 %500, 1, !dbg !18
  br i1 %501, label %assert_end304, label %assert_fail303, !dbg !18, !prof !19

assert_fail303:                                   ; preds = %assert_end302
  %502 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %502(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end304:                                    ; preds = %assert_end302
  %503 = getelementptr inbounds %1, %1* %ph19418, i64 0, i32 1, i32 1, !dbg !18
  %504 = load i32, i32* %503, align 4, !dbg !18
  %505 = icmp eq i32 %dev_id, %504, !dbg !18
  br i1 %505, label %assert_end306, label %assert_fail305, !dbg !18, !prof !19

assert_fail305:                                   ; preds = %assert_end304
  %506 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %506(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end306:                                    ; preds = %assert_end304
  %507 = getelementptr inbounds %1, %1* %ph20419, i64 0, i32 2, !dbg !18
  %508 = load i32, i32* %507, align 4, !dbg !18
  %509 = icmp eq i32 %508, 1, !dbg !18
  br i1 %509, label %assert_end310, label %assert_fail307, !dbg !18, !prof !19

assert_fail307:                                   ; preds = %assert_end306
  %510 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %510(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end310:                                    ; preds = %assert_end306
  %511 = getelementptr inbounds %1, %1* %ph20419, i64 0, i32 3, i32 2, !dbg !18
  %512 = load i16, i16* %511, align 2, !dbg !18
  %513 = icmp eq i16 %512, 1, !dbg !18
  %514 = getelementptr inbounds %1, %1* %ph20419, i64 0, i32 3, i32 1, !dbg !18
  %515 = load i8, i8* %514, align 1, !dbg !18
  %516 = icmp eq i8 %515, 32, !dbg !18
  %517 = getelementptr inbounds %1, %1* %ph20419, i64 0, i32 3, i32 0, !dbg !18
  %518 = load i8, i8* %517, align 1, !dbg !18
  %519 = icmp eq i8 %518, 2, !dbg !18
  %520 = and i1 %516, %519, !dbg !18
  %521 = and i1 %513, %520, !dbg !18
  br i1 %521, label %assert_end312, label %assert_fail311, !dbg !18, !prof !19

assert_fail311:                                   ; preds = %assert_end310
  %522 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %522(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end312:                                    ; preds = %assert_end310
  %523 = load i64, i64* %default_function.ph.shape85, align 8, !dbg !18, !tbaa !285
  %524 = trunc i64 %523 to i32, !dbg !18
  %525 = icmp eq i32 %524, 512, !dbg !18
  br i1 %525, label %assert_end314, label %assert_fail313, !dbg !18, !prof !19

assert_fail313:                                   ; preds = %assert_end312
  %526 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %526(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end314:                                    ; preds = %assert_end312
  %527 = icmp eq i64* %default_function.ph.strides86, null, !dbg !18
  br i1 %527, label %if_end316, label %if_then315, !dbg !18, !prof !83

if_then315:                                       ; preds = %assert_end314
  %528 = load i64, i64* %default_function.ph.strides86, align 8, !dbg !18, !tbaa !295
  %529 = trunc i64 %528 to i32, !dbg !18
  %530 = icmp eq i32 %529, 1, !dbg !18
  br i1 %530, label %if_end316, label %assert_fail317, !dbg !18, !prof !19

if_end316:                                        ; preds = %assert_end314, %if_then315
  %531 = getelementptr inbounds %1, %1* %ph20419, i64 0, i32 6, !dbg !18
  %532 = load i64, i64* %531, align 8, !dbg !18
  %533 = icmp eq i64 %532, 0, !dbg !18
  br i1 %533, label %assert_end320, label %assert_fail319, !dbg !18, !prof !19

assert_fail317:                                   ; preds = %if_then315
  %534 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %534(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail319:                                   ; preds = %if_end316
  %535 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %535(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end320:                                    ; preds = %if_end316
  %536 = getelementptr inbounds %1, %1* %ph20419, i64 0, i32 1, i32 0, !dbg !18
  %537 = load i32, i32* %536, align 4, !dbg !18
  %538 = icmp eq i32 %537, 1, !dbg !18
  br i1 %538, label %assert_end322, label %assert_fail321, !dbg !18, !prof !19

assert_fail321:                                   ; preds = %assert_end320
  %539 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %539(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end322:                                    ; preds = %assert_end320
  %540 = getelementptr inbounds %1, %1* %ph20419, i64 0, i32 1, i32 1, !dbg !18
  %541 = load i32, i32* %540, align 4, !dbg !18
  %542 = icmp eq i32 %dev_id, %541, !dbg !18
  br i1 %542, label %assert_end324, label %assert_fail323, !dbg !18, !prof !19

assert_fail323:                                   ; preds = %assert_end322
  %543 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %543(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end324:                                    ; preds = %assert_end322
  %544 = getelementptr inbounds %1, %1* %ph21420, i64 0, i32 2, !dbg !18
  %545 = load i32, i32* %544, align 4, !dbg !18
  %546 = icmp eq i32 %545, 4, !dbg !18
  br i1 %546, label %assert_end328, label %assert_fail325, !dbg !18, !prof !19

assert_fail325:                                   ; preds = %assert_end324
  %547 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %547(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end328:                                    ; preds = %assert_end324
  %548 = getelementptr inbounds %1, %1* %ph21420, i64 0, i32 3, i32 2, !dbg !18
  %549 = load i16, i16* %548, align 2, !dbg !18
  %550 = icmp eq i16 %549, 1, !dbg !18
  %551 = getelementptr inbounds %1, %1* %ph21420, i64 0, i32 3, i32 1, !dbg !18
  %552 = load i8, i8* %551, align 1, !dbg !18
  %553 = icmp eq i8 %552, 32, !dbg !18
  %554 = getelementptr inbounds %1, %1* %ph21420, i64 0, i32 3, i32 0, !dbg !18
  %555 = load i8, i8* %554, align 1, !dbg !18
  %556 = icmp eq i8 %555, 2, !dbg !18
  %557 = and i1 %553, %556, !dbg !18
  %558 = and i1 %550, %557, !dbg !18
  br i1 %558, label %assert_end330, label %assert_fail329, !dbg !18, !prof !19

assert_fail329:                                   ; preds = %assert_end328
  %559 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %559(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end330:                                    ; preds = %assert_end328
  %560 = load i64, i64* %default_function.ph.shape92, align 8, !dbg !18, !tbaa !305
  %561 = trunc i64 %560 to i32, !dbg !18
  %562 = icmp eq i32 %561, 1, !dbg !18
  br i1 %562, label %assert_end332, label %assert_fail331, !dbg !18, !prof !19

assert_fail331:                                   ; preds = %assert_end330
  %563 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %563(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end332:                                    ; preds = %assert_end330
  %564 = getelementptr inbounds i64, i64* %default_function.ph.shape92, i64 1, !dbg !18
  %565 = load i64, i64* %564, align 8, !dbg !18, !tbaa !315
  %566 = trunc i64 %565 to i32, !dbg !18
  %567 = icmp eq i32 %566, 1, !dbg !18
  br i1 %567, label %assert_end334, label %assert_fail333, !dbg !18, !prof !19

assert_fail333:                                   ; preds = %assert_end332
  %568 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %568(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end334:                                    ; preds = %assert_end332
  %569 = getelementptr inbounds i64, i64* %default_function.ph.shape92, i64 2, !dbg !18
  %570 = load i64, i64* %569, align 8, !dbg !18, !tbaa !317
  %571 = trunc i64 %570 to i32, !dbg !18
  %572 = icmp eq i32 %571, 128, !dbg !18
  br i1 %572, label %assert_end336, label %assert_fail335, !dbg !18, !prof !19

assert_fail335:                                   ; preds = %assert_end334
  %573 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %573(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end336:                                    ; preds = %assert_end334
  %574 = getelementptr inbounds i64, i64* %default_function.ph.shape92, i64 3, !dbg !18
  %575 = load i64, i64* %574, align 8, !dbg !18, !tbaa !320
  %576 = trunc i64 %575 to i32, !dbg !18
  %577 = icmp eq i32 %576, 64, !dbg !18
  br i1 %577, label %assert_end338, label %assert_fail337, !dbg !18, !prof !19

assert_fail337:                                   ; preds = %assert_end336
  %578 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %578(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end338:                                    ; preds = %assert_end336
  %579 = icmp eq i64* %default_function.ph.strides93, null, !dbg !18
  br i1 %579, label %if_end340, label %if_then339, !dbg !18, !prof !83

if_then339:                                       ; preds = %assert_end338
  %580 = getelementptr inbounds i64, i64* %default_function.ph.strides93, i64 2, !dbg !18
  %581 = load i64, i64* %580, align 8, !dbg !18, !tbaa !322
  %582 = trunc i64 %581 to i32, !dbg !18
  %583 = icmp eq i32 %582, 64, !dbg !18
  %584 = getelementptr inbounds i64, i64* %default_function.ph.strides93, i64 3, !dbg !18
  %585 = load i64, i64* %584, align 8, !dbg !18, !tbaa !332
  %586 = trunc i64 %585 to i32, !dbg !18
  %587 = icmp eq i32 %586, 1, !dbg !18
  %588 = and i1 %583, %587, !dbg !18
  br i1 %588, label %if_end340, label %assert_fail341, !dbg !18, !prof !19

if_end340:                                        ; preds = %assert_end338, %if_then339
  %589 = getelementptr inbounds %1, %1* %ph21420, i64 0, i32 6, !dbg !18
  %590 = load i64, i64* %589, align 8, !dbg !18
  %591 = icmp eq i64 %590, 0, !dbg !18
  br i1 %591, label %assert_end344, label %assert_fail343, !dbg !18, !prof !19

assert_fail341:                                   ; preds = %if_then339
  %592 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %592(i8* getelementptr inbounds ([183 x i8], [183 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail343:                                   ; preds = %if_end340
  %593 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %593(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end344:                                    ; preds = %if_end340
  %594 = getelementptr inbounds %1, %1* %ph21420, i64 0, i32 1, i32 0, !dbg !18
  %595 = load i32, i32* %594, align 4, !dbg !18
  %596 = icmp eq i32 %595, 1, !dbg !18
  br i1 %596, label %assert_end346, label %assert_fail345, !dbg !18, !prof !19

assert_fail345:                                   ; preds = %assert_end344
  %597 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %597(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end346:                                    ; preds = %assert_end344
  %598 = getelementptr inbounds %1, %1* %ph21420, i64 0, i32 1, i32 1, !dbg !18
  %599 = load i32, i32* %598, align 4, !dbg !18
  %600 = icmp eq i32 %dev_id, %599, !dbg !18
  br i1 %600, label %assert_end348, label %assert_fail347, !dbg !18, !prof !19

assert_fail347:                                   ; preds = %assert_end346
  %601 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %601(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end348:                                    ; preds = %assert_end346
  %602 = getelementptr inbounds %1, %1* %ph22421, i64 0, i32 2, !dbg !18
  %603 = load i32, i32* %602, align 4, !dbg !18
  %604 = icmp eq i32 %603, 4, !dbg !18
  br i1 %604, label %assert_end352, label %assert_fail349, !dbg !18, !prof !19

assert_fail349:                                   ; preds = %assert_end348
  %605 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %605(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end352:                                    ; preds = %assert_end348
  %606 = getelementptr inbounds %1, %1* %ph22421, i64 0, i32 3, i32 2, !dbg !18
  %607 = load i16, i16* %606, align 2, !dbg !18
  %608 = icmp eq i16 %607, 1, !dbg !18
  %609 = getelementptr inbounds %1, %1* %ph22421, i64 0, i32 3, i32 1, !dbg !18
  %610 = load i8, i8* %609, align 1, !dbg !18
  %611 = icmp eq i8 %610, 32, !dbg !18
  %612 = getelementptr inbounds %1, %1* %ph22421, i64 0, i32 3, i32 0, !dbg !18
  %613 = load i8, i8* %612, align 1, !dbg !18
  %614 = icmp eq i8 %613, 2, !dbg !18
  %615 = and i1 %611, %614, !dbg !18
  %616 = and i1 %608, %615, !dbg !18
  br i1 %616, label %assert_end354, label %assert_fail353, !dbg !18, !prof !19

assert_fail353:                                   ; preds = %assert_end352
  %617 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %617(i8* getelementptr inbounds ([227 x i8], [227 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end354:                                    ; preds = %assert_end352
  %618 = load i64, i64* %default_function.ph.shape99, align 8, !dbg !18, !tbaa !334
  %619 = trunc i64 %618 to i32, !dbg !18
  %620 = icmp eq i32 %619, 1, !dbg !18
  br i1 %620, label %assert_end356, label %assert_fail355, !dbg !18, !prof !19

assert_fail355:                                   ; preds = %assert_end354
  %621 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %621(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end356:                                    ; preds = %assert_end354
  %622 = getelementptr inbounds i64, i64* %default_function.ph.shape99, i64 1, !dbg !18
  %623 = load i64, i64* %622, align 8, !dbg !18, !tbaa !344
  %624 = trunc i64 %623 to i32, !dbg !18
  %625 = icmp eq i32 %624, 1, !dbg !18
  br i1 %625, label %assert_end358, label %assert_fail357, !dbg !18, !prof !19

assert_fail357:                                   ; preds = %assert_end356
  %626 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %626(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end358:                                    ; preds = %assert_end356
  %627 = getelementptr inbounds i64, i64* %default_function.ph.shape99, i64 2, !dbg !18
  %628 = load i64, i64* %627, align 8, !dbg !18, !tbaa !346
  %629 = trunc i64 %628 to i32, !dbg !18
  %630 = icmp eq i32 %629, 128, !dbg !18
  br i1 %630, label %assert_end360, label %assert_fail359, !dbg !18, !prof !19

assert_fail359:                                   ; preds = %assert_end358
  %631 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %631(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end360:                                    ; preds = %assert_end358
  %632 = getelementptr inbounds i64, i64* %default_function.ph.shape99, i64 3, !dbg !18
  %633 = load i64, i64* %632, align 8, !dbg !18, !tbaa !349
  %634 = trunc i64 %633 to i32, !dbg !18
  %635 = icmp eq i32 %634, 64, !dbg !18
  br i1 %635, label %assert_end362, label %assert_fail361, !dbg !18, !prof !19

assert_fail361:                                   ; preds = %assert_end360
  %636 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %636(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end362:                                    ; preds = %assert_end360
  %637 = icmp eq i64* %default_function.ph.strides100, null, !dbg !18
  br i1 %637, label %if_end364, label %if_then363, !dbg !18, !prof !83

if_then363:                                       ; preds = %assert_end362
  %638 = getelementptr inbounds i64, i64* %default_function.ph.strides100, i64 2, !dbg !18
  %639 = load i64, i64* %638, align 8, !dbg !18, !tbaa !351
  %640 = trunc i64 %639 to i32, !dbg !18
  %641 = icmp eq i32 %640, 64, !dbg !18
  %642 = getelementptr inbounds i64, i64* %default_function.ph.strides100, i64 3, !dbg !18
  %643 = load i64, i64* %642, align 8, !dbg !18, !tbaa !361
  %644 = trunc i64 %643 to i32, !dbg !18
  %645 = icmp eq i32 %644, 1, !dbg !18
  %646 = and i1 %641, %645, !dbg !18
  br i1 %646, label %if_end364, label %assert_fail365, !dbg !18, !prof !19

if_end364:                                        ; preds = %assert_end362, %if_then363
  %647 = getelementptr inbounds %1, %1* %ph22421, i64 0, i32 6, !dbg !18
  %648 = load i64, i64* %647, align 8, !dbg !18
  %649 = icmp eq i64 %648, 0, !dbg !18
  br i1 %649, label %assert_end368, label %assert_fail367, !dbg !18, !prof !19

assert_fail365:                                   ; preds = %if_then363
  %650 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %650(i8* getelementptr inbounds ([183 x i8], [183 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail367:                                   ; preds = %if_end364
  %651 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %651(i8* getelementptr inbounds ([190 x i8], [190 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end368:                                    ; preds = %if_end364
  %652 = getelementptr inbounds %1, %1* %ph22421, i64 0, i32 1, i32 0, !dbg !18
  %653 = load i32, i32* %652, align 4, !dbg !18
  %654 = icmp eq i32 %653, 1, !dbg !18
  br i1 %654, label %assert_end370, label %assert_fail369, !dbg !18, !prof !19

assert_fail369:                                   ; preds = %assert_end368
  %655 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %655(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end370:                                    ; preds = %assert_end368
  %656 = getelementptr inbounds %1, %1* %ph22421, i64 0, i32 1, i32 1, !dbg !18
  %657 = load i32, i32* %656, align 4, !dbg !18
  %658 = icmp eq i32 %dev_id, %657, !dbg !18
  br i1 %658, label %assert_end372, label %assert_fail371, !dbg !18, !prof !19

assert_fail371:                                   ; preds = %assert_end370
  %659 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %659(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end372:                                    ; preds = %assert_end370
  %660 = getelementptr inbounds %1, %1* %T_add422, i64 0, i32 2, !dbg !18
  %661 = load i32, i32* %660, align 4, !dbg !18
  %662 = icmp eq i32 %661, 3, !dbg !18
  br i1 %662, label %assert_end376, label %assert_fail373, !dbg !18, !prof !19

assert_fail373:                                   ; preds = %assert_end372
  %663 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %663(i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end376:                                    ; preds = %assert_end372
  %664 = getelementptr inbounds %1, %1* %T_add422, i64 0, i32 3, i32 2, !dbg !18
  %665 = load i16, i16* %664, align 2, !dbg !18
  %666 = icmp eq i16 %665, 1, !dbg !18
  %667 = getelementptr inbounds %1, %1* %T_add422, i64 0, i32 3, i32 1, !dbg !18
  %668 = load i8, i8* %667, align 1, !dbg !18
  %669 = icmp eq i8 %668, 32, !dbg !18
  %670 = getelementptr inbounds %1, %1* %T_add422, i64 0, i32 3, i32 0, !dbg !18
  %671 = load i8, i8* %670, align 1, !dbg !18
  %672 = icmp eq i8 %671, 2, !dbg !18
  %673 = and i1 %669, %672, !dbg !18
  %674 = and i1 %666, %673, !dbg !18
  br i1 %674, label %assert_end378, label %assert_fail377, !dbg !18, !prof !19

assert_fail377:                                   ; preds = %assert_end376
  %675 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %675(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end378:                                    ; preds = %assert_end376
  %676 = load i64, i64* %default_function.T_add.shape, align 8, !dbg !18, !tbaa !363
  %677 = trunc i64 %676 to i32, !dbg !18
  %678 = icmp eq i32 %677, 1, !dbg !18
  br i1 %678, label %assert_end380, label %assert_fail379, !dbg !18, !prof !19

assert_fail379:                                   ; preds = %assert_end378
  %679 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %679(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end380:                                    ; preds = %assert_end378
  %680 = getelementptr inbounds i64, i64* %default_function.T_add.shape, i64 1, !dbg !18
  %681 = load i64, i64* %680, align 8, !dbg !18, !tbaa !373
  %682 = trunc i64 %681 to i32, !dbg !18
  %683 = icmp eq i32 %682, 128, !dbg !18
  br i1 %683, label %assert_end382, label %assert_fail381, !dbg !18, !prof !19

assert_fail381:                                   ; preds = %assert_end380
  %684 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %684(i8* getelementptr inbounds ([198 x i8], [198 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end382:                                    ; preds = %assert_end380
  %685 = getelementptr inbounds i64, i64* %default_function.T_add.shape, i64 2, !dbg !18
  %686 = load i64, i64* %685, align 8, !dbg !18, !tbaa !375
  %687 = trunc i64 %686 to i32, !dbg !18
  %688 = icmp eq i32 %687, 512, !dbg !18
  br i1 %688, label %assert_end384, label %assert_fail383, !dbg !18, !prof !19

assert_fail383:                                   ; preds = %assert_end382
  %689 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %689(i8* getelementptr inbounds ([198 x i8], [198 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end384:                                    ; preds = %assert_end382
  %690 = icmp eq i64* %default_function.T_add.strides, null, !dbg !18
  br i1 %690, label %if_end386, label %if_then385, !dbg !18, !prof !83

if_then385:                                       ; preds = %assert_end384
  %691 = getelementptr inbounds i64, i64* %default_function.T_add.strides, i64 1, !dbg !18
  %692 = load i64, i64* %691, align 8, !dbg !18, !tbaa !378
  %693 = trunc i64 %692 to i32, !dbg !18
  %694 = icmp eq i32 %693, 512, !dbg !18
  %695 = getelementptr inbounds i64, i64* %default_function.T_add.strides, i64 2, !dbg !18
  %696 = load i64, i64* %695, align 8, !dbg !18, !tbaa !388
  %697 = trunc i64 %696 to i32, !dbg !18
  %698 = icmp eq i32 %697, 1, !dbg !18
  %699 = and i1 %694, %698, !dbg !18
  br i1 %699, label %if_end386, label %assert_fail387, !dbg !18, !prof !19

if_end386:                                        ; preds = %assert_end384, %if_then385
  %700 = getelementptr inbounds %1, %1* %T_add422, i64 0, i32 6, !dbg !18
  %701 = load i64, i64* %700, align 8, !dbg !18
  %702 = icmp eq i64 %701, 0, !dbg !18
  br i1 %702, label %assert_end390, label %assert_fail389, !dbg !18, !prof !19

assert_fail387:                                   ; preds = %if_then385
  %703 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %703(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail389:                                   ; preds = %if_end386
  %704 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %704(i8* getelementptr inbounds ([199 x i8], [199 x i8]* @.str.43, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end390:                                    ; preds = %if_end386
  %705 = getelementptr inbounds %1, %1* %T_add422, i64 0, i32 1, i32 0, !dbg !18
  %706 = load i32, i32* %705, align 4, !dbg !18
  %707 = icmp eq i32 %706, 1, !dbg !18
  br i1 %707, label %assert_end392, label %assert_fail391, !dbg !18, !prof !19

assert_fail391:                                   ; preds = %assert_end390
  %708 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %708(i8* getelementptr inbounds ([179 x i8], [179 x i8]* @.str.44, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end392:                                    ; preds = %assert_end390
  %709 = getelementptr inbounds %1, %1* %T_add422, i64 0, i32 1, i32 1, !dbg !18
  %710 = load i32, i32* %709, align 4, !dbg !18
  %711 = icmp eq i32 %dev_id, %710, !dbg !18
  br i1 %711, label %assert_end394, label %assert_fail393, !dbg !18, !prof !19

assert_fail393:                                   ; preds = %assert_end392
  %712 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %712(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.45, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end394:                                    ; preds = %assert_end392
  %713 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %T_add_void_ptr435, i32* nonnull %stack_tcode409.sub, float* %ph_void_ptr423, float* %ph_void_ptr73431, float* %ph_void_ptr24424, float* %ph_void_ptr94434, float* %ph_void_ptr87433, float* %ph_void_ptr31425, float* %ph_void_ptr38426, float* %ph_void_ptr45427, float* %ph_void_ptr80432, float* %ph_void_ptr52428, float* %ph_void_ptr59429, float* %ph_void_ptr66430), !dbg !18
  ret i32 %713, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5, float* noalias align 64 %6, float* noalias align 64 %7, float* noalias align 64 %8, float* noalias align 64 %9, float* noalias align 64 %10, float* noalias align 64 %11, float* noalias align 64 %12, float* noalias align 64 %13, float* noalias align 64 %14) unnamed_addr #2 {
entry:
  %15 = alloca i8*, align 8
  %16 = bitcast i8* %0 to %0*
  %17 = bitcast i8* %0 to float**
  store float* %1, float** %17, align 8
  %18 = getelementptr inbounds i8, i8* %0, i64 8
  %19 = bitcast i8* %18 to float**
  store float* %3, float** %19, align 8
  %20 = getelementptr inbounds i8, i8* %0, i64 16
  %21 = bitcast i8* %20 to float**
  store float* %4, float** %21, align 8
  %22 = getelementptr inbounds i8, i8* %0, i64 24
  %23 = bitcast i8* %22 to float**
  store float* %5, float** %23, align 8
  %24 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %24, align 4, !tbaa !391
  %25 = getelementptr inbounds i8, i8* %0, i64 32
  %26 = bitcast i8* %25 to float**
  store float* %6, float** %26, align 8
  %27 = getelementptr inbounds i32, i32* %2, i64 4
  %28 = getelementptr inbounds i8, i8* %0, i64 40
  %29 = bitcast i8* %28 to float**
  store float* %7, float** %29, align 8
  %30 = getelementptr inbounds i8, i8* %0, i64 48
  %31 = bitcast i8* %30 to float**
  store float* %8, float** %31, align 8
  %32 = getelementptr inbounds i8, i8* %0, i64 56
  %33 = bitcast i8* %32 to float**
  store float* %9, float** %33, align 8
  %34 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %34, align 4, !tbaa !400
  %35 = getelementptr inbounds i8, i8* %0, i64 64
  %36 = bitcast i8* %35 to float**
  store float* %10, float** %36, align 8
  %37 = getelementptr inbounds i32, i32* %2, i64 8
  %38 = getelementptr inbounds i8, i8* %0, i64 72
  %39 = bitcast i8* %38 to float**
  store float* %11, float** %39, align 8
  %40 = getelementptr inbounds i8, i8* %0, i64 80
  %41 = bitcast i8* %40 to float**
  store float* %12, float** %41, align 8
  %42 = getelementptr inbounds i8, i8* %0, i64 88
  %43 = bitcast i8* %42 to float**
  store float* %13, float** %43, align 8
  %44 = bitcast i32* %37 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %44, align 4, !tbaa !402
  %45 = getelementptr inbounds i8, i8* %0, i64 96
  %46 = bitcast i8* %45 to float**
  store float* %14, float** %46, align 8
  %47 = getelementptr inbounds i32, i32* %2, i64 12
  store i32 3, i32* %47, align 4, !tbaa !405
  %48 = getelementptr inbounds i8, i8* %0, i64 104
  %49 = bitcast i8* %48 to %0*
  %50 = getelementptr inbounds i32, i32* %2, i64 13
  %51 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %52 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %53 = icmp eq i8* %52, null
  br i1 %53, label %handle_init, label %handle_init_end, !prof !83

handle_init:                                      ; preds = %entry
  %54 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %55 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %56 = call i32 %55(i8* %54, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.46, i64 0, i64 0), i8** nonnull %15)
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %58 = phi i8* [ %52, %entry ], [ %61, %call_end ]
  %59 = call i32 %51(i8* %58, %0* %16, i32* nonnull %2, i32 13, %0* nonnull %49, i32* nonnull %50)
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %56, %handle_init ], [ %59, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %61 = load i8*, i8** %15, align 8
  store i8* %61, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %62 = bitcast i8* %48 to i64*
  %63 = load i64, i64* %62, align 8
  %kernel_error_code = trunc i64 %63 to i32
  %64 = icmp eq i32 %kernel_error_code, 0
  br i1 %64, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %65 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %65(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x557241d9e2f0.w4.b0", !25, i64 0}
!25 = !{!"0x557241d9e2f0.w8.b0", !26, i64 0}
!26 = !{!"0x557241d9e2f0.w16.b0", !27, i64 0}
!27 = !{!"0x557241d9e2f0.w32.b0", !28, i64 0}
!28 = !{!"0x557241d9e2f0.w64.b0", !29, i64 0}
!29 = !{!"0x557241d9e2f0.w128.b0", !30, i64 0}
!30 = !{!"0x557241d9e2f0.w256.b0", !31, i64 0}
!31 = !{!"0x557241d9e2f0.w512.b0", !32, i64 0}
!32 = !{!"0x557241d9e2f0.w1024.b0", !33, i64 0}
!33 = !{!"0x557241d9e2f0", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x557241d9e2f0.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x557241d9e2f0.w4.b8", !38, i64 0}
!38 = !{!"0x557241d9e2f0.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x557241d9e2f0.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x557241d9e2f0.w4.b16", !43, i64 0}
!43 = !{!"0x557241d9e2f0.w8.b16", !44, i64 0}
!44 = !{!"0x557241d9e2f0.w16.b16", !27, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"0x557241d9e2f0.w4.b20", !43, i64 0}
!47 = !{!48, !48, i64 0}
!48 = !{!"0x557241d9e2f0.w4.b24", !49, i64 0}
!49 = !{!"0x557241d9e2f0.w8.b24", !44, i64 0}
!50 = !{!51, !51, i64 0}
!51 = !{!"0x557241d9e2f0.w4.b28", !49, i64 0}
!52 = !{!53, !53, i64 0}
!53 = !{!"0x557241d9e2f0.w4.b32", !54, i64 0}
!54 = !{!"0x557241d9e2f0.w8.b32", !55, i64 0}
!55 = !{!"0x557241d9e2f0.w16.b32", !56, i64 0}
!56 = !{!"0x557241d9e2f0.w32.b32", !28, i64 0}
!57 = !{!58, !58, i64 0}
!58 = !{!"0x557241d9e2f0.w4.b36", !54, i64 0}
!59 = !{!60, !60, i64 0}
!60 = !{!"0x557241d9e2f0.w4.b40", !61, i64 0}
!61 = !{!"0x557241d9e2f0.w8.b40", !55, i64 0}
!62 = !{!63, !63, i64 0}
!63 = !{!"0x557241d9e2f0.w4.b44", !61, i64 0}
!64 = !{!65, !65, i64 0}
!65 = !{!"0x557241d9e2f0.w4.b48", !66, i64 0}
!66 = !{!"0x557241d9e2f0.w8.b48", !67, i64 0}
!67 = !{!"0x557241d9e2f0.w16.b48", !56, i64 0}
!68 = !{!69, !69, i64 0}
!69 = !{!"0x557241de32c0.w8.b0", !70, i64 0}
!70 = !{!"0x557241de32c0.w16.b0", !71, i64 0}
!71 = !{!"0x557241de32c0.w32.b0", !72, i64 0}
!72 = !{!"0x557241de32c0.w64.b0", !73, i64 0}
!73 = !{!"0x557241de32c0.w128.b0", !74, i64 0}
!74 = !{!"0x557241de32c0.w256.b0", !75, i64 0}
!75 = !{!"0x557241de32c0.w512.b0", !76, i64 0}
!76 = !{!"0x557241de32c0.w1024.b0", !77, i64 0}
!77 = !{!"0x557241de32c0", !22, i64 0}
!78 = !{!79, !79, i64 0}
!79 = !{!"0x557241de32c0.w8.b8", !70, i64 0}
!80 = !{!81, !81, i64 0}
!81 = !{!"0x557241de32c0.w8.b16", !82, i64 0}
!82 = !{!"0x557241de32c0.w16.b16", !71, i64 0}
!83 = !{!"branch_weights", i32 1, i32 1048576}
!84 = !{!85, !85, i64 0}
!85 = !{!"0x557241de22a0.w8.b8", !86, i64 0}
!86 = !{!"0x557241de22a0.w16.b0", !87, i64 0}
!87 = !{!"0x557241de22a0.w32.b0", !88, i64 0}
!88 = !{!"0x557241de22a0.w64.b0", !89, i64 0}
!89 = !{!"0x557241de22a0.w128.b0", !90, i64 0}
!90 = !{!"0x557241de22a0.w256.b0", !91, i64 0}
!91 = !{!"0x557241de22a0.w512.b0", !92, i64 0}
!92 = !{!"0x557241de22a0.w1024.b0", !93, i64 0}
!93 = !{!"0x557241de22a0", !22, i64 0}
!94 = !{!95, !95, i64 0}
!95 = !{!"0x557241de22a0.w8.b16", !96, i64 0}
!96 = !{!"0x557241de22a0.w16.b16", !87, i64 0}
!97 = !{!98, !98, i64 0}
!98 = !{!"0x557241e3fc50.w8.b0", !99, i64 0}
!99 = !{!"0x557241e3fc50.w16.b0", !100, i64 0}
!100 = !{!"0x557241e3fc50.w32.b0", !101, i64 0}
!101 = !{!"0x557241e3fc50.w64.b0", !102, i64 0}
!102 = !{!"0x557241e3fc50.w128.b0", !103, i64 0}
!103 = !{!"0x557241e3fc50.w256.b0", !104, i64 0}
!104 = !{!"0x557241e3fc50.w512.b0", !105, i64 0}
!105 = !{!"0x557241e3fc50.w1024.b0", !106, i64 0}
!106 = !{!"0x557241e3fc50", !22, i64 0}
!107 = !{!108, !108, i64 0}
!108 = !{!"0x557241e3fc50.w8.b8", !99, i64 0}
!109 = !{!110, !110, i64 0}
!110 = !{!"0x557241e45390.w8.b0", !111, i64 0}
!111 = !{!"0x557241e45390.w16.b0", !112, i64 0}
!112 = !{!"0x557241e45390.w32.b0", !113, i64 0}
!113 = !{!"0x557241e45390.w64.b0", !114, i64 0}
!114 = !{!"0x557241e45390.w128.b0", !115, i64 0}
!115 = !{!"0x557241e45390.w256.b0", !116, i64 0}
!116 = !{!"0x557241e45390.w512.b0", !117, i64 0}
!117 = !{!"0x557241e45390.w1024.b0", !118, i64 0}
!118 = !{!"0x557241e45390", !22, i64 0}
!119 = !{!120, !120, i64 0}
!120 = !{!"0x557241e45390.w8.b8", !111, i64 0}
!121 = !{!122, !122, i64 0}
!122 = !{!"0x557241e7ce40.w8.b0", !123, i64 0}
!123 = !{!"0x557241e7ce40.w16.b0", !124, i64 0}
!124 = !{!"0x557241e7ce40.w32.b0", !125, i64 0}
!125 = !{!"0x557241e7ce40.w64.b0", !126, i64 0}
!126 = !{!"0x557241e7ce40.w128.b0", !127, i64 0}
!127 = !{!"0x557241e7ce40.w256.b0", !128, i64 0}
!128 = !{!"0x557241e7ce40.w512.b0", !129, i64 0}
!129 = !{!"0x557241e7ce40.w1024.b0", !130, i64 0}
!130 = !{!"0x557241e7ce40", !22, i64 0}
!131 = !{!132, !132, i64 0}
!132 = !{!"0x557241e7ce40.w8.b8", !123, i64 0}
!133 = !{!134, !134, i64 0}
!134 = !{!"0x557241ddc6f0.w8.b0", !135, i64 0}
!135 = !{!"0x557241ddc6f0.w16.b0", !136, i64 0}
!136 = !{!"0x557241ddc6f0.w32.b0", !137, i64 0}
!137 = !{!"0x557241ddc6f0.w64.b0", !138, i64 0}
!138 = !{!"0x557241ddc6f0.w128.b0", !139, i64 0}
!139 = !{!"0x557241ddc6f0.w256.b0", !140, i64 0}
!140 = !{!"0x557241ddc6f0.w512.b0", !141, i64 0}
!141 = !{!"0x557241ddc6f0.w1024.b0", !142, i64 0}
!142 = !{!"0x557241ddc6f0", !22, i64 0}
!143 = !{!144, !144, i64 0}
!144 = !{!"0x557241ddc6f0.w8.b8", !135, i64 0}
!145 = !{!146, !146, i64 0}
!146 = !{!"0x557241e22d60.w8.b0", !147, i64 0}
!147 = !{!"0x557241e22d60.w16.b0", !148, i64 0}
!148 = !{!"0x557241e22d60.w32.b0", !149, i64 0}
!149 = !{!"0x557241e22d60.w64.b0", !150, i64 0}
!150 = !{!"0x557241e22d60.w128.b0", !151, i64 0}
!151 = !{!"0x557241e22d60.w256.b0", !152, i64 0}
!152 = !{!"0x557241e22d60.w512.b0", !153, i64 0}
!153 = !{!"0x557241e22d60.w1024.b0", !154, i64 0}
!154 = !{!"0x557241e22d60", !22, i64 0}
!155 = !{!156, !156, i64 0}
!156 = !{!"0x557241e22d60.w8.b8", !147, i64 0}
!157 = !{!158, !158, i64 0}
!158 = !{!"0x557241e36020.w8.b0", !159, i64 0}
!159 = !{!"0x557241e36020.w16.b0", !160, i64 0}
!160 = !{!"0x557241e36020.w32.b0", !161, i64 0}
!161 = !{!"0x557241e36020.w64.b0", !162, i64 0}
!162 = !{!"0x557241e36020.w128.b0", !163, i64 0}
!163 = !{!"0x557241e36020.w256.b0", !164, i64 0}
!164 = !{!"0x557241e36020.w512.b0", !165, i64 0}
!165 = !{!"0x557241e36020.w1024.b0", !166, i64 0}
!166 = !{!"0x557241e36020", !22, i64 0}
!167 = !{!168, !168, i64 0}
!168 = !{!"0x557241e36020.w8.b8", !159, i64 0}
!169 = !{!170, !170, i64 0}
!170 = !{!"0x557241cb2770.w8.b0", !171, i64 0}
!171 = !{!"0x557241cb2770.w16.b0", !172, i64 0}
!172 = !{!"0x557241cb2770.w32.b0", !173, i64 0}
!173 = !{!"0x557241cb2770.w64.b0", !174, i64 0}
!174 = !{!"0x557241cb2770.w128.b0", !175, i64 0}
!175 = !{!"0x557241cb2770.w256.b0", !176, i64 0}
!176 = !{!"0x557241cb2770.w512.b0", !177, i64 0}
!177 = !{!"0x557241cb2770.w1024.b0", !178, i64 0}
!178 = !{!"0x557241cb2770", !22, i64 0}
!179 = !{!180, !180, i64 0}
!180 = !{!"0x557241cb2770.w8.b8", !171, i64 0}
!181 = !{!182, !182, i64 0}
!182 = !{!"0x557241f33220.w8.b0", !183, i64 0}
!183 = !{!"0x557241f33220.w16.b0", !184, i64 0}
!184 = !{!"0x557241f33220.w32.b0", !185, i64 0}
!185 = !{!"0x557241f33220.w64.b0", !186, i64 0}
!186 = !{!"0x557241f33220.w128.b0", !187, i64 0}
!187 = !{!"0x557241f33220.w256.b0", !188, i64 0}
!188 = !{!"0x557241f33220.w512.b0", !189, i64 0}
!189 = !{!"0x557241f33220.w1024.b0", !190, i64 0}
!190 = !{!"0x557241f33220", !22, i64 0}
!191 = !{!192, !192, i64 0}
!192 = !{!"0x557241f33220.w8.b8", !183, i64 0}
!193 = !{!194, !194, i64 0}
!194 = !{!"0x557241dff2e0.w8.b0", !195, i64 0}
!195 = !{!"0x557241dff2e0.w16.b0", !196, i64 0}
!196 = !{!"0x557241dff2e0.w32.b0", !197, i64 0}
!197 = !{!"0x557241dff2e0.w64.b0", !198, i64 0}
!198 = !{!"0x557241dff2e0.w128.b0", !199, i64 0}
!199 = !{!"0x557241dff2e0.w256.b0", !200, i64 0}
!200 = !{!"0x557241dff2e0.w512.b0", !201, i64 0}
!201 = !{!"0x557241dff2e0.w1024.b0", !202, i64 0}
!202 = !{!"0x557241dff2e0", !22, i64 0}
!203 = !{!204, !204, i64 0}
!204 = !{!"0x557241dff2e0.w8.b8", !195, i64 0}
!205 = !{!206, !206, i64 0}
!206 = !{!"0x557241e5d3d0.w8.b0", !207, i64 0}
!207 = !{!"0x557241e5d3d0.w16.b0", !208, i64 0}
!208 = !{!"0x557241e5d3d0.w32.b0", !209, i64 0}
!209 = !{!"0x557241e5d3d0.w64.b0", !210, i64 0}
!210 = !{!"0x557241e5d3d0.w128.b0", !211, i64 0}
!211 = !{!"0x557241e5d3d0.w256.b0", !212, i64 0}
!212 = !{!"0x557241e5d3d0.w512.b0", !213, i64 0}
!213 = !{!"0x557241e5d3d0.w1024.b0", !214, i64 0}
!214 = !{!"0x557241e5d3d0", !22, i64 0}
!215 = !{!216, !216, i64 0}
!216 = !{!"0x557241e5d3d0.w8.b8", !207, i64 0}
!217 = !{!218, !218, i64 0}
!218 = !{!"0x557241e05f70.w8.b0", !219, i64 0}
!219 = !{!"0x557241e05f70.w16.b0", !220, i64 0}
!220 = !{!"0x557241e05f70.w32.b0", !221, i64 0}
!221 = !{!"0x557241e05f70.w64.b0", !222, i64 0}
!222 = !{!"0x557241e05f70.w128.b0", !223, i64 0}
!223 = !{!"0x557241e05f70.w256.b0", !224, i64 0}
!224 = !{!"0x557241e05f70.w512.b0", !225, i64 0}
!225 = !{!"0x557241e05f70.w1024.b0", !226, i64 0}
!226 = !{!"0x557241e05f70", !22, i64 0}
!227 = !{!228, !228, i64 0}
!228 = !{!"0x557241e05f70.w8.b8", !219, i64 0}
!229 = !{!230, !230, i64 0}
!230 = !{!"0x557241e39430.w8.b0", !231, i64 0}
!231 = !{!"0x557241e39430.w16.b0", !232, i64 0}
!232 = !{!"0x557241e39430.w32.b0", !233, i64 0}
!233 = !{!"0x557241e39430.w64.b0", !234, i64 0}
!234 = !{!"0x557241e39430.w128.b0", !235, i64 0}
!235 = !{!"0x557241e39430.w256.b0", !236, i64 0}
!236 = !{!"0x557241e39430.w512.b0", !237, i64 0}
!237 = !{!"0x557241e39430.w1024.b0", !238, i64 0}
!238 = !{!"0x557241e39430", !22, i64 0}
!239 = !{!240, !240, i64 0}
!240 = !{!"0x557241e39430.w8.b8", !231, i64 0}
!241 = !{!242, !242, i64 0}
!242 = !{!"0x557241d391a0.w8.b0", !243, i64 0}
!243 = !{!"0x557241d391a0.w16.b0", !244, i64 0}
!244 = !{!"0x557241d391a0.w32.b0", !245, i64 0}
!245 = !{!"0x557241d391a0.w64.b0", !246, i64 0}
!246 = !{!"0x557241d391a0.w128.b0", !247, i64 0}
!247 = !{!"0x557241d391a0.w256.b0", !248, i64 0}
!248 = !{!"0x557241d391a0.w512.b0", !249, i64 0}
!249 = !{!"0x557241d391a0.w1024.b0", !250, i64 0}
!250 = !{!"0x557241d391a0", !22, i64 0}
!251 = !{!252, !252, i64 0}
!252 = !{!"0x557241d391a0.w8.b8", !243, i64 0}
!253 = !{!254, !254, i64 0}
!254 = !{!"0x557241e420e0.w8.b0", !255, i64 0}
!255 = !{!"0x557241e420e0.w16.b0", !256, i64 0}
!256 = !{!"0x557241e420e0.w32.b0", !257, i64 0}
!257 = !{!"0x557241e420e0.w64.b0", !258, i64 0}
!258 = !{!"0x557241e420e0.w128.b0", !259, i64 0}
!259 = !{!"0x557241e420e0.w256.b0", !260, i64 0}
!260 = !{!"0x557241e420e0.w512.b0", !261, i64 0}
!261 = !{!"0x557241e420e0.w1024.b0", !262, i64 0}
!262 = !{!"0x557241e420e0", !22, i64 0}
!263 = !{!264, !264, i64 0}
!264 = !{!"0x557241e420e0.w8.b8", !255, i64 0}
!265 = !{!266, !266, i64 0}
!266 = !{!"0x557241e217d0.w8.b0", !267, i64 0}
!267 = !{!"0x557241e217d0.w16.b0", !268, i64 0}
!268 = !{!"0x557241e217d0.w32.b0", !269, i64 0}
!269 = !{!"0x557241e217d0.w64.b0", !270, i64 0}
!270 = !{!"0x557241e217d0.w128.b0", !271, i64 0}
!271 = !{!"0x557241e217d0.w256.b0", !272, i64 0}
!272 = !{!"0x557241e217d0.w512.b0", !273, i64 0}
!273 = !{!"0x557241e217d0.w1024.b0", !274, i64 0}
!274 = !{!"0x557241e217d0", !22, i64 0}
!275 = !{!276, !276, i64 0}
!276 = !{!"0x557241f334c0.w8.b0", !277, i64 0}
!277 = !{!"0x557241f334c0.w16.b0", !278, i64 0}
!278 = !{!"0x557241f334c0.w32.b0", !279, i64 0}
!279 = !{!"0x557241f334c0.w64.b0", !280, i64 0}
!280 = !{!"0x557241f334c0.w128.b0", !281, i64 0}
!281 = !{!"0x557241f334c0.w256.b0", !282, i64 0}
!282 = !{!"0x557241f334c0.w512.b0", !283, i64 0}
!283 = !{!"0x557241f334c0.w1024.b0", !284, i64 0}
!284 = !{!"0x557241f334c0", !22, i64 0}
!285 = !{!286, !286, i64 0}
!286 = !{!"0x557241dd6710.w8.b0", !287, i64 0}
!287 = !{!"0x557241dd6710.w16.b0", !288, i64 0}
!288 = !{!"0x557241dd6710.w32.b0", !289, i64 0}
!289 = !{!"0x557241dd6710.w64.b0", !290, i64 0}
!290 = !{!"0x557241dd6710.w128.b0", !291, i64 0}
!291 = !{!"0x557241dd6710.w256.b0", !292, i64 0}
!292 = !{!"0x557241dd6710.w512.b0", !293, i64 0}
!293 = !{!"0x557241dd6710.w1024.b0", !294, i64 0}
!294 = !{!"0x557241dd6710", !22, i64 0}
!295 = !{!296, !296, i64 0}
!296 = !{!"0x557241dd6a30.w8.b0", !297, i64 0}
!297 = !{!"0x557241dd6a30.w16.b0", !298, i64 0}
!298 = !{!"0x557241dd6a30.w32.b0", !299, i64 0}
!299 = !{!"0x557241dd6a30.w64.b0", !300, i64 0}
!300 = !{!"0x557241dd6a30.w128.b0", !301, i64 0}
!301 = !{!"0x557241dd6a30.w256.b0", !302, i64 0}
!302 = !{!"0x557241dd6a30.w512.b0", !303, i64 0}
!303 = !{!"0x557241dd6a30.w1024.b0", !304, i64 0}
!304 = !{!"0x557241dd6a30", !22, i64 0}
!305 = !{!306, !306, i64 0}
!306 = !{!"0x557241f2b910.w8.b0", !307, i64 0}
!307 = !{!"0x557241f2b910.w16.b0", !308, i64 0}
!308 = !{!"0x557241f2b910.w32.b0", !309, i64 0}
!309 = !{!"0x557241f2b910.w64.b0", !310, i64 0}
!310 = !{!"0x557241f2b910.w128.b0", !311, i64 0}
!311 = !{!"0x557241f2b910.w256.b0", !312, i64 0}
!312 = !{!"0x557241f2b910.w512.b0", !313, i64 0}
!313 = !{!"0x557241f2b910.w1024.b0", !314, i64 0}
!314 = !{!"0x557241f2b910", !22, i64 0}
!315 = !{!316, !316, i64 0}
!316 = !{!"0x557241f2b910.w8.b8", !307, i64 0}
!317 = !{!318, !318, i64 0}
!318 = !{!"0x557241f2b910.w8.b16", !319, i64 0}
!319 = !{!"0x557241f2b910.w16.b16", !308, i64 0}
!320 = !{!321, !321, i64 0}
!321 = !{!"0x557241f2b910.w8.b24", !319, i64 0}
!322 = !{!323, !323, i64 0}
!323 = !{!"0x557241f2d0f0.w8.b16", !324, i64 0}
!324 = !{!"0x557241f2d0f0.w16.b16", !325, i64 0}
!325 = !{!"0x557241f2d0f0.w32.b0", !326, i64 0}
!326 = !{!"0x557241f2d0f0.w64.b0", !327, i64 0}
!327 = !{!"0x557241f2d0f0.w128.b0", !328, i64 0}
!328 = !{!"0x557241f2d0f0.w256.b0", !329, i64 0}
!329 = !{!"0x557241f2d0f0.w512.b0", !330, i64 0}
!330 = !{!"0x557241f2d0f0.w1024.b0", !331, i64 0}
!331 = !{!"0x557241f2d0f0", !22, i64 0}
!332 = !{!333, !333, i64 0}
!333 = !{!"0x557241f2d0f0.w8.b24", !324, i64 0}
!334 = !{!335, !335, i64 0}
!335 = !{!"0x557241f2ef00.w8.b0", !336, i64 0}
!336 = !{!"0x557241f2ef00.w16.b0", !337, i64 0}
!337 = !{!"0x557241f2ef00.w32.b0", !338, i64 0}
!338 = !{!"0x557241f2ef00.w64.b0", !339, i64 0}
!339 = !{!"0x557241f2ef00.w128.b0", !340, i64 0}
!340 = !{!"0x557241f2ef00.w256.b0", !341, i64 0}
!341 = !{!"0x557241f2ef00.w512.b0", !342, i64 0}
!342 = !{!"0x557241f2ef00.w1024.b0", !343, i64 0}
!343 = !{!"0x557241f2ef00", !22, i64 0}
!344 = !{!345, !345, i64 0}
!345 = !{!"0x557241f2ef00.w8.b8", !336, i64 0}
!346 = !{!347, !347, i64 0}
!347 = !{!"0x557241f2ef00.w8.b16", !348, i64 0}
!348 = !{!"0x557241f2ef00.w16.b16", !337, i64 0}
!349 = !{!350, !350, i64 0}
!350 = !{!"0x557241f2ef00.w8.b24", !348, i64 0}
!351 = !{!352, !352, i64 0}
!352 = !{!"0x557241f30210.w8.b16", !353, i64 0}
!353 = !{!"0x557241f30210.w16.b16", !354, i64 0}
!354 = !{!"0x557241f30210.w32.b0", !355, i64 0}
!355 = !{!"0x557241f30210.w64.b0", !356, i64 0}
!356 = !{!"0x557241f30210.w128.b0", !357, i64 0}
!357 = !{!"0x557241f30210.w256.b0", !358, i64 0}
!358 = !{!"0x557241f30210.w512.b0", !359, i64 0}
!359 = !{!"0x557241f30210.w1024.b0", !360, i64 0}
!360 = !{!"0x557241f30210", !22, i64 0}
!361 = !{!362, !362, i64 0}
!362 = !{!"0x557241f30210.w8.b24", !353, i64 0}
!363 = !{!364, !364, i64 0}
!364 = !{!"0x557241f31f60.w8.b0", !365, i64 0}
!365 = !{!"0x557241f31f60.w16.b0", !366, i64 0}
!366 = !{!"0x557241f31f60.w32.b0", !367, i64 0}
!367 = !{!"0x557241f31f60.w64.b0", !368, i64 0}
!368 = !{!"0x557241f31f60.w128.b0", !369, i64 0}
!369 = !{!"0x557241f31f60.w256.b0", !370, i64 0}
!370 = !{!"0x557241f31f60.w512.b0", !371, i64 0}
!371 = !{!"0x557241f31f60.w1024.b0", !372, i64 0}
!372 = !{!"0x557241f31f60", !22, i64 0}
!373 = !{!374, !374, i64 0}
!374 = !{!"0x557241f31f60.w8.b8", !365, i64 0}
!375 = !{!376, !376, i64 0}
!376 = !{!"0x557241f31f60.w8.b16", !377, i64 0}
!377 = !{!"0x557241f31f60.w16.b16", !366, i64 0}
!378 = !{!379, !379, i64 0}
!379 = !{!"0x557241dc4620.w8.b8", !380, i64 0}
!380 = !{!"0x557241dc4620.w16.b0", !381, i64 0}
!381 = !{!"0x557241dc4620.w32.b0", !382, i64 0}
!382 = !{!"0x557241dc4620.w64.b0", !383, i64 0}
!383 = !{!"0x557241dc4620.w128.b0", !384, i64 0}
!384 = !{!"0x557241dc4620.w256.b0", !385, i64 0}
!385 = !{!"0x557241dc4620.w512.b0", !386, i64 0}
!386 = !{!"0x557241dc4620.w1024.b0", !387, i64 0}
!387 = !{!"0x557241dc4620", !22, i64 0}
!388 = !{!389, !389, i64 0}
!389 = !{!"0x557241dc4620.w8.b16", !390, i64 0}
!390 = !{!"0x557241dc4620.w16.b16", !381, i64 0}
!391 = !{!392, !392, i64 0}
!392 = !{!"0x557241e6b510.w16.b0", !393, i64 0}
!393 = !{!"0x557241e6b510.w32.b0", !394, i64 0}
!394 = !{!"0x557241e6b510.w64.b0", !395, i64 0}
!395 = !{!"0x557241e6b510.w128.b0", !396, i64 0}
!396 = !{!"0x557241e6b510.w256.b0", !397, i64 0}
!397 = !{!"0x557241e6b510.w512.b0", !398, i64 0}
!398 = !{!"0x557241e6b510.w1024.b0", !399, i64 0}
!399 = !{!"0x557241e6b510", !22, i64 0}
!400 = !{!401, !401, i64 0}
!401 = !{!"0x557241e6b510.w16.b16", !393, i64 0}
!402 = !{!403, !403, i64 0}
!403 = !{!"0x557241e6b510.w16.b32", !404, i64 0}
!404 = !{!"0x557241e6b510.w32.b32", !394, i64 0}
!405 = !{!406, !406, i64 0}
!406 = !{!"0x557241e6b510.w4.b48", !407, i64 0}
!407 = !{!"0x557241e6b510.w8.b48", !408, i64 0}
!408 = !{!"0x557241e6b510.w16.b48", !404, i64 0}
