void default_function_kernel(float* T_fast_tanh, float* ph, float* ph_1);
void default_function_kernel(float* T_fast_tanh, float* ph, float* ph_1) {
  #pragma omp parallel for
  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 100; ++ax0_ax1_fused) {
    for (int32_t ax2 = 0; ax2 < 10; ++ax2) {
      for (int32_t ax3_inner = 0; ax3_inner < 10; ++ax3_inner) {
        T_fast_tanh[(((ax0_ax1_fused * 100) + (ax2 * 10)) + ax3_inner)] = ((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));
      }
    }
  }
}

