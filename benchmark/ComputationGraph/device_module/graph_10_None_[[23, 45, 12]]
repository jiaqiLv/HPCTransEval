void default_function_kernel(float* T_transpose, float* ph);
void default_function_kernel(float* T_transpose, float* ph) {
  #pragma omp parallel for
  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 207; ++ax0_ax1_fused) {
    for (int32_t ax2_outer = 0; ax2_outer < 2; ++ax2_outer) {
      for (int32_t ax2_inner = 0; ax2_inner < 16; ++ax2_inner) {
        if (((ax2_outer * 4) + (ax2_inner >> 2)) < 5) {
          T_transpose[(((ax0_ax1_fused * 20) + (ax2_outer * 16)) + ax2_inner)] = ((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));
        }
      }
    }
  }
}

