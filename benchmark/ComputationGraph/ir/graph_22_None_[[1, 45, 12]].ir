# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph: T.Buffer((1, 45, 12), "float32"), T_strided_slice: T.Buffer((5, 5, 3), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0_ax1_fused in T.parallel(25):
            for ax2_inner in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused // 5 * 12 + ax0_ax1_fused % 5 + 14
                T_strided_slice_1 = T.Buffer((75,), data=T_strided_slice.data)
                ph_1 = T.Buffer((540,), data=ph.data)
                T_strided_slice_1[ax0_ax1_fused * 3 + ax2_inner] = T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.float32(-2.7261423674040941e-10) + T.float32(2.7706814620387377e-08)) + T.float32(-2.101023937939317e-06)) + T.float32(-5.6925062381196767e-05)) + T.float32(-0.00073499063728377223)) + T.float32(-0.0029545999132096767)) + T.float32(-0.016096033155918121)) / (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.float32(-1.4566071513399947e-05) + T.float32(-0.00021337404905352741)) + T.float32(-0.001682827016338706)) + T.float32(-0.0073733292520046234)) + T.float32(-0.014264739118516445))