# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph: T.Buffer((11, 22, 33, 44), "float32"), ph_1: T.Buffer((22, 33, 44, 55), "float32"), T_fast_tanh: T.Buffer((10, 10, 10, 10), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0_ax1_fused in T.parallel(100):
            for ax2, ax3_inner in T.grid(10, 10):
                cse_var_4: T.int32 = ax0_ax1_fused % 10
                cse_var_3: T.int32 = ax0_ax1_fused // 10
                cse_var_2: T.int32 = cse_var_3 * 79860 + cse_var_4 * 2420 + ax2 * 55 + ax3_inner + 933559
                cse_var_1: T.int32 = cse_var_3 * 31944 + cse_var_4 * 1452 + ax2 * 44 + ax3_inner + 16973
                T_fast_tanh_1 = T.Buffer((10000,), data=T_fast_tanh.data)
                ph_2 = T.Buffer((351384,), data=ph.data)
                ph_3 = T.Buffer((1756920,), data=ph_1.data)
                T_fast_tanh_1[ax0_ax1_fused * 100 + ax2 * 10 + ax3_inner] = T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.float32(-2.76076847742355e-16) + T.float32(2.0001879048247699e-13)) + T.float32(-8.60467152213735e-11)) + T.float32(5.1222970903711401e-08)) + T.float32(1.4857223571797901e-05)) + T.float32(0.00063726192887543596)) + T.float32(0.0048935245589178597)) / (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.float32(1.1982583946670199e-06) + T.float32(0.000118534705686654)) + T.float32(0.0022684346324390002)) + T.float32(0.0048935251855438504))