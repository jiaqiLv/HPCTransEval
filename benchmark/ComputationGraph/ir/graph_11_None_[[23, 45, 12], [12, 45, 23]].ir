# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph: T.Buffer((23, 45, 12), "float32"), ph_1: T.Buffer((12, 45, 23), "float32"), T_softmax_norm: T.Buffer((12, 45, 23), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        T_softmax_maxelem = T.allocate([540], "float32", "global")
        T_softmax_expsum = T.allocate([540], "float32", "global")
        T_softmax_maxelem_1 = T.Buffer((540,), data=T_softmax_maxelem)
        ph_2 = T.Buffer((12420,), data=ph.data)
        ph_3 = T.Buffer((12420,), data=ph_1.data)
        for i0, i1 in T.grid(12, 45):
            T_softmax_maxelem_1[i0 * 45 + i1] = T.float32(-3.4028234663852886e+38)
            for k in range(23):
                cse_var_1: T.int32 = i0 * 45 + i1
                T_softmax_maxelem_1[cse_var_1] = T.max(T_softmax_maxelem_1[cse_var_1], ph_2[k * 540 + i1 * 12 + i0] / ph_3[i0 * 1035 + i1 * 23 + k])
        T_softmax_expsum_1 = T.Buffer((540,), data=T_softmax_expsum)
        for i0, i1 in T.grid(12, 45):
            T_softmax_expsum_1[i0 * 45 + i1] = T.float32(0)
            for k in range(23):
                cse_var_4: T.int32 = i0 * 45 + i1
                cse_var_3: T.int32 = k * 540 + i1 * 12 + i0
                cse_var_2: T.int32 = i0 * 1035 + i1 * 23 + k
                T_softmax_expsum_1[cse_var_4] = T_softmax_expsum_1[cse_var_4] + T.max(T.reinterpret("float32", T.shift_left(T.Cast("int32", T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4])
        for i0_i1_fused in T.parallel(540):
            for i2_outer, i2_inner in T.grid(2, 16):
                if T.likely(i2_outer * 16 + i2_inner < 23):
                    cse_var_6: T.int32 = i0_i1_fused * 23 + i2_outer * 16 + i2_inner
                    cse_var_5: T.int32 = i2_outer * 8640 + i2_inner * 540 + i0_i1_fused % 45 * 12 + i0_i1_fused // 45
                    T_softmax_norm_1 = T.Buffer((12420,), data=T_softmax_norm.data)
                    T_softmax_norm_1[cse_var_6] = T.max(T.reinterpret("float32", T.shift_left(T.Cast("int32", T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused]) / T_softmax_expsum_1[i0_i1_fused]