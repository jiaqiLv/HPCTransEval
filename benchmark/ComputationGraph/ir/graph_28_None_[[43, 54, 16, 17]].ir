# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph: T.Buffer((43, 54, 16, 17), "float32"), T_fast_exp: T.Buffer((10, 8, 6, 4), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0_ax1_fused in T.parallel(80):
            for ax2, ax3_inner in T.grid(6, 4):
                cse_var_1: T.int32 = ax2 * 14688 + ax0_ax1_fused % 8 * 272 + ax3_inner * 17 + ax0_ax1_fused // 8 + 29699
                T_fast_exp_1 = T.Buffer((1920,), data=T_fast_exp.data)
                ph_1 = T.Buffer((631584,), data=ph.data)
                T_fast_exp_1[ax0_ax1_fused * 24 + ax2 * 4 + ax3_inner] = T.max(T.reinterpret("float32", T.shift_left(T.Cast("int32", T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), T.log2(T.cos(ph_1[cse_var_1])))