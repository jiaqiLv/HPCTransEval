# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph: T.Buffer((1, 33, 1, 44), "float32"), T_softmax_norm: T.Buffer((11, 33, 12, 44), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        T_softmax_maxelem = T.allocate([17424], "float32", "global")
        T_softmax_expsum = T.allocate([17424], "float32", "global")
        T_softmax_maxelem_1 = T.Buffer((17424,), data=T_softmax_maxelem)
        ph_1 = T.Buffer((1452,), data=ph.data)
        for i0, i1, i2 in T.grid(33, 12, 44):
            T_softmax_maxelem_1[i0 * 528 + i1 * 44 + i2] = T.float32(-3.4028234663852886e+38)
            for k in range(11):
                cse_var_1: T.int32 = i0 * 528 + i1 * 44 + i2
                T_softmax_maxelem_1[cse_var_1] = T.max(T_softmax_maxelem_1[cse_var_1], T.sqrt(ph_1[i0 * 44 + i2]))
        T_softmax_expsum_1 = T.Buffer((17424,), data=T_softmax_expsum)
        for i0, i1, i2 in T.grid(33, 12, 44):
            T_softmax_expsum_1[i0 * 528 + i1 * 44 + i2] = T.float32(0)
            for k in range(11):
                cse_var_3: T.int32 = i0 * 44 + i2
                cse_var_2: T.int32 = i0 * 528 + i1 * 44 + i2
                T_softmax_expsum_1[cse_var_2] = T_softmax_expsum_1[cse_var_2] + T.max(T.reinterpret("float32", T.shift_left(T.Cast("int32", T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2])
        for i0_i1_fused in T.parallel(363):
            for i2, i3_outer, i3_inner in T.grid(12, 3, 16):
                if T.likely(i3_outer * 4 + i3_inner // 4 < 11):
                    cse_var_8: T.int32 = i0_i1_fused % 33
                    cse_var_7: T.int32 = i2 * 44
                    cse_var_6: T.int32 = i3_outer * 16
                    cse_var_5: T.int32 = cse_var_8 * 44 + cse_var_6 + i3_inner
                    cse_var_4: T.int32 = cse_var_8 * 528 + cse_var_7 + cse_var_6 + i3_inner
                    T_softmax_norm_1 = T.Buffer((191664,), data=T_softmax_norm.data)
                    T_softmax_norm_1[i0_i1_fused * 528 + cse_var_7 + cse_var_6 + i3_inner] = T.max(T.reinterpret("float32", T.shift_left(T.Cast("int32", T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4]) / T_softmax_expsum_1[cse_var_4]