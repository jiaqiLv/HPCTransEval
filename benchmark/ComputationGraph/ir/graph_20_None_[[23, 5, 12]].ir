# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph: T.Buffer((23, 5, 12), "float32"), T_softmax_norm: T.Buffer((8, 21), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        T_softmax_maxelem = T.allocate([8], "float32", "global")
        T_softmax_expsum = T.allocate([8], "float32", "global")
        T_softmax_maxelem_1 = T.Buffer((8,), data=T_softmax_maxelem, align=32)
        ph_1 = T.Buffer((1380,), data=ph.data)
        for i0 in range(8):
            T_softmax_maxelem_1[i0] = T.float32(-3.4028234663852886e+38)
            for k in range(21):
                T_softmax_maxelem_1[i0] = T.max(T_softmax_maxelem_1[i0], ph_1[i0 * 60 + k % 7 + 109 - k // 7 * 12])
        T_softmax_expsum_1 = T.Buffer((8,), data=T_softmax_expsum, align=32)
        for i0 in range(8):
            T_softmax_expsum_1[i0] = T.float32(0)
            for k in range(21):
                T_softmax_expsum_1[i0] = T_softmax_expsum_1[i0] + T.exp(ph_1[i0 * 60 + k % 7 + 109 - k // 7 * 12] - T_softmax_maxelem_1[i0])
        for i0 in T.parallel(8):
            for i1_outer, i1_inner in T.grid(2, 16):
                if T.likely(i1_outer * 16 + i1_inner < 21):
                    T_softmax_norm_1 = T.Buffer((168,), data=T_softmax_norm.data)
                    cse_var_1: T.int32 = i1_outer * 16
                    T_softmax_norm_1[i0 * 21 + cse_var_1 + i1_inner] = T.exp(ph_1[i0 * 60 + (i1_outer * 2 + i1_inner) % 7 + 109 - (cse_var_1 + i1_inner) // 7 * 12] - T_softmax_maxelem_1[i0]) / T_softmax_expsum_1[i0]