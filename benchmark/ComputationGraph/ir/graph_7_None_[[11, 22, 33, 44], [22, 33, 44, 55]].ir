# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph: T.Buffer((11, 22, 33, 44), "float32"), ph_1: T.Buffer((22, 33, 44, 55), "float32"), T_fast_exp: T.Buffer((10, 10, 10, 10), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0_ax1_fused in T.parallel(100):
            for ax2, ax3_inner in T.grid(10, 10):
                cse_var_4: T.int32 = ax0_ax1_fused % 10
                cse_var_3: T.int32 = ax0_ax1_fused // 10
                cse_var_2: T.int32 = cse_var_3 * 79860 + cse_var_4 * 2420 + ax2 * 55 + ax3_inner + 933559
                cse_var_1: T.int32 = cse_var_3 * 31944 + cse_var_4 * 1452 + ax2 * 44 + ax3_inner + 16973
                T_fast_exp_1 = T.Buffer((10000,), data=T_fast_exp.data)
                ph_2 = T.Buffer((351384,), data=ph.data)
                ph_3 = T.Buffer((1756920,), data=ph_1.data)
                T_fast_exp_1[ax0_ax1_fused * 100 + ax2 * 10 + ax3_inner] = T.max(T.reinterpret("float32", T.shift_left(T.Cast("int32", T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), ph_2[cse_var_1] * ph_3[cse_var_2])