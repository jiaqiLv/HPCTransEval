# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph: T.Buffer((23, 5, 12), "float32"), T_fast_exp: T.Buffer((11, 23, 5, 12), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        T_softmax_maxelem = T.allocate([1265], "float32", "global")
        compute = T.allocate([1265], "float32", "global")
        T_softmax_maxelem_1 = T.Buffer((1265,), data=T_softmax_maxelem)
        ph_1 = T.Buffer((1380,), data=ph.data)
        for i0, i1, i2 in T.grid(11, 23, 5):
            T_softmax_maxelem_1[i0 * 115 + i1 * 5 + i2] = T.float32(-3.4028234663852886e+38)
            for k in range(12):
                cse_var_1: T.int32 = i0 * 115 + i1 * 5 + i2
                T_softmax_maxelem_1[cse_var_1] = T.max(T_softmax_maxelem_1[cse_var_1], ph_1[i1 * 60 + k + 48 - i2 * 12])
        compute_1 = T.Buffer((1265,), data=compute)
        for i0, i1, i2 in T.grid(11, 23, 5):
            compute_1[i0 * 115 + i1 * 5 + i2] = T.float32(0)
            for k in range(12):
                cse_var_2: T.int32 = i0 * 115 + i1 * 5 + i2
                compute_1[cse_var_2] = compute_1[cse_var_2] + T.exp(ph_1[i1 * 60 + k + 48 - i2 * 12] - T_softmax_maxelem_1[cse_var_2])
        for ax0_ax1_fused in T.parallel(253):
            for ax2, ax3_inner in T.grid(5, 12):
                cse_var_5: T.int32 = ax2 * 12
                cse_var_4: T.int32 = ax0_ax1_fused * 5 + ax2
                cse_var_3: T.int32 = ax0_ax1_fused % 23 * 60 + ax3_inner + 48 - cse_var_5
                T_fast_exp_1 = T.Buffer((15180,), data=T_fast_exp.data)
                T_fast_exp_1[ax0_ax1_fused * 60 + cse_var_5 + ax3_inner] = T.max(T.reinterpret("float32", T.shift_left(T.Cast("int32", T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]))